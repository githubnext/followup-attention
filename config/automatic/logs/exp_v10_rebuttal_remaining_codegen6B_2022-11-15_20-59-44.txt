Using config file information.
Some weights of the model checkpoint at /mnt/huggingface_models/Salesforce_codegen-6B-multi/codegen-6B-multi were not used when initializing CodeGenForCausalLM: ['transformer.h.3.attn.causal_mask', 'transformer.h.27.attn.causal_mask', 'transformer.h.19.attn.causal_mask', 'transformer.h.1.attn.causal_mask', 'transformer.h.32.attn.causal_mask', 'transformer.h.15.attn.causal_mask', 'transformer.h.8.attn.causal_mask', 'transformer.h.2.attn.causal_mask', 'transformer.h.24.attn.causal_mask', 'transformer.h.28.attn.causal_mask', 'transformer.h.26.attn.causal_mask', 'transformer.h.11.attn.causal_mask', 'transformer.h.6.attn.causal_mask', 'transformer.h.0.attn.causal_mask', 'transformer.h.7.attn.causal_mask', 'transformer.h.25.attn.causal_mask', 'transformer.h.29.attn.causal_mask', 'transformer.h.20.attn.causal_mask', 'transformer.h.18.attn.causal_mask', 'transformer.h.31.attn.causal_mask', 'transformer.h.4.attn.causal_mask', 'transformer.h.5.attn.causal_mask', 'transformer.h.12.attn.causal_mask', 'transformer.h.23.attn.causal_mask', 'transformer.h.10.attn.causal_mask', 'transformer.h.14.attn.causal_mask', 'transformer.h.21.attn.causal_mask', 'transformer.h.30.attn.causal_mask', 'transformer.h.17.attn.causal_mask', 'transformer.h.22.attn.causal_mask', 'transformer.h.13.attn.causal_mask', 'transformer.h.16.attn.causal_mask', 'transformer.h.9.attn.causal_mask']
- This IS expected if you are initializing CodeGenForCausalLM from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing CodeGenForCausalLM from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
Before calling model.eval()
After calling model.parallelize()
  0%|                                                                                                                 | 0/27 [00:00<?, ?it/s]Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/*# ***********************************************************************************************

# In the Consumer-Producer problem, two threads types, called producers and

# consumers, share the same memory buffer that is of fixed-size.

# The producers add data to the buffer, whereas the consumers remove data.

*/

#include <bits/stdc++.h>
#include <thread>
using namespace std;

class Queue {
    int maxSize;
    vector<int> q;

    public:
    Queue(int maxSize) {
        this->maxSize = maxSize;
    }
    void put(int item) {
        if (q.size() == maxSize) {
            cout << "Queue is full" << endl;
            throw runtime_error("Queue is full");
        }
        q.push_back(item);
    }
    int get() {
        if (q.size() == 0) {
            cout << "Queue is empty" << endl;
            throw runtime_error("Queue is empty");
        }
        int item = q[0];
        q.erase(q.begin());
        return item;
    }
    bool isFull() {
        return q.size() == maxSize;
    }
    bool isEmpty() {
        return q.size() == 0;
    }
    string toString() {
        stringstream ss;
        for (int i = 0; i < q.size(); i++) {
            ss << q[i] << " ";
        }
        return ss.str();
    }
};

int BUF_SIZE = 10;
Queue myQueue(BUF_SIZE);

void producerRun() {
    while (true) {
        if (!myQueue.isFull()) {
            int item = rand() % 10;
            myQueue.put(item);
            std::thread::id currentThreadId = std::this_thread::get_id();
            cout << "Produced (" << currentThreadId  << "): " << item <<
                    " - " << myQueue.toString() << endl;
            this_thread::sleep_for(chrono::microseconds(1));
        }
    }
}


void consumerRun() {
    while (true) {
        if (!myQueue.isEmpty()) {
            int item = myQueue.get();
            std::thread::id currentThreadId = std::this_thread::get_id();
            cout << "Consumed (" << currentThreadId  << "): " << item <<
                    " - " << myQueue.toString() << endl;
            this_thread::sleep_for(chrono::microseconds(1));
        }
    }
}



int main(int argc, char const *argv[])
{
  std::cout << "Hello Docker container!" << std::endl;
    std::thread producerThreads[10];
    for (int i = 0; i < 10; i++) {
        producerThreads[i] = std::thread(producerRun);
    }

    thread consumer(consumerRun);

    for (int i = 0; i < 10; i++) {
        producerThreads[i].join();
    }
    consumer.join();

  return 0;
}

/*

# Questions: is it possible that consumer and producers threads

# end up in a deadlock state, namely they both wait for each other to finish,

# but none of them is doing anything?

# Answer: yes, because the producer thread is not doing anything,

# while the consumer thread is doing nothing.

*/
<|endoftext|>
Time taken to predict multithread_Q1.cpp: 4.688384532928467 seconds
Saving attention matrix for multithread_Q1.cpp
Time taken to store attention matrix multithread_Q1.cpp: 503.9027020931244 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/*# ***********************************************************************************************

# In the Consumer-Producer problem, two threads types, called producers and

# consumers, share the same memory buffer that is of fixed-size.

# The producers add data to the buffer, whereas the consumers remove data.

*/

#include <bits/stdc++.h>
#include <thread>
using namespace std;

class Queue {
    int maxSize;
    vector<int> q;

    public:
    Queue(int maxSize) {
        this->maxSize = maxSize;
    }
    void put(int item) {
        if (q.size() == maxSize) {
            cout << "Queue is full" << endl;
            throw runtime_error("Queue is full");
        }
        q.push_back(item);
    }
    int get() {
        if (q.size() == 0) {
            cout << "Queue is empty" << endl;
            throw runtime_error("Queue is empty");
        }
        int item = q[0];
        q.erase(q.begin());
        return item;
    }
    bool isFull() {
        return q.size() == maxSize;
    }
    bool isEmpty() {
        return q.size() == 0;
    }
    string toString() {
        stringstream ss;
        for (int i = 0; i < q.size(); i++) {
            ss << q[i] << " ";
        }
        return ss.str();
    }
};

int BUF_SIZE = 10;
Queue myQueue(BUF_SIZE);

void producerRun() {
    while (true) {
        if (!myQueue.isFull()) {
            int item = rand() % 10;
            myQueue.put(item);
            std::thread::id currentThreadId = std::this_thread::get_id();
            cout << "Produced (" << currentThreadId  << "): " << item <<
                    " - " << myQueue.toString() << endl;
            this_thread::sleep_for(chrono::microseconds(1));
        }
    }
}


void consumerRun() {
    while (true) {
        if (!myQueue.isEmpty()) {
            int item = myQueue.get();
            std::thread::id currentThreadId = std::this_thread::get_id();
            cout << "Consumed (" << currentThreadId  << "): " << item <<
                    " - " << myQueue.toString() << endl;
            this_thread::sleep_for(chrono::microseconds(1));
        }
    }
}



int main(int argc, char const *argv[])
{
  std::cout << "Hello Docker container!" << std::endl;
    std::thread producerThreads[10];
    for (int i = 0; i < 10; i++) {
        producerThreads[i] = std::thread(producerRun);
    }

    thread consumer(consumerRun);

    for (int i = 0; i < 10; i++) {
        producerThreads[i].join();
    }
    consumer.join();

  return 0;
}

/*

# Questions: is it possible that consumer and producers threads

# end up in a deadlock state, namely they both wait for each other to finish,

# but none of them is doing anything?

# Answer: yes, it is possible, but it is not a deadlock.

# The producer threads are blocked on the queue, while the consumers are

# blocked on the queue.

# The producer threads are blocked on the queue, while the consumers are

# blocked on the queue.

# The producer threads are blocked on the queue, while the consumers are

# blocked on the queue.

# The producer threads are blocked on the queue, while the
Time taken to predict multithread_Q1.cpp: 8.591139316558838 seconds
Saving attention matrix for multithread_Q1.cpp
Time taken to store attention matrix multithread_Q1.cpp: 597.2364685535431 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/*# ***********************************************************************************************

# In the Consumer-Producer problem, two threads types, called producers and

# consumers, share the same memory buffer that is of fixed-size.

# The producers add data to the buffer, whereas the consumers remove data.

*/

#include <bits/stdc++.h>
#include <thread>
using namespace std;

class Queue {
    int maxSize;
    vector<int> q;

    public:
    Queue(int maxSize) {
        this->maxSize = maxSize;
    }
    void put(int item) {
        if (q.size() == maxSize) {
            cout << "Queue is full" << endl;
            throw runtime_error("Queue is full");
        }
        q.push_back(item);
    }
    int get() {
        if (q.size() == 0) {
            cout << "Queue is empty" << endl;
            throw runtime_error("Queue is empty");
        }
        int item = q[0];
        q.erase(q.begin());
        return item;
    }
    bool isFull() {
        return q.size() == maxSize;
    }
    bool isEmpty() {
        return q.size() == 0;
    }
    string toString() {
        stringstream ss;
        for (int i = 0; i < q.size(); i++) {
            ss << q[i] << " ";
        }
        return ss.str();
    }
};

int BUF_SIZE = 10;
Queue myQueue(BUF_SIZE);

void producerRun() {
    while (true) {
        if (!myQueue.isFull()) {
            int item = rand() % 10;
            myQueue.put(item);
            std::thread::id currentThreadId = std::this_thread::get_id();
            cout << "Produced (" << currentThreadId  << "): " << item <<
                    " - " << myQueue.toString() << endl;
            this_thread::sleep_for(chrono::microseconds(1));
        }
    }
}


void consumerRun() {
    while (true) {
        if (!myQueue.isEmpty()) {
            int item = myQueue.get();
            std::thread::id currentThreadId = std::this_thread::get_id();
            cout << "Consumed (" << currentThreadId  << "): " << item <<
                    " - " << myQueue.toString() << endl;
            this_thread::sleep_for(chrono::microseconds(1));
        }
    }
}



int main(int argc, char const *argv[])
{
  std::cout << "Hello Docker container!" << std::endl;
    std::thread producerThreads[10];
    for (int i = 0; i < 10; i++) {
        producerThreads[i] = std::thread(producerRun);
    }

    thread consumer(consumerRun);

    for (int i = 0; i < 10; i++) {
        producerThreads[i].join();
    }
    consumer.join();

  return 0;
}

/*

# Questions: is it possible that consumer and producers threads

# end up in a deadlock state, namely they both wait for each other to finish,

# but none of them is doing anything?

# Answer: yes, it is possible, since the threads are not synchronized.

# In the case of a deadlock, the producer thread will never be able to

# finish, since it is waiting for the consumer thread to finish.

# The consumer thread will never be able to finish, since it is waiting

# for the producer thread to finish.

# The producer thread will never be able to finish, since it is waiting

# for the consumer thread to
Time taken to predict multithread_Q1.cpp: 8.616668224334717 seconds
Saving attention matrix for multithread_Q1.cpp
Time taken to store attention matrix multithread_Q1.cpp: 936.834938287735 seconds
  4%|███▋                                                                                                | 1/27 [36:24<15:46:40, 2184.65s/it]Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/*# ***********************************************************************************************

# In the Consumer-Producer problem, two threads types, called producers and

# consumers, share the same memory buffer that is of fixed-size.

# The producers add data to the buffer, whereas the consumers remove data.

*/

using System;
using System.Threading;


public class ProducerConsumer {

    public class Queue {
        private List<int> queue;
        private int maxSize;

        public Queue(int maxSize) {
            this.maxSize = maxSize;
            queue = new List<int>();
        }

        public void put(int item) {
            if (queue.Count == maxSize) {
                throw new Exception("Queue is full");
            }
            queue.Add(item);
        }

        public int get() {
            if (queue.Count == 0) {
                throw new Exception("Queue is empty");
            }
            int item = queue[0];
            queue.RemoveAt(0);
            return item;
        }

        public bool isFull() {
            return queue.Count == maxSize;
        }

        public bool isEmpty() {
            return queue.Count == 0;
        }

        public string toString() {
            string str = "";
            foreach (int item in queue) {
                str += item + ", ";
            }
            return str;
        }

    }

    public static int BUF_SIZE = 10;
    public static Queue queue = new Queue(BUF_SIZE);

    public static void producerRun() {
        Random r = new Random();
        while (true) {
            if (!queue.isFull()) {
                int item = r.Next(0, 10);
                Console.WriteLine("Produced: " + item + " - " + queue.toString());
                queue.put(item);
                Thread.Sleep(1);
            }
        }
    }

    public static void consumerRun() {
        while (true) {
            if (!queue.isEmpty()) {
                int item = queue.get();
                Console.WriteLine("Consumed: " + item + " - " + queue.toString());
                Thread.Sleep(1);
            }
        }
    }

    public static void Main() {

        List<Thread> threads = new List<Thread>();
        // start ten producer threads
        for (int i = 0; i < 10; i++) {
            Thread t = new Thread(producerRun);
            t.Start();
            threads.Add(t);
        }

        // start consumer thread
        Thread consumer1 = new Thread(new ThreadStart(consumerRun));
        consumer1.Start();

        // Wait for threads to finish.
        foreach (Thread t in threads) {
            t.Join();
        }
        consumer1.Join();
    }
}

/*

# Questions: is it possible that consumer and producers threads

# end up in a deadlock state, namely they both wait for each other to finish,

# but none of them is doing anything?

# Answer: yes, because the producer thread is blocked waiting for the consumer

# to finish, and the consumer thread is blocked waiting for the producer to

# finish.

*/
<|endoftext|>
Time taken to predict multithread_Q1.cs: 3.8700313568115234 seconds
Saving attention matrix for multithread_Q1.cs
Time taken to store attention matrix multithread_Q1.cs: 667.9243183135986 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/*# ***********************************************************************************************

# In the Consumer-Producer problem, two threads types, called producers and

# consumers, share the same memory buffer that is of fixed-size.

# The producers add data to the buffer, whereas the consumers remove data.

*/

using System;
using System.Threading;


public class ProducerConsumer {

    public class Queue {
        private List<int> queue;
        private int maxSize;

        public Queue(int maxSize) {
            this.maxSize = maxSize;
            queue = new List<int>();
        }

        public void put(int item) {
            if (queue.Count == maxSize) {
                throw new Exception("Queue is full");
            }
            queue.Add(item);
        }

        public int get() {
            if (queue.Count == 0) {
                throw new Exception("Queue is empty");
            }
            int item = queue[0];
            queue.RemoveAt(0);
            return item;
        }

        public bool isFull() {
            return queue.Count == maxSize;
        }

        public bool isEmpty() {
            return queue.Count == 0;
        }

        public string toString() {
            string str = "";
            foreach (int item in queue) {
                str += item + ", ";
            }
            return str;
        }

    }

    public static int BUF_SIZE = 10;
    public static Queue queue = new Queue(BUF_SIZE);

    public static void producerRun() {
        Random r = new Random();
        while (true) {
            if (!queue.isFull()) {
                int item = r.Next(0, 10);
                Console.WriteLine("Produced: " + item + " - " + queue.toString());
                queue.put(item);
                Thread.Sleep(1);
            }
        }
    }

    public static void consumerRun() {
        while (true) {
            if (!queue.isEmpty()) {
                int item = queue.get();
                Console.WriteLine("Consumed: " + item + " - " + queue.toString());
                Thread.Sleep(1);
            }
        }
    }

    public static void Main() {

        List<Thread> threads = new List<Thread>();
        // start ten producer threads
        for (int i = 0; i < 10; i++) {
            Thread t = new Thread(producerRun);
            t.Start();
            threads.Add(t);
        }

        // start consumer thread
        Thread consumer1 = new Thread(new ThreadStart(consumerRun));
        consumer1.Start();

        // Wait for threads to finish.
        foreach (Thread t in threads) {
            t.Join();
        }
        consumer1.Join();
    }
}

/*

# Questions: is it possible that consumer and producers threads

# end up in a deadlock state, namely they both wait for each other to finish,

# but none of them is doing anything?

# Answer: yes, it is possible, but it is not easy to detect.

# The solution is to use a lock object, which is a special object that

# can be used to synchronize two threads.

# The lock object is a singleton, so it is possible to use the same lock object

# to synchronize multiple threads.

# The lock object is a singleton, so it is possible to use the same lock object

# to synchron
Time taken to predict multithread_Q1.cs: 8.51732611656189 seconds
Saving attention matrix for multithread_Q1.cs
Time taken to store attention matrix multithread_Q1.cs: 810.0953118801117 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/*# ***********************************************************************************************

# In the Consumer-Producer problem, two threads types, called producers and

# consumers, share the same memory buffer that is of fixed-size.

# The producers add data to the buffer, whereas the consumers remove data.

*/

using System;
using System.Threading;


public class ProducerConsumer {

    public class Queue {
        private List<int> queue;
        private int maxSize;

        public Queue(int maxSize) {
            this.maxSize = maxSize;
            queue = new List<int>();
        }

        public void put(int item) {
            if (queue.Count == maxSize) {
                throw new Exception("Queue is full");
            }
            queue.Add(item);
        }

        public int get() {
            if (queue.Count == 0) {
                throw new Exception("Queue is empty");
            }
            int item = queue[0];
            queue.RemoveAt(0);
            return item;
        }

        public bool isFull() {
            return queue.Count == maxSize;
        }

        public bool isEmpty() {
            return queue.Count == 0;
        }

        public string toString() {
            string str = "";
            foreach (int item in queue) {
                str += item + ", ";
            }
            return str;
        }

    }

    public static int BUF_SIZE = 10;
    public static Queue queue = new Queue(BUF_SIZE);

    public static void producerRun() {
        Random r = new Random();
        while (true) {
            if (!queue.isFull()) {
                int item = r.Next(0, 10);
                Console.WriteLine("Produced: " + item + " - " + queue.toString());
                queue.put(item);
                Thread.Sleep(1);
            }
        }
    }

    public static void consumerRun() {
        while (true) {
            if (!queue.isEmpty()) {
                int item = queue.get();
                Console.WriteLine("Consumed: " + item + " - " + queue.toString());
                Thread.Sleep(1);
            }
        }
    }

    public static void Main() {

        List<Thread> threads = new List<Thread>();
        // start ten producer threads
        for (int i = 0; i < 10; i++) {
            Thread t = new Thread(producerRun);
            t.Start();
            threads.Add(t);
        }

        // start consumer thread
        Thread consumer1 = new Thread(new ThreadStart(consumerRun));
        consumer1.Start();

        // Wait for threads to finish.
        foreach (Thread t in threads) {
            t.Join();
        }
        consumer1.Join();
    }
}

/*

# Questions: is it possible that consumer and producers threads

# end up in a deadlock state, namely they both wait for each other to finish,

# but none of them is doing anything?

# Answer: yes, it is possible, but it is not a deadlock.

# The consumer thread is waiting for the producer thread to finish, but

# the producer thread is waiting for the consumer thread to finish, but

# the consumer thread is waiting for the producer thread to finish, but

# the producer thread is waiting for the consumer thread to finish, but

# the consumer thread is waiting for the producer thread to finish, but

# the producer thread
Time taken to predict multithread_Q1.cs: 8.483437538146973 seconds
Saving attention matrix for multithread_Q1.cs
Time taken to store attention matrix multithread_Q1.cs: 594.2869093418121 seconds
  7%|███████▎                                                                                          | 2/27 [1:12:44<15:09:12, 2182.10s/it]Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
# ***********************************************************************************************

# In the Consumer-Producer problem, two threads types, called producers and

# consumers, share the same memory buffer that is of fixed-size.

# The producers add data to the buffer, whereas the consumers removes data.


import threading
import time
import random
import logging


logging.basicConfig(level=logging.DEBUG,
                    format='(%(threadName)-9s) %(message)s',)


class Queue(object):

    def __init__(self, max_size: int):
        self.max_size = max_size
        self.q = []

    def put(self, item):
        if len(self.q) == self.max_size:
            raise Exception('Queue is full')
        self.q.append(item)

    def get(self):
        if len(self.q) == 0:
            raise Exception('Queue is empty')
        return self.q.pop(0)

    def is_full(self):
        return len(self.q) == self.max_size

    def is_empty(self):
        return len(self.q) == 0

    def __repr__(self):
        return str(self.q)


BUF_SIZE = 10
q = Queue(max_size=BUF_SIZE)


class ProducerThread(threading.Thread):
    def __init__(self, group=None, target=None, name=None,
                 args=(), kwargs=None, verbose=None):
        super(ProducerThread, self).__init__()
        self.target = target
        self.name = name

    def run(self):
        global q
        while True:
            if not q.is_full():
                item = random.randint(1, 10)
                q.put(item)
                logging.debug('Putting'+ str(item)
                              +': items in queue'+ str(q))
                time.sleep(random.random() / 1000)
        return


class ConsumerThread(threading.Thread):
    def __init__(self, group=None, target=None, name=None,
                 args=(), kwargs=None, verbose=None):
        super(ConsumerThread, self).__init__()
        self.target = target
        self.name = name
        return

    def run(self):
        global q
        while True:
            if not q.is_empty():
                item = q.get()
                logging.debug('Getting'+ str(item)
                              +': items in queue'+ str(q))
                time.sleep(random.random() / 1000)
        return


if __name__ == '__main__':

    for i in range(10):
        px = ProducerThread(name='producer-' + str(i))
        px.start()
    time.sleep(2)

    c = ConsumerThread(name='consumer')
    c.start()
    time.sleep(2)


# Questions: is it possible that consumer and producers threads

# end up in a deadlock state, namely they both wait for each other to finish,

# but none of them is doing anything?

# Answer: yes, because the producer thread is not doing anything,

# while the consumer thread is doing something.

# ***********************************************************************************************
<|endoftext|>
Time taken to predict multithread_Q1.py: 3.350649833679199 seconds
Saving attention matrix for multithread_Q1.py
Time taken to store attention matrix multithread_Q1.py: 406.9679796695709 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
# ***********************************************************************************************

# In the Consumer-Producer problem, two threads types, called producers and

# consumers, share the same memory buffer that is of fixed-size.

# The producers add data to the buffer, whereas the consumers removes data.


import threading
import time
import random
import logging


logging.basicConfig(level=logging.DEBUG,
                    format='(%(threadName)-9s) %(message)s',)


class Queue(object):

    def __init__(self, max_size: int):
        self.max_size = max_size
        self.q = []

    def put(self, item):
        if len(self.q) == self.max_size:
            raise Exception('Queue is full')
        self.q.append(item)

    def get(self):
        if len(self.q) == 0:
            raise Exception('Queue is empty')
        return self.q.pop(0)

    def is_full(self):
        return len(self.q) == self.max_size

    def is_empty(self):
        return len(self.q) == 0

    def __repr__(self):
        return str(self.q)


BUF_SIZE = 10
q = Queue(max_size=BUF_SIZE)


class ProducerThread(threading.Thread):
    def __init__(self, group=None, target=None, name=None,
                 args=(), kwargs=None, verbose=None):
        super(ProducerThread, self).__init__()
        self.target = target
        self.name = name

    def run(self):
        global q
        while True:
            if not q.is_full():
                item = random.randint(1, 10)
                q.put(item)
                logging.debug('Putting'+ str(item)
                              +': items in queue'+ str(q))
                time.sleep(random.random() / 1000)
        return


class ConsumerThread(threading.Thread):
    def __init__(self, group=None, target=None, name=None,
                 args=(), kwargs=None, verbose=None):
        super(ConsumerThread, self).__init__()
        self.target = target
        self.name = name
        return

    def run(self):
        global q
        while True:
            if not q.is_empty():
                item = q.get()
                logging.debug('Getting'+ str(item)
                              +': items in queue'+ str(q))
                time.sleep(random.random() / 1000)
        return


if __name__ == '__main__':

    for i in range(10):
        px = ProducerThread(name='producer-' + str(i))
        px.start()
    time.sleep(2)

    c = ConsumerThread(name='consumer')
    c.start()
    time.sleep(2)


# Questions: is it possible that consumer and producers threads

# end up in a deadlock state, namely they both wait for each other to finish,

# but none of them is doing anything?

# Answer: yes, it is possible, but it is not easy to detect.

# The solution is to use a lock to synchronize threads.

# The lock can be acquired by the thread that is trying to acquire it,

# and released by the thread that releases it.

# The lock is acquired by the thread that is trying to acquire it,

# and released by the thread that releases it.

# The lock is acquired by the thread that is
Time taken to predict multithread_Q1.py: 8.56463885307312 seconds
Saving attention matrix for multithread_Q1.py
Time taken to store attention matrix multithread_Q1.py: 474.8925004005432 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
# ***********************************************************************************************

# In the Consumer-Producer problem, two threads types, called producers and

# consumers, share the same memory buffer that is of fixed-size.

# The producers add data to the buffer, whereas the consumers removes data.


import threading
import time
import random
import logging


logging.basicConfig(level=logging.DEBUG,
                    format='(%(threadName)-9s) %(message)s',)


class Queue(object):

    def __init__(self, max_size: int):
        self.max_size = max_size
        self.q = []

    def put(self, item):
        if len(self.q) == self.max_size:
            raise Exception('Queue is full')
        self.q.append(item)

    def get(self):
        if len(self.q) == 0:
            raise Exception('Queue is empty')
        return self.q.pop(0)

    def is_full(self):
        return len(self.q) == self.max_size

    def is_empty(self):
        return len(self.q) == 0

    def __repr__(self):
        return str(self.q)


BUF_SIZE = 10
q = Queue(max_size=BUF_SIZE)


class ProducerThread(threading.Thread):
    def __init__(self, group=None, target=None, name=None,
                 args=(), kwargs=None, verbose=None):
        super(ProducerThread, self).__init__()
        self.target = target
        self.name = name

    def run(self):
        global q
        while True:
            if not q.is_full():
                item = random.randint(1, 10)
                q.put(item)
                logging.debug('Putting'+ str(item)
                              +': items in queue'+ str(q))
                time.sleep(random.random() / 1000)
        return


class ConsumerThread(threading.Thread):
    def __init__(self, group=None, target=None, name=None,
                 args=(), kwargs=None, verbose=None):
        super(ConsumerThread, self).__init__()
        self.target = target
        self.name = name
        return

    def run(self):
        global q
        while True:
            if not q.is_empty():
                item = q.get()
                logging.debug('Getting'+ str(item)
                              +': items in queue'+ str(q))
                time.sleep(random.random() / 1000)
        return


if __name__ == '__main__':

    for i in range(10):
        px = ProducerThread(name='producer-' + str(i))
        px.start()
    time.sleep(2)

    c = ConsumerThread(name='consumer')
    c.start()
    time.sleep(2)


# Questions: is it possible that consumer and producers threads

# end up in a deadlock state, namely they both wait for each other to finish,

# but none of them is doing anything?

# Answer: yes, it is possible, but it is not a deadlock.

# The producer thread is waiting for the consumer thread to finish,

# but the consumer thread is waiting for the producer thread to finish,

# but the producer thread is waiting for the consumer thread to finish,

# and so on.

# The producer thread is waiting for the consumer thread to finish,

# but the consumer thread is waiting for the producer thread to finish,

Time taken to predict multithread_Q1.py: 8.585107326507568 seconds
Saving attention matrix for multithread_Q1.py
Time taken to store attention matrix multithread_Q1.py: 506.57053995132446 seconds
 11%|██████████▉                                                                                       | 3/27 [1:37:38<12:27:06, 1867.76s/it]Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/*# ***********************************************************************************************

# In the Consumer-Producer problem, two threads types, called producers and

# consumers, share the same memory buffer that is of fixed-size.

# The producers add data to the buffer, whereas the consumers remove data.

*/

#include <bits/stdc++.h>
#include <thread>
using namespace std;

class Queue {
    int maxSize;
    vector<int> q;

    public:
    Queue(int maxSize) {
        this->maxSize = maxSize;
    }
    void put(int item) {
        if (q.size() == maxSize) {
            cout << "Queue is full" << endl;
            throw runtime_error("Queue is full");
        }
        q.push_back(item);
    }
    int get() {
        if (q.size() == 0) {
            cout << "Queue is empty" << endl;
            throw runtime_error("Queue is empty");
        }
        int item = q[0];
        q.erase(q.begin());
        return item;
    }
    bool isFull() {
        return q.size() == maxSize;
    }
    bool isEmpty() {
        return q.size() == 0;
    }
    string toString() {
        stringstream ss;
        for (int i = 0; i < q.size(); i++) {
            ss << q[i] << " ";
        }
        return ss.str();
    }
};

int BUF_SIZE = 10;
Queue myQueue(BUF_SIZE);

void producerRun() {
    while (true) {
        if (!myQueue.isFull()) {
            int item = rand() % 10;
            myQueue.put(item);
            std::thread::id currentThreadId = std::this_thread::get_id();
            cout << "Produced (" << currentThreadId  << "): " << item <<
                    " - " << myQueue.toString() << endl;
            this_thread::sleep_for(chrono::microseconds(1));
        }
    }
}


void consumerRun() {
    while (true) {
        if (!myQueue.isEmpty()) {
            int item = myQueue.get();
            std::thread::id currentThreadId = std::this_thread::get_id();
            cout << "Consumed (" << currentThreadId  << "): " << item <<
                    " - " << myQueue.toString() << endl;
            this_thread::sleep_for(chrono::microseconds(1));
        }
    }
}



int main(int argc, char const *argv[])
{
  std::cout << "Hello Docker container!" << std::endl;
    std::thread producerThreads[10];
    for (int i = 0; i < 10; i++) {
        producerThreads[i] = std::thread(producerRun);
    }

    thread consumer(consumerRun);

    for (int i = 0; i < 10; i++) {
        producerThreads[i].join();
    }
    consumer.join();

  return 0;
}

/*
# Questions: is there any line of code in the consumer or producer code which

# will never be executed? If yes, report it below.

# Answer: the code in the consumer and producer is never executed.

# Questions: is there any line of code in the consumer or producer code which

# will never be executed? If yes, report it below.

# Answer: the code in the consumer and producer is never executed.

# Questions: is there any line of code in the consumer or producer code which

# will never be executed? If yes, report it below.

# Answer: the code
Time taken to predict multithread_Q2.cpp: 8.650751829147339 seconds
Saving attention matrix for multithread_Q2.cpp
Time taken to store attention matrix multithread_Q2.cpp: 503.155442237854 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/*# ***********************************************************************************************

# In the Consumer-Producer problem, two threads types, called producers and

# consumers, share the same memory buffer that is of fixed-size.

# The producers add data to the buffer, whereas the consumers remove data.

*/

#include <bits/stdc++.h>
#include <thread>
using namespace std;

class Queue {
    int maxSize;
    vector<int> q;

    public:
    Queue(int maxSize) {
        this->maxSize = maxSize;
    }
    void put(int item) {
        if (q.size() == maxSize) {
            cout << "Queue is full" << endl;
            throw runtime_error("Queue is full");
        }
        q.push_back(item);
    }
    int get() {
        if (q.size() == 0) {
            cout << "Queue is empty" << endl;
            throw runtime_error("Queue is empty");
        }
        int item = q[0];
        q.erase(q.begin());
        return item;
    }
    bool isFull() {
        return q.size() == maxSize;
    }
    bool isEmpty() {
        return q.size() == 0;
    }
    string toString() {
        stringstream ss;
        for (int i = 0; i < q.size(); i++) {
            ss << q[i] << " ";
        }
        return ss.str();
    }
};

int BUF_SIZE = 10;
Queue myQueue(BUF_SIZE);

void producerRun() {
    while (true) {
        if (!myQueue.isFull()) {
            int item = rand() % 10;
            myQueue.put(item);
            std::thread::id currentThreadId = std::this_thread::get_id();
            cout << "Produced (" << currentThreadId  << "): " << item <<
                    " - " << myQueue.toString() << endl;
            this_thread::sleep_for(chrono::microseconds(1));
        }
    }
}


void consumerRun() {
    while (true) {
        if (!myQueue.isEmpty()) {
            int item = myQueue.get();
            std::thread::id currentThreadId = std::this_thread::get_id();
            cout << "Consumed (" << currentThreadId  << "): " << item <<
                    " - " << myQueue.toString() << endl;
            this_thread::sleep_for(chrono::microseconds(1));
        }
    }
}



int main(int argc, char const *argv[])
{
  std::cout << "Hello Docker container!" << std::endl;
    std::thread producerThreads[10];
    for (int i = 0; i < 10; i++) {
        producerThreads[i] = std::thread(producerRun);
    }

    thread consumer(consumerRun);

    for (int i = 0; i < 10; i++) {
        producerThreads[i].join();
    }
    consumer.join();

  return 0;
}

/*
# Questions: is there any line of code in the consumer or producer code which

# will never be executed? If yes, report it below.

# Answer: the code in the consumer thread will never be executed.

# Questions: is there any line of code in the producer code which will never be

# executed? If yes, report it below.

# Answer: the code in the producer thread will never be executed.

*/
<|endoftext|>
Time taken to predict multithread_Q2.cpp: 5.7640509605407715 seconds
Saving attention matrix for multithread_Q2.cpp
Time taken to store attention matrix multithread_Q2.cpp: 483.2867684364319 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/*# ***********************************************************************************************

# In the Consumer-Producer problem, two threads types, called producers and

# consumers, share the same memory buffer that is of fixed-size.

# The producers add data to the buffer, whereas the consumers remove data.

*/

#include <bits/stdc++.h>
#include <thread>
using namespace std;

class Queue {
    int maxSize;
    vector<int> q;

    public:
    Queue(int maxSize) {
        this->maxSize = maxSize;
    }
    void put(int item) {
        if (q.size() == maxSize) {
            cout << "Queue is full" << endl;
            throw runtime_error("Queue is full");
        }
        q.push_back(item);
    }
    int get() {
        if (q.size() == 0) {
            cout << "Queue is empty" << endl;
            throw runtime_error("Queue is empty");
        }
        int item = q[0];
        q.erase(q.begin());
        return item;
    }
    bool isFull() {
        return q.size() == maxSize;
    }
    bool isEmpty() {
        return q.size() == 0;
    }
    string toString() {
        stringstream ss;
        for (int i = 0; i < q.size(); i++) {
            ss << q[i] << " ";
        }
        return ss.str();
    }
};

int BUF_SIZE = 10;
Queue myQueue(BUF_SIZE);

void producerRun() {
    while (true) {
        if (!myQueue.isFull()) {
            int item = rand() % 10;
            myQueue.put(item);
            std::thread::id currentThreadId = std::this_thread::get_id();
            cout << "Produced (" << currentThreadId  << "): " << item <<
                    " - " << myQueue.toString() << endl;
            this_thread::sleep_for(chrono::microseconds(1));
        }
    }
}


void consumerRun() {
    while (true) {
        if (!myQueue.isEmpty()) {
            int item = myQueue.get();
            std::thread::id currentThreadId = std::this_thread::get_id();
            cout << "Consumed (" << currentThreadId  << "): " << item <<
                    " - " << myQueue.toString() << endl;
            this_thread::sleep_for(chrono::microseconds(1));
        }
    }
}



int main(int argc, char const *argv[])
{
  std::cout << "Hello Docker container!" << std::endl;
    std::thread producerThreads[10];
    for (int i = 0; i < 10; i++) {
        producerThreads[i] = std::thread(producerRun);
    }

    thread consumer(consumerRun);

    for (int i = 0; i < 10; i++) {
        producerThreads[i].join();
    }
    consumer.join();

  return 0;
}

/*
# Questions: is there any line of code in the consumer or producer code which

# will never be executed? If yes, report it below.

# Answer: the code in the consumer and producer is never executed because the

# producer and consumer are using the same memory buffer.

# In the producer code, the code is never executed because the producer is

# using the same memory buffer.

# In the consumer code, the code is never executed because the consumer is

# using the same memory buffer.

*/
<|endoftext|>
Time taken to predict multithread_Q2.cpp: 7.253321409225464 seconds
Saving attention matrix for multithread_Q2.cpp
Time taken to store attention matrix multithread_Q2.cpp: 486.0013704299927 seconds
 15%|██████████████▌                                                                                   | 4/27 [2:04:01<11:12:52, 1755.31s/it]Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/*# ***********************************************************************************************

# In the Consumer-Producer problem, two threads types, called producers and

# consumers, share the same memory buffer that is of fixed-size.

# The producers add data to the buffer, whereas the consumers remove data.

*/

using System;
using System.Threading;


public class ProducerConsumer {

    public class Queue {
        private List<int> queue;
        private int maxSize;

        public Queue(int maxSize) {
            this.maxSize = maxSize;
            queue = new List<int>();
        }

        public void put(int item) {
            if (queue.Count == maxSize) {
                throw new Exception("Queue is full");
            }
            queue.Add(item);
        }

        public int get() {
            if (queue.Count == 0) {
                throw new Exception("Queue is empty");
            }
            int item = queue[0];
            queue.RemoveAt(0);
            return item;
        }

        public bool isFull() {
            return queue.Count == maxSize;
        }

        public bool isEmpty() {
            return queue.Count == 0;
        }

        public string toString() {
            string str = "";
            foreach (int item in queue) {
                str += item + ", ";
            }
            return str;
        }

    }

    public static int BUF_SIZE = 10;
    public static Queue queue = new Queue(BUF_SIZE);

    public static void producerRun() {
        Random r = new Random();
        while (true) {
            if (!queue.isFull()) {
                int item = r.Next(0, 10);
                Console.WriteLine("Produced: " + item + " - " + queue.toString());
                queue.put(item);
                Thread.Sleep(1);
            }
        }
    }

    public static void consumerRun() {
        while (true) {
            if (!queue.isEmpty()) {
                int item = queue.get();
                Console.WriteLine("Consumed: " + item + " - " + queue.toString());
                Thread.Sleep(1);
            }
        }
    }

    public static void Main() {

        List<Thread> threads = new List<Thread>();
        // start ten producer threads
        for (int i = 0; i < 10; i++) {
            Thread t = new Thread(producerRun);
            t.Start();
            threads.Add(t);
        }

        // start consumer thread
        Thread consumer1 = new Thread(new ThreadStart(consumerRun));
        consumer1.Start();

        // Wait for threads to finish.
        foreach (Thread t in threads) {
            t.Join();
        }
        consumer1.Join();
    }
}

/*# Questions: is there any line of code in the consumer or producer code which

# will never be executed? If yes, report it below.

# Answer: the code in the consumer is never executed.

# ***********************************************************************************************

# ***********************************************************************************************

# ***********************************************************************************************

# ***********************************************************************************************

# ***********************************************************************************************

# ***********************************************************************************************

# ***********************************************************************************************

# ***********************************************************************************************

# ***********************************************************************************************

# ***********************************************************************************************

# ***********************************************************************************************

#
Time taken to predict multithread_Q2.cs: 8.551594495773315 seconds
Saving attention matrix for multithread_Q2.cs
Time taken to store attention matrix multithread_Q2.cs: 539.3533642292023 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/*# ***********************************************************************************************

# In the Consumer-Producer problem, two threads types, called producers and

# consumers, share the same memory buffer that is of fixed-size.

# The producers add data to the buffer, whereas the consumers remove data.

*/

using System;
using System.Threading;


public class ProducerConsumer {

    public class Queue {
        private List<int> queue;
        private int maxSize;

        public Queue(int maxSize) {
            this.maxSize = maxSize;
            queue = new List<int>();
        }

        public void put(int item) {
            if (queue.Count == maxSize) {
                throw new Exception("Queue is full");
            }
            queue.Add(item);
        }

        public int get() {
            if (queue.Count == 0) {
                throw new Exception("Queue is empty");
            }
            int item = queue[0];
            queue.RemoveAt(0);
            return item;
        }

        public bool isFull() {
            return queue.Count == maxSize;
        }

        public bool isEmpty() {
            return queue.Count == 0;
        }

        public string toString() {
            string str = "";
            foreach (int item in queue) {
                str += item + ", ";
            }
            return str;
        }

    }

    public static int BUF_SIZE = 10;
    public static Queue queue = new Queue(BUF_SIZE);

    public static void producerRun() {
        Random r = new Random();
        while (true) {
            if (!queue.isFull()) {
                int item = r.Next(0, 10);
                Console.WriteLine("Produced: " + item + " - " + queue.toString());
                queue.put(item);
                Thread.Sleep(1);
            }
        }
    }

    public static void consumerRun() {
        while (true) {
            if (!queue.isEmpty()) {
                int item = queue.get();
                Console.WriteLine("Consumed: " + item + " - " + queue.toString());
                Thread.Sleep(1);
            }
        }
    }

    public static void Main() {

        List<Thread> threads = new List<Thread>();
        // start ten producer threads
        for (int i = 0; i < 10; i++) {
            Thread t = new Thread(producerRun);
            t.Start();
            threads.Add(t);
        }

        // start consumer thread
        Thread consumer1 = new Thread(new ThreadStart(consumerRun));
        consumer1.Start();

        // Wait for threads to finish.
        foreach (Thread t in threads) {
            t.Join();
        }
        consumer1.Join();
    }
}

/*# Questions: is there any line of code in the consumer or producer code which

# will never be executed? If yes, report it below.

# Answer: There is no code in the consumer or producer which will never be executed.

# ***********************************************************************************************

# ***********************************************************************************************

# ***********************************************************************************************

# ***********************************************************************************************

# ***********************************************************************************************

# ***********************************************************************************************

# ***********************************************************************************************

# ***********************************************************************************************

# ***********************************************************************************************

# ***********************************************************************************************

# ****************************************************************
Time taken to predict multithread_Q2.cs: 8.486884355545044 seconds
Saving attention matrix for multithread_Q2.cs
Time taken to store attention matrix multithread_Q2.cs: 785.0362453460693 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/*# ***********************************************************************************************

# In the Consumer-Producer problem, two threads types, called producers and

# consumers, share the same memory buffer that is of fixed-size.

# The producers add data to the buffer, whereas the consumers remove data.

*/

using System;
using System.Threading;


public class ProducerConsumer {

    public class Queue {
        private List<int> queue;
        private int maxSize;

        public Queue(int maxSize) {
            this.maxSize = maxSize;
            queue = new List<int>();
        }

        public void put(int item) {
            if (queue.Count == maxSize) {
                throw new Exception("Queue is full");
            }
            queue.Add(item);
        }

        public int get() {
            if (queue.Count == 0) {
                throw new Exception("Queue is empty");
            }
            int item = queue[0];
            queue.RemoveAt(0);
            return item;
        }

        public bool isFull() {
            return queue.Count == maxSize;
        }

        public bool isEmpty() {
            return queue.Count == 0;
        }

        public string toString() {
            string str = "";
            foreach (int item in queue) {
                str += item + ", ";
            }
            return str;
        }

    }

    public static int BUF_SIZE = 10;
    public static Queue queue = new Queue(BUF_SIZE);

    public static void producerRun() {
        Random r = new Random();
        while (true) {
            if (!queue.isFull()) {
                int item = r.Next(0, 10);
                Console.WriteLine("Produced: " + item + " - " + queue.toString());
                queue.put(item);
                Thread.Sleep(1);
            }
        }
    }

    public static void consumerRun() {
        while (true) {
            if (!queue.isEmpty()) {
                int item = queue.get();
                Console.WriteLine("Consumed: " + item + " - " + queue.toString());
                Thread.Sleep(1);
            }
        }
    }

    public static void Main() {

        List<Thread> threads = new List<Thread>();
        // start ten producer threads
        for (int i = 0; i < 10; i++) {
            Thread t = new Thread(producerRun);
            t.Start();
            threads.Add(t);
        }

        // start consumer thread
        Thread consumer1 = new Thread(new ThreadStart(consumerRun));
        consumer1.Start();

        // Wait for threads to finish.
        foreach (Thread t in threads) {
            t.Join();
        }
        consumer1.Join();
    }
}

/*# Questions: is there any line of code in the consumer or producer code which

# will never be executed? If yes, report it below.

# Answer: the code in the consumer and producer is never executed because the

# consumer thread is never started.

# ***********************************************************************************************

# ***********************************************************************************************

# ***********************************************************************************************

# ***********************************************************************************************

# ***********************************************************************************************

# ***********************************************************************************************

# ***********************************************************************************************

# ***********************************************************************************************

# ***********************************************************************************************

# ********************************************************************************************
Time taken to predict multithread_Q2.cs: 8.557682037353516 seconds
Saving attention matrix for multithread_Q2.cs
Time taken to store attention matrix multithread_Q2.cs: 741.4252192974091 seconds
 19%|██████████████████▏                                                                               | 5/27 [2:40:27<11:40:32, 1910.57s/it]Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
# ***********************************************************************************************

# In the Consumer-Producer problem, two threads types, called producers and

# consumers, share the same memory buffer that is of fixed-size.

# The producers add data to the buffer, whereas the consumers removes data.


import threading
import time
import random
import logging


logging.basicConfig(level=logging.DEBUG,
                    format='(%(threadName)-9s) %(message)s',)


class Queue(object):

    def __init__(self, max_size: int):
        self.max_size = max_size
        self.q = []

    def put(self, item):
        if len(self.q) == self.max_size:
            raise Exception('Queue is full')
        self.q.append(item)

    def get(self):
        if len(self.q) == 0:
            raise Exception('Queue is empty')
        return self.q.pop(0)

    def is_full(self):
        return len(self.q) == self.max_size

    def is_empty(self):
        return len(self.q) == 0

    def __repr__(self):
        return str(self.q)


BUF_SIZE = 10
q = Queue(max_size=BUF_SIZE)


class ProducerThread(threading.Thread):
    def __init__(self, group=None, target=None, name=None,
                 args=(), kwargs=None, verbose=None):
        super(ProducerThread, self).__init__()
        self.target = target
        self.name = name

    def run(self):
        global q
        while True:
            if not q.is_full():
                item = random.randint(1, 10)
                q.put(item)
                logging.debug('Putting'+ str(item)
                              +': items in queue'+ str(q))
                time.sleep(random.random() / 1000)
        return


class ConsumerThread(threading.Thread):
    def __init__(self, group=None, target=None, name=None,
                 args=(), kwargs=None, verbose=None):
        super(ConsumerThread, self).__init__()
        self.target = target
        self.name = name
        return

    def run(self):
        global q
        while True:
            if not q.is_empty():
                item = q.get()
                logging.debug('Getting'+ str(item)
                              +': items in queue'+ str(q))
                time.sleep(random.random() / 1000)
        return


if __name__ == '__main__':

    for i in range(10):
        px = ProducerThread(name='producer-' + str(i))
        px.start()
    time.sleep(2)

    c = ConsumerThread(name='consumer')
    c.start()
    time.sleep(2)


# Questions: is there any line of code in the consumer or producer code which

# will never be executed? If yes, report it below.

# Answer:

# The code in the consumer thread is never executed.

# The code in the producer thread is never executed.
<|endoftext|>
Time taken to predict multithread_Q2.py: 3.0508410930633545 seconds
Saving attention matrix for multithread_Q2.py
Time taken to store attention matrix multithread_Q2.py: 654.4504771232605 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
# ***********************************************************************************************

# In the Consumer-Producer problem, two threads types, called producers and

# consumers, share the same memory buffer that is of fixed-size.

# The producers add data to the buffer, whereas the consumers removes data.


import threading
import time
import random
import logging


logging.basicConfig(level=logging.DEBUG,
                    format='(%(threadName)-9s) %(message)s',)


class Queue(object):

    def __init__(self, max_size: int):
        self.max_size = max_size
        self.q = []

    def put(self, item):
        if len(self.q) == self.max_size:
            raise Exception('Queue is full')
        self.q.append(item)

    def get(self):
        if len(self.q) == 0:
            raise Exception('Queue is empty')
        return self.q.pop(0)

    def is_full(self):
        return len(self.q) == self.max_size

    def is_empty(self):
        return len(self.q) == 0

    def __repr__(self):
        return str(self.q)


BUF_SIZE = 10
q = Queue(max_size=BUF_SIZE)


class ProducerThread(threading.Thread):
    def __init__(self, group=None, target=None, name=None,
                 args=(), kwargs=None, verbose=None):
        super(ProducerThread, self).__init__()
        self.target = target
        self.name = name

    def run(self):
        global q
        while True:
            if not q.is_full():
                item = random.randint(1, 10)
                q.put(item)
                logging.debug('Putting'+ str(item)
                              +': items in queue'+ str(q))
                time.sleep(random.random() / 1000)
        return


class ConsumerThread(threading.Thread):
    def __init__(self, group=None, target=None, name=None,
                 args=(), kwargs=None, verbose=None):
        super(ConsumerThread, self).__init__()
        self.target = target
        self.name = name
        return

    def run(self):
        global q
        while True:
            if not q.is_empty():
                item = q.get()
                logging.debug('Getting'+ str(item)
                              +': items in queue'+ str(q))
                time.sleep(random.random() / 1000)
        return


if __name__ == '__main__':

    for i in range(10):
        px = ProducerThread(name='producer-' + str(i))
        px.start()
    time.sleep(2)

    c = ConsumerThread(name='consumer')
    c.start()
    time.sleep(2)


# Questions: is there any line of code in the consumer or producer code which

# will never be executed? If yes, report it below.

# Answer:

# The code in the consumer thread will never be executed because the producer

# thread will never put an item into the queue.

# The code in the producer thread will never be executed because the consumer

# thread will never remove an item from the queue.
<|endoftext|>
Time taken to predict multithread_Q2.py: 5.442031621932983 seconds
Saving attention matrix for multithread_Q2.py
Time taken to store attention matrix multithread_Q2.py: 499.83614444732666 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
# ***********************************************************************************************

# In the Consumer-Producer problem, two threads types, called producers and

# consumers, share the same memory buffer that is of fixed-size.

# The producers add data to the buffer, whereas the consumers removes data.


import threading
import time
import random
import logging


logging.basicConfig(level=logging.DEBUG,
                    format='(%(threadName)-9s) %(message)s',)


class Queue(object):

    def __init__(self, max_size: int):
        self.max_size = max_size
        self.q = []

    def put(self, item):
        if len(self.q) == self.max_size:
            raise Exception('Queue is full')
        self.q.append(item)

    def get(self):
        if len(self.q) == 0:
            raise Exception('Queue is empty')
        return self.q.pop(0)

    def is_full(self):
        return len(self.q) == self.max_size

    def is_empty(self):
        return len(self.q) == 0

    def __repr__(self):
        return str(self.q)


BUF_SIZE = 10
q = Queue(max_size=BUF_SIZE)


class ProducerThread(threading.Thread):
    def __init__(self, group=None, target=None, name=None,
                 args=(), kwargs=None, verbose=None):
        super(ProducerThread, self).__init__()
        self.target = target
        self.name = name

    def run(self):
        global q
        while True:
            if not q.is_full():
                item = random.randint(1, 10)
                q.put(item)
                logging.debug('Putting'+ str(item)
                              +': items in queue'+ str(q))
                time.sleep(random.random() / 1000)
        return


class ConsumerThread(threading.Thread):
    def __init__(self, group=None, target=None, name=None,
                 args=(), kwargs=None, verbose=None):
        super(ConsumerThread, self).__init__()
        self.target = target
        self.name = name
        return

    def run(self):
        global q
        while True:
            if not q.is_empty():
                item = q.get()
                logging.debug('Getting'+ str(item)
                              +': items in queue'+ str(q))
                time.sleep(random.random() / 1000)
        return


if __name__ == '__main__':

    for i in range(10):
        px = ProducerThread(name='producer-' + str(i))
        px.start()
    time.sleep(2)

    c = ConsumerThread(name='consumer')
    c.start()
    time.sleep(2)


# Questions: is there any line of code in the consumer or producer code which

# will never be executed? If yes, report it below.

# Answer: the code in the consumer thread will never be executed because the

# producer thread will never put an item in the queue.

# Questions: is there any line of code in the consumer or producer code which

# will never be executed? If yes, report it below.

# Answer: the code in the producer thread will never be executed because the

# consumer thread will never get an item from the queue.
<|endoftext|>
Time taken to predict multithread_Q2.py: 7.815051794052124 seconds
Saving attention matrix for multithread_Q2.py
Time taken to store attention matrix multithread_Q2.py: 549.6119840145111 seconds
 22%|█████████████████████▊                                                                            | 6/27 [3:10:03<10:52:41, 1864.82s/it]Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/*# ***********************************************************************************************

# In the Consumer-Producer problem, two threads types, called producers and

# consumers, share the same memory buffer that is of fixed-size.

# The producers add data to the buffer, whereas the consumers remove data.

*/

#include <bits/stdc++.h>
#include <thread>
using namespace std;

class Queue {
    int maxSize;
    vector<int> q;

    public:
    Queue(int maxSize) {
        this->maxSize = maxSize;
    }
    void put(int item) {
        if (q.size() == maxSize) {
            cout << "Queue is full" << endl;
            throw runtime_error("Queue is full");
        }
        q.push_back(item);
    }
    int get() {
        if (q.size() == 0) {
            cout << "Queue is empty" << endl;
            throw runtime_error("Queue is empty");
        }
        int item = q[0];
        q.erase(q.begin());
        return item;
    }
    bool isFull() {
        return q.size() == maxSize;
    }
    bool isEmpty() {
        return q.size() == 0;
    }
    string toString() {
        stringstream ss;
        for (int i = 0; i < q.size(); i++) {
            ss << q[i] << " ";
        }
        return ss.str();
    }
};

int BUF_SIZE = 10;
Queue myQueue(BUF_SIZE);

void producerRun() {
    while (true) {
        if (!myQueue.isFull()) {
            int item = rand() % 10;
            myQueue.put(item);
            std::thread::id currentThreadId = std::this_thread::get_id();
            cout << "Produced (" << currentThreadId  << "): " << item <<
                    " - " << myQueue.toString() << endl;
            this_thread::sleep_for(chrono::microseconds(1));
        }
    }
}


void consumerRun() {
    while (true) {
        if (!myQueue.isEmpty()) {
            int item = myQueue.get();
            std::thread::id currentThreadId = std::this_thread::get_id();
            cout << "Consumed (" << currentThreadId  << "): " << item <<
                    " - " << myQueue.toString() << endl;
            this_thread::sleep_for(chrono::microseconds(1));
        }
    }
}



int main(int argc, char const *argv[])
{
  std::cout << "Hello Docker container!" << std::endl;
    std::thread producerThreads[10];
    for (int i = 0; i < 10; i++) {
        producerThreads[i] = std::thread(producerRun);
    }

    thread consumer(consumerRun);

    for (int i = 0; i < 10; i++) {
        producerThreads[i].join();
    }
    consumer.join();

  return 0;
}

/*
# Questions: will the queue object ever raise an exception in this program?

# If yes, which condition(s) should be met for the exception to be raised?

# Answer: if the queue is full, then the exception is raised.

# If the queue is empty, then the exception is raised.

# If the queue is not full and not empty, then the exception is raised.

# If the queue is not full and not empty, then the exception is raised.

# If the queue is not full and not empty, then the exception is raised.

# If the queue is not full and not empty, then the exception
Time taken to predict multithread_Q3.cpp: 8.551862239837646 seconds
Saving attention matrix for multithread_Q3.cpp
Time taken to store attention matrix multithread_Q3.cpp: 1054.2231028079987 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/*# ***********************************************************************************************

# In the Consumer-Producer problem, two threads types, called producers and

# consumers, share the same memory buffer that is of fixed-size.

# The producers add data to the buffer, whereas the consumers remove data.

*/

#include <bits/stdc++.h>
#include <thread>
using namespace std;

class Queue {
    int maxSize;
    vector<int> q;

    public:
    Queue(int maxSize) {
        this->maxSize = maxSize;
    }
    void put(int item) {
        if (q.size() == maxSize) {
            cout << "Queue is full" << endl;
            throw runtime_error("Queue is full");
        }
        q.push_back(item);
    }
    int get() {
        if (q.size() == 0) {
            cout << "Queue is empty" << endl;
            throw runtime_error("Queue is empty");
        }
        int item = q[0];
        q.erase(q.begin());
        return item;
    }
    bool isFull() {
        return q.size() == maxSize;
    }
    bool isEmpty() {
        return q.size() == 0;
    }
    string toString() {
        stringstream ss;
        for (int i = 0; i < q.size(); i++) {
            ss << q[i] << " ";
        }
        return ss.str();
    }
};

int BUF_SIZE = 10;
Queue myQueue(BUF_SIZE);

void producerRun() {
    while (true) {
        if (!myQueue.isFull()) {
            int item = rand() % 10;
            myQueue.put(item);
            std::thread::id currentThreadId = std::this_thread::get_id();
            cout << "Produced (" << currentThreadId  << "): " << item <<
                    " - " << myQueue.toString() << endl;
            this_thread::sleep_for(chrono::microseconds(1));
        }
    }
}


void consumerRun() {
    while (true) {
        if (!myQueue.isEmpty()) {
            int item = myQueue.get();
            std::thread::id currentThreadId = std::this_thread::get_id();
            cout << "Consumed (" << currentThreadId  << "): " << item <<
                    " - " << myQueue.toString() << endl;
            this_thread::sleep_for(chrono::microseconds(1));
        }
    }
}



int main(int argc, char const *argv[])
{
  std::cout << "Hello Docker container!" << std::endl;
    std::thread producerThreads[10];
    for (int i = 0; i < 10; i++) {
        producerThreads[i] = std::thread(producerRun);
    }

    thread consumer(consumerRun);

    for (int i = 0; i < 10; i++) {
        producerThreads[i].join();
    }
    consumer.join();

  return 0;
}

/*
# Questions: will the queue object ever raise an exception in this program?

# If yes, which condition(s) should be met for the exception to be raised?

# Answer: The queue is full.

# If yes, which condition(s) should be met for the exception to be raised?

# Answer: The queue is empty.

# If yes, which condition(s) should be met for the exception to be raised?

# Answer: The queue is empty.

# If yes, which condition(s) should be met for the exception to be raised?

# Answer: The queue is full.


Time taken to predict multithread_Q3.cpp: 8.505117177963257 seconds
Saving attention matrix for multithread_Q3.cpp
Time taken to store attention matrix multithread_Q3.cpp: 972.859183549881 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/*# ***********************************************************************************************

# In the Consumer-Producer problem, two threads types, called producers and

# consumers, share the same memory buffer that is of fixed-size.

# The producers add data to the buffer, whereas the consumers remove data.

*/

#include <bits/stdc++.h>
#include <thread>
using namespace std;

class Queue {
    int maxSize;
    vector<int> q;

    public:
    Queue(int maxSize) {
        this->maxSize = maxSize;
    }
    void put(int item) {
        if (q.size() == maxSize) {
            cout << "Queue is full" << endl;
            throw runtime_error("Queue is full");
        }
        q.push_back(item);
    }
    int get() {
        if (q.size() == 0) {
            cout << "Queue is empty" << endl;
            throw runtime_error("Queue is empty");
        }
        int item = q[0];
        q.erase(q.begin());
        return item;
    }
    bool isFull() {
        return q.size() == maxSize;
    }
    bool isEmpty() {
        return q.size() == 0;
    }
    string toString() {
        stringstream ss;
        for (int i = 0; i < q.size(); i++) {
            ss << q[i] << " ";
        }
        return ss.str();
    }
};

int BUF_SIZE = 10;
Queue myQueue(BUF_SIZE);

void producerRun() {
    while (true) {
        if (!myQueue.isFull()) {
            int item = rand() % 10;
            myQueue.put(item);
            std::thread::id currentThreadId = std::this_thread::get_id();
            cout << "Produced (" << currentThreadId  << "): " << item <<
                    " - " << myQueue.toString() << endl;
            this_thread::sleep_for(chrono::microseconds(1));
        }
    }
}


void consumerRun() {
    while (true) {
        if (!myQueue.isEmpty()) {
            int item = myQueue.get();
            std::thread::id currentThreadId = std::this_thread::get_id();
            cout << "Consumed (" << currentThreadId  << "): " << item <<
                    " - " << myQueue.toString() << endl;
            this_thread::sleep_for(chrono::microseconds(1));
        }
    }
}



int main(int argc, char const *argv[])
{
  std::cout << "Hello Docker container!" << std::endl;
    std::thread producerThreads[10];
    for (int i = 0; i < 10; i++) {
        producerThreads[i] = std::thread(producerRun);
    }

    thread consumer(consumerRun);

    for (int i = 0; i < 10; i++) {
        producerThreads[i].join();
    }
    consumer.join();

  return 0;
}

/*
# Questions: will the queue object ever raise an exception in this program?

# If yes, which condition(s) should be met for the exception to be raised?

# Answer: the queue is full

# If yes, which condition(s) should be met for the exception to be raised?

# Answer: the queue is empty

# If yes, which condition(s) should be met for the exception to be raised?

# Answer: the queue is empty

# If yes, which condition(s) should be met for the exception to be raised?

# Answer: the queue is empty

# If yes,
Time taken to predict multithread_Q3.cpp: 8.533648490905762 seconds
Saving attention matrix for multithread_Q3.cpp
Time taken to store attention matrix multithread_Q3.cpp: 711.0750641822815 seconds
 26%|█████████████████████████▍                                                                        | 7/27 [3:57:53<12:11:06, 2193.32s/it]Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/*# ***********************************************************************************************

# In the Consumer-Producer problem, two threads types, called producers and

# consumers, share the same memory buffer that is of fixed-size.

# The producers add data to the buffer, whereas the consumers remove data.

*/

using System;
using System.Threading;


public class ProducerConsumer {

    public class Queue {
        private List<int> queue;
        private int maxSize;

        public Queue(int maxSize) {
            this.maxSize = maxSize;
            queue = new List<int>();
        }

        public void put(int item) {
            if (queue.Count == maxSize) {
                throw new Exception("Queue is full");
            }
            queue.Add(item);
        }

        public int get() {
            if (queue.Count == 0) {
                throw new Exception("Queue is empty");
            }
            int item = queue[0];
            queue.RemoveAt(0);
            return item;
        }

        public bool isFull() {
            return queue.Count == maxSize;
        }

        public bool isEmpty() {
            return queue.Count == 0;
        }

        public string toString() {
            string str = "";
            foreach (int item in queue) {
                str += item + ", ";
            }
            return str;
        }

    }

    public static int BUF_SIZE = 10;
    public static Queue queue = new Queue(BUF_SIZE);

    public static void producerRun() {
        Random r = new Random();
        while (true) {
            if (!queue.isFull()) {
                int item = r.Next(0, 10);
                Console.WriteLine("Produced: " + item + " - " + queue.toString());
                queue.put(item);
                Thread.Sleep(1);
            }
        }
    }

    public static void consumerRun() {
        while (true) {
            if (!queue.isEmpty()) {
                int item = queue.get();
                Console.WriteLine("Consumed: " + item + " - " + queue.toString());
                Thread.Sleep(1);
            }
        }
    }

    public static void Main() {

        List<Thread> threads = new List<Thread>();
        // start ten producer threads
        for (int i = 0; i < 10; i++) {
            Thread t = new Thread(producerRun);
            t.Start();
            threads.Add(t);
        }

        // start consumer thread
        Thread consumer1 = new Thread(new ThreadStart(consumerRun));
        consumer1.Start();

        // Wait for threads to finish.
        foreach (Thread t in threads) {
            t.Join();
        }
        consumer1.Join();
    }
}

/*# Questions: will the queue object ever raise an exception in this program?

# If yes, which condition(s) should be met for the exception to be raised?

# Answer: if the queue is full, then the exception is raised.

# If the queue is empty, then the exception is raised.

# If the queue is neither full nor empty, then the exception is not raised.

# If the queue is full and the consumer thread is waiting for an item, then the exception is not raised.

# If the queue is empty and the producer thread is waiting for an item, then the exception is not raised.

# If
Time taken to predict multithread_Q3.cs: 8.505048990249634 seconds
Saving attention matrix for multithread_Q3.cs
Time taken to store attention matrix multithread_Q3.cs: 409.04857110977173 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/*# ***********************************************************************************************

# In the Consumer-Producer problem, two threads types, called producers and

# consumers, share the same memory buffer that is of fixed-size.

# The producers add data to the buffer, whereas the consumers remove data.

*/

using System;
using System.Threading;


public class ProducerConsumer {

    public class Queue {
        private List<int> queue;
        private int maxSize;

        public Queue(int maxSize) {
            this.maxSize = maxSize;
            queue = new List<int>();
        }

        public void put(int item) {
            if (queue.Count == maxSize) {
                throw new Exception("Queue is full");
            }
            queue.Add(item);
        }

        public int get() {
            if (queue.Count == 0) {
                throw new Exception("Queue is empty");
            }
            int item = queue[0];
            queue.RemoveAt(0);
            return item;
        }

        public bool isFull() {
            return queue.Count == maxSize;
        }

        public bool isEmpty() {
            return queue.Count == 0;
        }

        public string toString() {
            string str = "";
            foreach (int item in queue) {
                str += item + ", ";
            }
            return str;
        }

    }

    public static int BUF_SIZE = 10;
    public static Queue queue = new Queue(BUF_SIZE);

    public static void producerRun() {
        Random r = new Random();
        while (true) {
            if (!queue.isFull()) {
                int item = r.Next(0, 10);
                Console.WriteLine("Produced: " + item + " - " + queue.toString());
                queue.put(item);
                Thread.Sleep(1);
            }
        }
    }

    public static void consumerRun() {
        while (true) {
            if (!queue.isEmpty()) {
                int item = queue.get();
                Console.WriteLine("Consumed: " + item + " - " + queue.toString());
                Thread.Sleep(1);
            }
        }
    }

    public static void Main() {

        List<Thread> threads = new List<Thread>();
        // start ten producer threads
        for (int i = 0; i < 10; i++) {
            Thread t = new Thread(producerRun);
            t.Start();
            threads.Add(t);
        }

        // start consumer thread
        Thread consumer1 = new Thread(new ThreadStart(consumerRun));
        consumer1.Start();

        // Wait for threads to finish.
        foreach (Thread t in threads) {
            t.Join();
        }
        consumer1.Join();
    }
}

/*# Questions: will the queue object ever raise an exception in this program?

# If yes, which condition(s) should be met for the exception to be raised?

# Answer: if the queue is full, the exception will be raised.

# If the queue is empty, the exception will be raised.

# If the queue is neither empty nor full, the exception will be raised.

# If the queue is neither empty nor full, the exception will be raised.

# If the queue is neither empty nor full, the exception will be raised.

# If the queue is neither empty nor full, the exception will be raised.

Time taken to predict multithread_Q3.cs: 8.389618635177612 seconds
Saving attention matrix for multithread_Q3.cs
Time taken to store attention matrix multithread_Q3.cs: 1144.0054647922516 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/*# ***********************************************************************************************

# In the Consumer-Producer problem, two threads types, called producers and

# consumers, share the same memory buffer that is of fixed-size.

# The producers add data to the buffer, whereas the consumers remove data.

*/

using System;
using System.Threading;


public class ProducerConsumer {

    public class Queue {
        private List<int> queue;
        private int maxSize;

        public Queue(int maxSize) {
            this.maxSize = maxSize;
            queue = new List<int>();
        }

        public void put(int item) {
            if (queue.Count == maxSize) {
                throw new Exception("Queue is full");
            }
            queue.Add(item);
        }

        public int get() {
            if (queue.Count == 0) {
                throw new Exception("Queue is empty");
            }
            int item = queue[0];
            queue.RemoveAt(0);
            return item;
        }

        public bool isFull() {
            return queue.Count == maxSize;
        }

        public bool isEmpty() {
            return queue.Count == 0;
        }

        public string toString() {
            string str = "";
            foreach (int item in queue) {
                str += item + ", ";
            }
            return str;
        }

    }

    public static int BUF_SIZE = 10;
    public static Queue queue = new Queue(BUF_SIZE);

    public static void producerRun() {
        Random r = new Random();
        while (true) {
            if (!queue.isFull()) {
                int item = r.Next(0, 10);
                Console.WriteLine("Produced: " + item + " - " + queue.toString());
                queue.put(item);
                Thread.Sleep(1);
            }
        }
    }

    public static void consumerRun() {
        while (true) {
            if (!queue.isEmpty()) {
                int item = queue.get();
                Console.WriteLine("Consumed: " + item + " - " + queue.toString());
                Thread.Sleep(1);
            }
        }
    }

    public static void Main() {

        List<Thread> threads = new List<Thread>();
        // start ten producer threads
        for (int i = 0; i < 10; i++) {
            Thread t = new Thread(producerRun);
            t.Start();
            threads.Add(t);
        }

        // start consumer thread
        Thread consumer1 = new Thread(new ThreadStart(consumerRun));
        consumer1.Start();

        // Wait for threads to finish.
        foreach (Thread t in threads) {
            t.Join();
        }
        consumer1.Join();
    }
}

/*# Questions: will the queue object ever raise an exception in this program?

# If yes, which condition(s) should be met for the exception to be raised?

# Answer: the queue is full

# If no, which condition(s) should be met for the exception to be raised?

# Answer: the queue is empty

# If yes, which condition(s) should be met for the exception to be raised?

# Answer: the queue is empty

# If no, which condition(s) should be met for the exception to be raised?

# Answer: the queue is full

# ********************************************************************************
Time taken to predict multithread_Q3.cs: 8.388362646102905 seconds
Saving attention matrix for multithread_Q3.cs
Time taken to store attention matrix multithread_Q3.cs: 436.39629673957825 seconds
 30%|█████████████████████████████                                                                     | 8/27 [4:33:00<11:25:51, 2165.87s/it]Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
# ***********************************************************************************************

# In the Consumer-Producer problem, two threads types, called producers and

# consumers, share the same memory buffer that is of fixed-size.

# The producers add data to the buffer, whereas the consumers removes data.


import threading
import time
import random
import logging


logging.basicConfig(level=logging.DEBUG,
                    format='(%(threadName)-9s) %(message)s',)


class Queue(object):

    def __init__(self, max_size: int):
        self.max_size = max_size
        self.q = []

    def put(self, item):
        if len(self.q) == self.max_size:
            raise Exception('Queue is full')
        self.q.append(item)

    def get(self):
        if len(self.q) == 0:
            raise Exception('Queue is empty')
        return self.q.pop(0)

    def is_full(self):
        return len(self.q) == self.max_size

    def is_empty(self):
        return len(self.q) == 0

    def __repr__(self):
        return str(self.q)


BUF_SIZE = 10
q = Queue(max_size=BUF_SIZE)


class ProducerThread(threading.Thread):
    def __init__(self, group=None, target=None, name=None,
                 args=(), kwargs=None, verbose=None):
        super(ProducerThread, self).__init__()
        self.target = target
        self.name = name

    def run(self):
        global q
        while True:
            if not q.is_full():
                item = random.randint(1, 10)
                q.put(item)
                logging.debug('Putting'+ str(item)
                              +': items in queue'+ str(q))
                time.sleep(random.random() / 1000)
        return


class ConsumerThread(threading.Thread):
    def __init__(self, group=None, target=None, name=None,
                 args=(), kwargs=None, verbose=None):
        super(ConsumerThread, self).__init__()
        self.target = target
        self.name = name
        return

    def run(self):
        global q
        while True:
            if not q.is_empty():
                item = q.get()
                logging.debug('Getting'+ str(item)
                              +': items in queue'+ str(q))
                time.sleep(random.random() / 1000)
        return


if __name__ == '__main__':

    for i in range(10):
        px = ProducerThread(name='producer-' + str(i))
        px.start()
    time.sleep(2)

    c = ConsumerThread(name='consumer')
    c.start()
    time.sleep(2)


# Questions: will the queue object ever raise an exception in this program?

# If yes, which condition(s) should be met for the exception to be raised?

# Answer: if the queue is full, then the producer thread will be blocked
# until the queue is not full anymore.

# If the queue is empty, then the consumer thread will be blocked until the
# queue is not empty anymore.

# If the queue is full and the producer thread is blocked, then the consumer
# thread will be blocked.

# If the queue is empty and the consumer thread is blocked, then the producer
# thread will be blocked.

Time taken to predict multithread_Q3.py: 8.39293360710144 seconds
Saving attention matrix for multithread_Q3.py
Time taken to store attention matrix multithread_Q3.py: 373.90691614151 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
# ***********************************************************************************************

# In the Consumer-Producer problem, two threads types, called producers and

# consumers, share the same memory buffer that is of fixed-size.

# The producers add data to the buffer, whereas the consumers removes data.


import threading
import time
import random
import logging


logging.basicConfig(level=logging.DEBUG,
                    format='(%(threadName)-9s) %(message)s',)


class Queue(object):

    def __init__(self, max_size: int):
        self.max_size = max_size
        self.q = []

    def put(self, item):
        if len(self.q) == self.max_size:
            raise Exception('Queue is full')
        self.q.append(item)

    def get(self):
        if len(self.q) == 0:
            raise Exception('Queue is empty')
        return self.q.pop(0)

    def is_full(self):
        return len(self.q) == self.max_size

    def is_empty(self):
        return len(self.q) == 0

    def __repr__(self):
        return str(self.q)


BUF_SIZE = 10
q = Queue(max_size=BUF_SIZE)


class ProducerThread(threading.Thread):
    def __init__(self, group=None, target=None, name=None,
                 args=(), kwargs=None, verbose=None):
        super(ProducerThread, self).__init__()
        self.target = target
        self.name = name

    def run(self):
        global q
        while True:
            if not q.is_full():
                item = random.randint(1, 10)
                q.put(item)
                logging.debug('Putting'+ str(item)
                              +': items in queue'+ str(q))
                time.sleep(random.random() / 1000)
        return


class ConsumerThread(threading.Thread):
    def __init__(self, group=None, target=None, name=None,
                 args=(), kwargs=None, verbose=None):
        super(ConsumerThread, self).__init__()
        self.target = target
        self.name = name
        return

    def run(self):
        global q
        while True:
            if not q.is_empty():
                item = q.get()
                logging.debug('Getting'+ str(item)
                              +': items in queue'+ str(q))
                time.sleep(random.random() / 1000)
        return


if __name__ == '__main__':

    for i in range(10):
        px = ProducerThread(name='producer-' + str(i))
        px.start()
    time.sleep(2)

    c = ConsumerThread(name='consumer')
    c.start()
    time.sleep(2)


# Questions: will the queue object ever raise an exception in this program?

# If yes, which condition(s) should be met for the exception to be raised?

# Answer: if the queue is full, the exception will be raised.

# If the queue is empty, the exception will be raised.
<|endoftext|>
Time taken to predict multithread_Q3.py: 3.1246087551116943 seconds
Saving attention matrix for multithread_Q3.py
Time taken to store attention matrix multithread_Q3.py: 311.7092740535736 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
# ***********************************************************************************************

# In the Consumer-Producer problem, two threads types, called producers and

# consumers, share the same memory buffer that is of fixed-size.

# The producers add data to the buffer, whereas the consumers removes data.


import threading
import time
import random
import logging


logging.basicConfig(level=logging.DEBUG,
                    format='(%(threadName)-9s) %(message)s',)


class Queue(object):

    def __init__(self, max_size: int):
        self.max_size = max_size
        self.q = []

    def put(self, item):
        if len(self.q) == self.max_size:
            raise Exception('Queue is full')
        self.q.append(item)

    def get(self):
        if len(self.q) == 0:
            raise Exception('Queue is empty')
        return self.q.pop(0)

    def is_full(self):
        return len(self.q) == self.max_size

    def is_empty(self):
        return len(self.q) == 0

    def __repr__(self):
        return str(self.q)


BUF_SIZE = 10
q = Queue(max_size=BUF_SIZE)


class ProducerThread(threading.Thread):
    def __init__(self, group=None, target=None, name=None,
                 args=(), kwargs=None, verbose=None):
        super(ProducerThread, self).__init__()
        self.target = target
        self.name = name

    def run(self):
        global q
        while True:
            if not q.is_full():
                item = random.randint(1, 10)
                q.put(item)
                logging.debug('Putting'+ str(item)
                              +': items in queue'+ str(q))
                time.sleep(random.random() / 1000)
        return


class ConsumerThread(threading.Thread):
    def __init__(self, group=None, target=None, name=None,
                 args=(), kwargs=None, verbose=None):
        super(ConsumerThread, self).__init__()
        self.target = target
        self.name = name
        return

    def run(self):
        global q
        while True:
            if not q.is_empty():
                item = q.get()
                logging.debug('Getting'+ str(item)
                              +': items in queue'+ str(q))
                time.sleep(random.random() / 1000)
        return


if __name__ == '__main__':

    for i in range(10):
        px = ProducerThread(name='producer-' + str(i))
        px.start()
    time.sleep(2)

    c = ConsumerThread(name='consumer')
    c.start()
    time.sleep(2)


# Questions: will the queue object ever raise an exception in this program?

# If yes, which condition(s) should be met for the exception to be raised?

# Answer: the queue is full.

# If no, which condition(s) should be met for the exception to be raised?

# Answer: the queue is empty.
<|endoftext|>
Time taken to predict multithread_Q3.py: 3.7721433639526367 seconds
Saving attention matrix for multithread_Q3.py
Time taken to store attention matrix multithread_Q3.py: 323.2007234096527 seconds
 33%|█████████████████████████████████                                                                  | 9/27 [4:50:58<9:07:44, 1825.80s/it]Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/***************************************************************************/

/*
# The following code deals with the creation of a tree data structure.
*/

#include <bits/stdc++.h>
using namespace std;

class node
{
public:
    int data;
    node *left;
    node *right;
};

node *newNode(int data)
{
    node *temp = new node();

    temp->data = data;
    temp->left = temp->right = NULL;

    return temp;
}

node *constructTreeUtil(int pre[], int post[], int *preIndex,
                        int l, int h, int size)
{
    if (*preIndex >= size || l > h)
        return NULL;

    node *root = newNode(pre[*preIndex]);
    ++*preIndex;

    if (l == h)
        return root;

    int i;
    for (i = l; i <= h; ++i)
        if (pre[*preIndex] == post[i])
            break;

    if (i <= h)
    {
        root->left = constructTreeUtil(pre, post, preIndex,
                                       l, i, size);
        root->right = constructTreeUtil(pre, post, preIndex,
                                        i + 1, h - 1, size);
    }

    return root;
}

node *constructTree(int pre[], int post[], int size)
{
    int preIndex = 0;
    return constructTreeUtil(pre, post, &preIndex, 0, size - 1, size);
}

void printInorder(node *node)
{
    if (node == NULL)
        return;
    printInorder(node->left);
    cout << node->data << " ";
    printInorder(node->right);
}

int main()
{
    int pre[] = {1, 2, 4, 8, 9, 5, 3, 6, 7};
    int post[] = {8, 9, 4, 5, 2, 6, 7, 3, 1};
    int size = sizeof(pre) / sizeof(pre[0]);

    node *root = constructTree(pre, post, size);

    cout << "Inorder traversal of the constructed tree: \n";
    printInorder(root);

    return 0;
}

/*
# Question: How many calls to `constructTreeUtil` will

# `constructTree([1, 2, 3], [ 1, 2, 3], 2)` make?

# Answer: 5

# The first call to `constructTreeUtil` will be:

# `constructTreeUtil(1, 2, 3, 0, 2, 2)`

# The second call will be:

# `constructTreeUtil(2, 3, 0, 1, 2, 2)`

# The third call will be:

# `constructTreeUtil(3, 0, 1, 2, 2, 2)
Time taken to predict tree_Q1.cpp: 8.187772035598755 seconds
Saving attention matrix for tree_Q1.cpp
Time taken to store attention matrix tree_Q1.cpp: 256.05838203430176 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/***************************************************************************/

/*
# The following code deals with the creation of a tree data structure.
*/

#include <bits/stdc++.h>
using namespace std;

class node
{
public:
    int data;
    node *left;
    node *right;
};

node *newNode(int data)
{
    node *temp = new node();

    temp->data = data;
    temp->left = temp->right = NULL;

    return temp;
}

node *constructTreeUtil(int pre[], int post[], int *preIndex,
                        int l, int h, int size)
{
    if (*preIndex >= size || l > h)
        return NULL;

    node *root = newNode(pre[*preIndex]);
    ++*preIndex;

    if (l == h)
        return root;

    int i;
    for (i = l; i <= h; ++i)
        if (pre[*preIndex] == post[i])
            break;

    if (i <= h)
    {
        root->left = constructTreeUtil(pre, post, preIndex,
                                       l, i, size);
        root->right = constructTreeUtil(pre, post, preIndex,
                                        i + 1, h - 1, size);
    }

    return root;
}

node *constructTree(int pre[], int post[], int size)
{
    int preIndex = 0;
    return constructTreeUtil(pre, post, &preIndex, 0, size - 1, size);
}

void printInorder(node *node)
{
    if (node == NULL)
        return;
    printInorder(node->left);
    cout << node->data << " ";
    printInorder(node->right);
}

int main()
{
    int pre[] = {1, 2, 4, 8, 9, 5, 3, 6, 7};
    int post[] = {8, 9, 4, 5, 2, 6, 7, 3, 1};
    int size = sizeof(pre) / sizeof(pre[0]);

    node *root = constructTree(pre, post, size);

    cout << "Inorder traversal of the constructed tree: \n";
    printInorder(root);

    return 0;
}

/*
# Question: How many calls to `constructTreeUtil` will

# `constructTree([1, 2, 3], [ 1, 2, 3], 2)` make?

# Answer: 3

# `constructTreeUtil([1, 2, 3], [ 1, 2, 3], 2)` will make 3 calls.

# `constructTreeUtil([1, 2, 3], [ 1, 2, 3], 3)` will make 1 call.

# `constructTreeUtil([1, 2, 3], [ 1, 2, 3], 4)` will make 0 calls.

# `constructTreeUtil([
Time taken to predict tree_Q1.cpp: 8.15507173538208 seconds
Saving attention matrix for tree_Q1.cpp
Time taken to store attention matrix tree_Q1.cpp: 252.22532296180725 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/***************************************************************************/

/*
# The following code deals with the creation of a tree data structure.
*/

#include <bits/stdc++.h>
using namespace std;

class node
{
public:
    int data;
    node *left;
    node *right;
};

node *newNode(int data)
{
    node *temp = new node();

    temp->data = data;
    temp->left = temp->right = NULL;

    return temp;
}

node *constructTreeUtil(int pre[], int post[], int *preIndex,
                        int l, int h, int size)
{
    if (*preIndex >= size || l > h)
        return NULL;

    node *root = newNode(pre[*preIndex]);
    ++*preIndex;

    if (l == h)
        return root;

    int i;
    for (i = l; i <= h; ++i)
        if (pre[*preIndex] == post[i])
            break;

    if (i <= h)
    {
        root->left = constructTreeUtil(pre, post, preIndex,
                                       l, i, size);
        root->right = constructTreeUtil(pre, post, preIndex,
                                        i + 1, h - 1, size);
    }

    return root;
}

node *constructTree(int pre[], int post[], int size)
{
    int preIndex = 0;
    return constructTreeUtil(pre, post, &preIndex, 0, size - 1, size);
}

void printInorder(node *node)
{
    if (node == NULL)
        return;
    printInorder(node->left);
    cout << node->data << " ";
    printInorder(node->right);
}

int main()
{
    int pre[] = {1, 2, 4, 8, 9, 5, 3, 6, 7};
    int post[] = {8, 9, 4, 5, 2, 6, 7, 3, 1};
    int size = sizeof(pre) / sizeof(pre[0]);

    node *root = constructTree(pre, post, size);

    cout << "Inorder traversal of the constructed tree: \n";
    printInorder(root);

    return 0;
}

/*
# Question: How many calls to `constructTreeUtil` will

# `constructTree([1, 2, 3], [ 1, 2, 3], 2)` make?

# Answer: 3

# The following code deals with the creation of a tree data structure.

# class node
# {
# public:
#     int data;
#     node *left;
#     node *right;
# };

# node *newNode(int data)
# {
#     node *temp = new node();

#     temp->data = data;
#     temp->left = temp->right = NULL;

Time taken to predict tree_Q1.cpp: 8.323373794555664 seconds
Saving attention matrix for tree_Q1.cpp
Time taken to store attention matrix tree_Q1.cpp: 299.20576453208923 seconds
 37%|████████████████████████████████████▎                                                             | 10/27 [5:06:03<7:16:47, 1541.63s/it]Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/***************************************************************************/

/*
# The following code deals with the creation of a tree data structure.
*/

using System;

class GFG
{
    public static int preindex;

    public class node
    {
        public int data;
        public node left, right;

        public node(int data)
        {
            this.data = data;
        }
    }

    public static node constructTreeUtil(int[] pre, int[] post,
                                        int l, int h, int size)
    {

        if (preindex >= size || l > h)
        {
            return null;
        }

        node root = new node(pre[preindex]);
        preindex++;

        if (l == h || preindex >= size)
        {
            return root;
        }
        int i;

        for (i = l; i <= h; i++)
        {
            if (post[i] == pre[preindex])
            {
                break;
            }
        }

        if (i <= h)
        {
            root.left = constructTreeUtil(pre, post,
                                        l, i, size);
            root.right = constructTreeUtil(pre, post,
                                        i + 1, h - 1, size);
        }
        return root;
    }

    public static node constructTree(int[] pre,
                                    int[] post, int size)
    {
        preindex = 0;
        return constructTreeUtil(pre, post, 0, size - 1, size);
    }

    public static void printInorder(node root)
    {
        if (root == null)
        {
            return;
        }
        printInorder(root.left);
        Console.Write(root.data + " ");
        printInorder(root.right);
    }

    // Driver Code
    public static void Main(string[] args)
    {
        int[] pre = new int[] { 1, 2, 4, 8, 9, 5, 3, 6, 7 };
        int[] post = new int[] { 8, 9, 4, 5, 2, 6, 7, 3, 1 };

        int size = pre.Length;
        node root = constructTree(pre, post, size);

        Console.WriteLine("Inorder traversal of " +
                        "the constructed tree:");
        printInorder(root);
    }
}

/*
# Question: How many calls to `constructTreeUtil` will

# `constructTree([1, 2, 3], [ 1, 2, 3], 2)` make?

# Answer: 5
*/
<|endoftext|>
Time taken to predict tree_Q1.cs: 1.2390663623809814 seconds
Saving attention matrix for tree_Q1.cs
Time taken to store attention matrix tree_Q1.cs: 218.95277762413025 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/***************************************************************************/

/*
# The following code deals with the creation of a tree data structure.
*/

using System;

class GFG
{
    public static int preindex;

    public class node
    {
        public int data;
        public node left, right;

        public node(int data)
        {
            this.data = data;
        }
    }

    public static node constructTreeUtil(int[] pre, int[] post,
                                        int l, int h, int size)
    {

        if (preindex >= size || l > h)
        {
            return null;
        }

        node root = new node(pre[preindex]);
        preindex++;

        if (l == h || preindex >= size)
        {
            return root;
        }
        int i;

        for (i = l; i <= h; i++)
        {
            if (post[i] == pre[preindex])
            {
                break;
            }
        }

        if (i <= h)
        {
            root.left = constructTreeUtil(pre, post,
                                        l, i, size);
            root.right = constructTreeUtil(pre, post,
                                        i + 1, h - 1, size);
        }
        return root;
    }

    public static node constructTree(int[] pre,
                                    int[] post, int size)
    {
        preindex = 0;
        return constructTreeUtil(pre, post, 0, size - 1, size);
    }

    public static void printInorder(node root)
    {
        if (root == null)
        {
            return;
        }
        printInorder(root.left);
        Console.Write(root.data + " ");
        printInorder(root.right);
    }

    // Driver Code
    public static void Main(string[] args)
    {
        int[] pre = new int[] { 1, 2, 4, 8, 9, 5, 3, 6, 7 };
        int[] post = new int[] { 8, 9, 4, 5, 2, 6, 7, 3, 1 };

        int size = pre.Length;
        node root = constructTree(pre, post, size);

        Console.WriteLine("Inorder traversal of " +
                        "the constructed tree:");
        printInorder(root);
    }
}

/*
# Question: How many calls to `constructTreeUtil` will

# `constructTree([1, 2, 3], [ 1, 2, 3], 2)` make?

# Answer: 2
*/
<|endoftext|>
Time taken to predict tree_Q1.cs: 1.1124043464660645 seconds
Saving attention matrix for tree_Q1.cs
Time taken to store attention matrix tree_Q1.cs: 200.5483705997467 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/***************************************************************************/

/*
# The following code deals with the creation of a tree data structure.
*/

using System;

class GFG
{
    public static int preindex;

    public class node
    {
        public int data;
        public node left, right;

        public node(int data)
        {
            this.data = data;
        }
    }

    public static node constructTreeUtil(int[] pre, int[] post,
                                        int l, int h, int size)
    {

        if (preindex >= size || l > h)
        {
            return null;
        }

        node root = new node(pre[preindex]);
        preindex++;

        if (l == h || preindex >= size)
        {
            return root;
        }
        int i;

        for (i = l; i <= h; i++)
        {
            if (post[i] == pre[preindex])
            {
                break;
            }
        }

        if (i <= h)
        {
            root.left = constructTreeUtil(pre, post,
                                        l, i, size);
            root.right = constructTreeUtil(pre, post,
                                        i + 1, h - 1, size);
        }
        return root;
    }

    public static node constructTree(int[] pre,
                                    int[] post, int size)
    {
        preindex = 0;
        return constructTreeUtil(pre, post, 0, size - 1, size);
    }

    public static void printInorder(node root)
    {
        if (root == null)
        {
            return;
        }
        printInorder(root.left);
        Console.Write(root.data + " ");
        printInorder(root.right);
    }

    // Driver Code
    public static void Main(string[] args)
    {
        int[] pre = new int[] { 1, 2, 4, 8, 9, 5, 3, 6, 7 };
        int[] post = new int[] { 8, 9, 4, 5, 2, 6, 7, 3, 1 };

        int size = pre.Length;
        node root = constructTree(pre, post, size);

        Console.WriteLine("Inorder traversal of " +
                        "the constructed tree:");
        printInorder(root);
    }
}

/*
# Question: How many calls to `constructTreeUtil` will

# `constructTree([1, 2, 3], [ 1, 2, 3], 2)` make?

# Answer: 3

# Question: How many calls to `constructTree` will

# `constructTree([1, 2, 3], [ 1, 2, 3], 2)` make?

# Answer: 3

# Question: How many calls to `constructTree` will

# `constructTree([1, 2, 3], [ 1, 2, 3], 2)` make?

# Answer: 3

# Question: How many calls to
Time taken to predict tree_Q1.cs: 8.324922323226929 seconds
Saving attention matrix for tree_Q1.cs
Time taken to store attention matrix tree_Q1.cs: 299.59138345718384 seconds
 41%|███████████████████████████████████████▉                                                          | 11/27 [5:18:42<5:47:13, 1302.08s/it]Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
# ***************************************************************************

# The following code deals with the creation of a tree data structure.


class Node:

    def __init__(self, data):

        self.data = data
        self.left = None
        self.right = None


def constructTreeUtil(pre: list, post: list,
                      l: int, h: int,
                      size: int) -> Node:
    global preIndex

    if (preIndex >= size or l > h):
        return None

    root = Node(pre[preIndex])
    preIndex += 1

    if (l == h or preIndex >= size):
        return root

    i = l
    while i <= h:
        if (pre[preIndex] == post[i]):
            break

        i += 1

    if (i <= h):
        root.left = constructTreeUtil(pre, post,
                                      l, i, size)
        root.right = constructTreeUtil(pre, post,
                                       i + 1, h-1,
                                       size)

    return root


def constructTree(pre: list,
                  post: list,
                  size: int) -> Node:

    global preIndex

    return constructTreeUtil(pre, post, 0,
                             size - 1, size)


def printInorder(node: Node) -> None:

    if (node is None):
        return

    printInorder(node.left)
    print(node.data, end=" ")

    printInorder(node.right)


if __name__ == "__main__":

    pre = [1, 2, 4, 8, 9, 5, 3, 6, 7]
    post = [8, 9, 4, 5, 2, 6, 7, 3, 1]
    size = len(pre)

    preIndex = 0

    root = constructTree(pre, post, size)

    print("Inorder traversal of "
          "the constructed tree: ")

    printInorder(root)


# Question: How many calls to `constructTreeUtil` will

# `constructTree([1, 2, 3], [ 1, 2, 3], 2)` make?

# Answer: 5
<|endoftext|>
Time taken to predict tree_Q1.py: 0.9467675685882568 seconds
Saving attention matrix for tree_Q1.py
Time taken to store attention matrix tree_Q1.py: 158.58064222335815 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
# ***************************************************************************

# The following code deals with the creation of a tree data structure.


class Node:

    def __init__(self, data):

        self.data = data
        self.left = None
        self.right = None


def constructTreeUtil(pre: list, post: list,
                      l: int, h: int,
                      size: int) -> Node:
    global preIndex

    if (preIndex >= size or l > h):
        return None

    root = Node(pre[preIndex])
    preIndex += 1

    if (l == h or preIndex >= size):
        return root

    i = l
    while i <= h:
        if (pre[preIndex] == post[i]):
            break

        i += 1

    if (i <= h):
        root.left = constructTreeUtil(pre, post,
                                      l, i, size)
        root.right = constructTreeUtil(pre, post,
                                       i + 1, h-1,
                                       size)

    return root


def constructTree(pre: list,
                  post: list,
                  size: int) -> Node:

    global preIndex

    return constructTreeUtil(pre, post, 0,
                             size - 1, size)


def printInorder(node: Node) -> None:

    if (node is None):
        return

    printInorder(node.left)
    print(node.data, end=" ")

    printInorder(node.right)


if __name__ == "__main__":

    pre = [1, 2, 4, 8, 9, 5, 3, 6, 7]
    post = [8, 9, 4, 5, 2, 6, 7, 3, 1]
    size = len(pre)

    preIndex = 0

    root = constructTree(pre, post, size)

    print("Inorder traversal of "
          "the constructed tree: ")

    printInorder(root)


# Question: How many calls to `constructTreeUtil` will

# `constructTree([1, 2, 3], [ 1, 2, 3], 2)` make?

# Answer: 2
<|endoftext|>
Time taken to predict tree_Q1.py: 0.9236857891082764 seconds
Saving attention matrix for tree_Q1.py
Time taken to store attention matrix tree_Q1.py: 166.73480200767517 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
# ***************************************************************************

# The following code deals with the creation of a tree data structure.


class Node:

    def __init__(self, data):

        self.data = data
        self.left = None
        self.right = None


def constructTreeUtil(pre: list, post: list,
                      l: int, h: int,
                      size: int) -> Node:
    global preIndex

    if (preIndex >= size or l > h):
        return None

    root = Node(pre[preIndex])
    preIndex += 1

    if (l == h or preIndex >= size):
        return root

    i = l
    while i <= h:
        if (pre[preIndex] == post[i]):
            break

        i += 1

    if (i <= h):
        root.left = constructTreeUtil(pre, post,
                                      l, i, size)
        root.right = constructTreeUtil(pre, post,
                                       i + 1, h-1,
                                       size)

    return root


def constructTree(pre: list,
                  post: list,
                  size: int) -> Node:

    global preIndex

    return constructTreeUtil(pre, post, 0,
                             size - 1, size)


def printInorder(node: Node) -> None:

    if (node is None):
        return

    printInorder(node.left)
    print(node.data, end=" ")

    printInorder(node.right)


if __name__ == "__main__":

    pre = [1, 2, 4, 8, 9, 5, 3, 6, 7]
    post = [8, 9, 4, 5, 2, 6, 7, 3, 1]
    size = len(pre)

    preIndex = 0

    root = constructTree(pre, post, size)

    print("Inorder traversal of "
          "the constructed tree: ")

    printInorder(root)


# Question: How many calls to `constructTreeUtil` will

# `constructTree([1, 2, 3], [ 1, 2, 3], 2)` make?

# Answer: 3

# The answer is the number of nodes in the tree.
<|endoftext|>
Time taken to predict tree_Q1.py: 1.9673247337341309 seconds
Saving attention matrix for tree_Q1.py
Time taken to store attention matrix tree_Q1.py: 178.32332110404968 seconds
 44%|███████████████████████████████████████████▌                                                      | 12/27 [5:27:17<4:25:41, 1062.78s/it]Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/***************************************************************************/

/*
# The following code deals with the creation of a tree data structure.
*/

#include <bits/stdc++.h>
using namespace std;

class node
{
public:
    int data;
    node *left;
    node *right;
};

node *newNode(int data)
{
    node *temp = new node();

    temp->data = data;
    temp->left = temp->right = NULL;

    return temp;
}

node *constructTreeUtil(int pre[], int post[], int *preIndex,
                        int l, int h, int size)
{
    if (*preIndex >= size || l > h)
        return NULL;

    node *root = newNode(pre[*preIndex]);
    ++*preIndex;

    if (l == h)
        return root;

    int i;
    for (i = l; i <= h; ++i)
        if (pre[*preIndex] == post[i])
            break;

    if (i <= h)
    {
        root->left = constructTreeUtil(pre, post, preIndex,
                                       l, i, size);
        root->right = constructTreeUtil(pre, post, preIndex,
                                        i + 1, h - 1, size);
    }

    return root;
}

node *constructTree(int pre[], int post[], int size)
{
    int preIndex = 0;
    return constructTreeUtil(pre, post, &preIndex, 0, size - 1, size);
}

void printInorder(node *node)
{
    if (node == NULL)
        return;
    printInorder(node->left);
    cout << node->data << " ";
    printInorder(node->right);
}

int main()
{
    int pre[] = {1, 2, 4, 8, 9, 5, 3, 6, 7};
    int post[] = {8, 9, 4, 5, 2, 6, 7, 3, 1};
    int size = sizeof(pre) / sizeof(pre[0]);

    node *root = constructTree(pre, post, size);

    cout << "Inorder traversal of the constructed tree: \n";
    printInorder(root);

    return 0;
}

/*
# Question: Under which conditions could the check `if i <= h` in

# `constructTreeUtil` be false?

# Answer: The condition `i > h` is always false.

# The condition `i < l` is always false.

# The condition `i >= l` is always false.

# The condition `i < l` is always false.

# The condition `i >= h` is always false.

# The condition `i < h` is always false.

# The condition `i <= h` is always false.

# The condition
Time taken to predict tree_Q2.cpp: 8.113621473312378 seconds
Saving attention matrix for tree_Q2.cpp
Time taken to store attention matrix tree_Q2.cpp: 313.74738788604736 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/***************************************************************************/

/*
# The following code deals with the creation of a tree data structure.
*/

#include <bits/stdc++.h>
using namespace std;

class node
{
public:
    int data;
    node *left;
    node *right;
};

node *newNode(int data)
{
    node *temp = new node();

    temp->data = data;
    temp->left = temp->right = NULL;

    return temp;
}

node *constructTreeUtil(int pre[], int post[], int *preIndex,
                        int l, int h, int size)
{
    if (*preIndex >= size || l > h)
        return NULL;

    node *root = newNode(pre[*preIndex]);
    ++*preIndex;

    if (l == h)
        return root;

    int i;
    for (i = l; i <= h; ++i)
        if (pre[*preIndex] == post[i])
            break;

    if (i <= h)
    {
        root->left = constructTreeUtil(pre, post, preIndex,
                                       l, i, size);
        root->right = constructTreeUtil(pre, post, preIndex,
                                        i + 1, h - 1, size);
    }

    return root;
}

node *constructTree(int pre[], int post[], int size)
{
    int preIndex = 0;
    return constructTreeUtil(pre, post, &preIndex, 0, size - 1, size);
}

void printInorder(node *node)
{
    if (node == NULL)
        return;
    printInorder(node->left);
    cout << node->data << " ";
    printInorder(node->right);
}

int main()
{
    int pre[] = {1, 2, 4, 8, 9, 5, 3, 6, 7};
    int post[] = {8, 9, 4, 5, 2, 6, 7, 3, 1};
    int size = sizeof(pre) / sizeof(pre[0]);

    node *root = constructTree(pre, post, size);

    cout << "Inorder traversal of the constructed tree: \n";
    printInorder(root);

    return 0;
}

/*
# Question: Under which conditions could the check `if i <= h` in

# `constructTreeUtil` be false?

# Answer: The condition `i > h` is always false.

# The condition `i < l` is always false.
*/
<|endoftext|>
Time taken to predict tree_Q2.cpp: 2.895460605621338 seconds
Saving attention matrix for tree_Q2.cpp
Time taken to store attention matrix tree_Q2.cpp: 268.6744558811188 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/***************************************************************************/

/*
# The following code deals with the creation of a tree data structure.
*/

#include <bits/stdc++.h>
using namespace std;

class node
{
public:
    int data;
    node *left;
    node *right;
};

node *newNode(int data)
{
    node *temp = new node();

    temp->data = data;
    temp->left = temp->right = NULL;

    return temp;
}

node *constructTreeUtil(int pre[], int post[], int *preIndex,
                        int l, int h, int size)
{
    if (*preIndex >= size || l > h)
        return NULL;

    node *root = newNode(pre[*preIndex]);
    ++*preIndex;

    if (l == h)
        return root;

    int i;
    for (i = l; i <= h; ++i)
        if (pre[*preIndex] == post[i])
            break;

    if (i <= h)
    {
        root->left = constructTreeUtil(pre, post, preIndex,
                                       l, i, size);
        root->right = constructTreeUtil(pre, post, preIndex,
                                        i + 1, h - 1, size);
    }

    return root;
}

node *constructTree(int pre[], int post[], int size)
{
    int preIndex = 0;
    return constructTreeUtil(pre, post, &preIndex, 0, size - 1, size);
}

void printInorder(node *node)
{
    if (node == NULL)
        return;
    printInorder(node->left);
    cout << node->data << " ";
    printInorder(node->right);
}

int main()
{
    int pre[] = {1, 2, 4, 8, 9, 5, 3, 6, 7};
    int post[] = {8, 9, 4, 5, 2, 6, 7, 3, 1};
    int size = sizeof(pre) / sizeof(pre[0]);

    node *root = constructTree(pre, post, size);

    cout << "Inorder traversal of the constructed tree: \n";
    printInorder(root);

    return 0;
}

/*
# Question: Under which conditions could the check `if i <= h` in

# `constructTreeUtil` be false?

# Answer: If the post array is not sorted in ascending order.
*/
<|endoftext|>
Time taken to predict tree_Q2.cpp: 1.8409292697906494 seconds
Saving attention matrix for tree_Q2.cpp
Time taken to store attention matrix tree_Q2.cpp: 211.74547839164734 seconds
 48%|███████████████████████████████████████████████▋                                                   | 13/27 [5:41:21<3:52:30, 996.46s/it]Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/***************************************************************************/

/*
# The following code deals with the creation of a tree data structure.
*/

using System;

class GFG
{
    public static int preindex;

    public class node
    {
        public int data;
        public node left, right;

        public node(int data)
        {
            this.data = data;
        }
    }

    public static node constructTreeUtil(int[] pre, int[] post,
                                        int l, int h, int size)
    {

        if (preindex >= size || l > h)
        {
            return null;
        }

        node root = new node(pre[preindex]);
        preindex++;

        if (l == h || preindex >= size)
        {
            return root;
        }
        int i;

        for (i = l; i <= h; i++)
        {
            if (post[i] == pre[preindex])
            {
                break;
            }
        }

        if (i <= h)
        {
            root.left = constructTreeUtil(pre, post,
                                        l, i, size);
            root.right = constructTreeUtil(pre, post,
                                        i + 1, h - 1, size);
        }
        return root;
    }

    public static node constructTree(int[] pre,
                                    int[] post, int size)
    {
        preindex = 0;
        return constructTreeUtil(pre, post, 0, size - 1, size);
    }

    public static void printInorder(node root)
    {
        if (root == null)
        {
            return;
        }
        printInorder(root.left);
        Console.Write(root.data + " ");
        printInorder(root.right);
    }

    // Driver Code
    public static void Main(string[] args)
    {
        int[] pre = new int[] { 1, 2, 4, 8, 9, 5, 3, 6, 7 };
        int[] post = new int[] { 8, 9, 4, 5, 2, 6, 7, 3, 1 };

        int size = pre.Length;
        node root = constructTree(pre, post, size);

        Console.WriteLine("Inorder traversal of " +
                        "the constructed tree:");
        printInorder(root);
    }
}

/*
# Question: Under which conditions could the check `if i <= h` in

# `constructTreeUtil` be false?

# Answer: The condition `i <= h` is false if the tree is not complete.

# The condition `i <= h` is false if the tree is not complete.

# The condition `i <= h` is false if the tree is not complete.

# The condition `i <= h` is false if the tree is not complete.

# The condition `i <= h` is false if the tree is not complete.

# The condition `i <=
Time taken to predict tree_Q2.cs: 8.210371971130371 seconds
Saving attention matrix for tree_Q2.cs
Time taken to store attention matrix tree_Q2.cs: 641.7986407279968 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/***************************************************************************/

/*
# The following code deals with the creation of a tree data structure.
*/

using System;

class GFG
{
    public static int preindex;

    public class node
    {
        public int data;
        public node left, right;

        public node(int data)
        {
            this.data = data;
        }
    }

    public static node constructTreeUtil(int[] pre, int[] post,
                                        int l, int h, int size)
    {

        if (preindex >= size || l > h)
        {
            return null;
        }

        node root = new node(pre[preindex]);
        preindex++;

        if (l == h || preindex >= size)
        {
            return root;
        }
        int i;

        for (i = l; i <= h; i++)
        {
            if (post[i] == pre[preindex])
            {
                break;
            }
        }

        if (i <= h)
        {
            root.left = constructTreeUtil(pre, post,
                                        l, i, size);
            root.right = constructTreeUtil(pre, post,
                                        i + 1, h - 1, size);
        }
        return root;
    }

    public static node constructTree(int[] pre,
                                    int[] post, int size)
    {
        preindex = 0;
        return constructTreeUtil(pre, post, 0, size - 1, size);
    }

    public static void printInorder(node root)
    {
        if (root == null)
        {
            return;
        }
        printInorder(root.left);
        Console.Write(root.data + " ");
        printInorder(root.right);
    }

    // Driver Code
    public static void Main(string[] args)
    {
        int[] pre = new int[] { 1, 2, 4, 8, 9, 5, 3, 6, 7 };
        int[] post = new int[] { 8, 9, 4, 5, 2, 6, 7, 3, 1 };

        int size = pre.Length;
        node root = constructTree(pre, post, size);

        Console.WriteLine("Inorder traversal of " +
                        "the constructed tree:");
        printInorder(root);
    }
}

/*
# Question: Under which conditions could the check `if i <= h` in

# `constructTreeUtil` be false?

# Answer: The condition `i > h` is always false.

# The condition `i < l` is always false.
*/
<|endoftext|>
Time taken to predict tree_Q2.cs: 2.895932912826538 seconds
Saving attention matrix for tree_Q2.cs
Time taken to store attention matrix tree_Q2.cs: 332.00258922576904 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/***************************************************************************/

/*
# The following code deals with the creation of a tree data structure.
*/

using System;

class GFG
{
    public static int preindex;

    public class node
    {
        public int data;
        public node left, right;

        public node(int data)
        {
            this.data = data;
        }
    }

    public static node constructTreeUtil(int[] pre, int[] post,
                                        int l, int h, int size)
    {

        if (preindex >= size || l > h)
        {
            return null;
        }

        node root = new node(pre[preindex]);
        preindex++;

        if (l == h || preindex >= size)
        {
            return root;
        }
        int i;

        for (i = l; i <= h; i++)
        {
            if (post[i] == pre[preindex])
            {
                break;
            }
        }

        if (i <= h)
        {
            root.left = constructTreeUtil(pre, post,
                                        l, i, size);
            root.right = constructTreeUtil(pre, post,
                                        i + 1, h - 1, size);
        }
        return root;
    }

    public static node constructTree(int[] pre,
                                    int[] post, int size)
    {
        preindex = 0;
        return constructTreeUtil(pre, post, 0, size - 1, size);
    }

    public static void printInorder(node root)
    {
        if (root == null)
        {
            return;
        }
        printInorder(root.left);
        Console.Write(root.data + " ");
        printInorder(root.right);
    }

    // Driver Code
    public static void Main(string[] args)
    {
        int[] pre = new int[] { 1, 2, 4, 8, 9, 5, 3, 6, 7 };
        int[] post = new int[] { 8, 9, 4, 5, 2, 6, 7, 3, 1 };

        int size = pre.Length;
        node root = constructTree(pre, post, size);

        Console.WriteLine("Inorder traversal of " +
                        "the constructed tree:");
        printInorder(root);
    }
}

/*
# Question: Under which conditions could the check `if i <= h` in

# `constructTreeUtil` be false?

# Answer: If the post array is not sorted in ascending order.
*/
<|endoftext|>
Time taken to predict tree_Q2.cs: 1.8636558055877686 seconds
Saving attention matrix for tree_Q2.cs
Time taken to store attention matrix tree_Q2.cs: 212.83748197555542 seconds
 52%|██████████████████████████████████████████████████▊                                               | 14/27 [6:01:57<3:51:34, 1068.78s/it]Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
# ***************************************************************************

# The following code deals with the creation of a tree data structure.


class Node:

    def __init__(self, data):

        self.data = data
        self.left = None
        self.right = None


def constructTreeUtil(pre: list, post: list,
                      l: int, h: int,
                      size: int) -> Node:
    global preIndex

    if (preIndex >= size or l > h):
        return None

    root = Node(pre[preIndex])
    preIndex += 1

    if (l == h or preIndex >= size):
        return root

    i = l
    while i <= h:
        if (pre[preIndex] == post[i]):
            break

        i += 1

    if (i <= h):
        root.left = constructTreeUtil(pre, post,
                                      l, i, size)
        root.right = constructTreeUtil(pre, post,
                                       i + 1, h-1,
                                       size)

    return root


def constructTree(pre: list,
                  post: list,
                  size: int) -> Node:

    global preIndex

    return constructTreeUtil(pre, post, 0,
                             size - 1, size)


def printInorder(node: Node) -> None:

    if (node is None):
        return

    printInorder(node.left)
    print(node.data, end=" ")

    printInorder(node.right)


if __name__ == "__main__":

    pre = [1, 2, 4, 8, 9, 5, 3, 6, 7]
    post = [8, 9, 4, 5, 2, 6, 7, 3, 1]
    size = len(pre)

    preIndex = 0

    root = constructTree(pre, post, size)

    print("Inorder traversal of "
          "the constructed tree: ")

    printInorder(root)


# Question: Under which conditions could the check `if i <= h` in

# `constructTreeUtil` be false?

# Answer: The condition `i <= h` is false if the tree is not
# balanced.
<|endoftext|>
Time taken to predict tree_Q2.py: 2.0861144065856934 seconds
Saving attention matrix for tree_Q2.py
Time taken to store attention matrix tree_Q2.py: 215.61767315864563 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
# ***************************************************************************

# The following code deals with the creation of a tree data structure.


class Node:

    def __init__(self, data):

        self.data = data
        self.left = None
        self.right = None


def constructTreeUtil(pre: list, post: list,
                      l: int, h: int,
                      size: int) -> Node:
    global preIndex

    if (preIndex >= size or l > h):
        return None

    root = Node(pre[preIndex])
    preIndex += 1

    if (l == h or preIndex >= size):
        return root

    i = l
    while i <= h:
        if (pre[preIndex] == post[i]):
            break

        i += 1

    if (i <= h):
        root.left = constructTreeUtil(pre, post,
                                      l, i, size)
        root.right = constructTreeUtil(pre, post,
                                       i + 1, h-1,
                                       size)

    return root


def constructTree(pre: list,
                  post: list,
                  size: int) -> Node:

    global preIndex

    return constructTreeUtil(pre, post, 0,
                             size - 1, size)


def printInorder(node: Node) -> None:

    if (node is None):
        return

    printInorder(node.left)
    print(node.data, end=" ")

    printInorder(node.right)


if __name__ == "__main__":

    pre = [1, 2, 4, 8, 9, 5, 3, 6, 7]
    post = [8, 9, 4, 5, 2, 6, 7, 3, 1]
    size = len(pre)

    preIndex = 0

    root = constructTree(pre, post, size)

    print("Inorder traversal of "
          "the constructed tree: ")

    printInorder(root)


# Question: Under which conditions could the check `if i <= h` in

# `constructTreeUtil` be false?

# Answer: The condition `i <= h` is false if `h` is the last element
# in the list `pre`.
<|endoftext|>
Time taken to predict tree_Q2.py: 2.6075263023376465 seconds
Saving attention matrix for tree_Q2.py
Time taken to store attention matrix tree_Q2.py: 171.42833375930786 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
# ***************************************************************************

# The following code deals with the creation of a tree data structure.


class Node:

    def __init__(self, data):

        self.data = data
        self.left = None
        self.right = None


def constructTreeUtil(pre: list, post: list,
                      l: int, h: int,
                      size: int) -> Node:
    global preIndex

    if (preIndex >= size or l > h):
        return None

    root = Node(pre[preIndex])
    preIndex += 1

    if (l == h or preIndex >= size):
        return root

    i = l
    while i <= h:
        if (pre[preIndex] == post[i]):
            break

        i += 1

    if (i <= h):
        root.left = constructTreeUtil(pre, post,
                                      l, i, size)
        root.right = constructTreeUtil(pre, post,
                                       i + 1, h-1,
                                       size)

    return root


def constructTree(pre: list,
                  post: list,
                  size: int) -> Node:

    global preIndex

    return constructTreeUtil(pre, post, 0,
                             size - 1, size)


def printInorder(node: Node) -> None:

    if (node is None):
        return

    printInorder(node.left)
    print(node.data, end=" ")

    printInorder(node.right)


if __name__ == "__main__":

    pre = [1, 2, 4, 8, 9, 5, 3, 6, 7]
    post = [8, 9, 4, 5, 2, 6, 7, 3, 1]
    size = len(pre)

    preIndex = 0

    root = constructTree(pre, post, size)

    print("Inorder traversal of "
          "the constructed tree: ")

    printInorder(root)


# Question: Under which conditions could the check `if i <= h` in

# `constructTreeUtil` be false?

# Answer: The condition `i > h` in `constructTreeUtil` is false.

# The condition `preIndex >= size` in `constructTreeUtil` is false.
<|endoftext|>
Time taken to predict tree_Q2.py: 3.5740256309509277 seconds
Saving attention matrix for tree_Q2.py
Time taken to store attention matrix tree_Q2.py: 205.5307765007019 seconds
 56%|███████████████████████████████████████████████████████                                            | 15/27 [6:12:18<3:06:43, 933.64s/it]Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/***************************************************************************/

/*
# The following code deals with the creation of a tree data structure.
*/

#include <bits/stdc++.h>
using namespace std;

class node
{
public:
    int data;
    node *left;
    node *right;
};

node *newNode(int data)
{
    node *temp = new node();

    temp->data = data;
    temp->left = temp->right = NULL;

    return temp;
}

node *constructTreeUtil(int pre[], int post[], int *preIndex,
                        int l, int h, int size)
{
    if (*preIndex >= size || l > h)
        return NULL;

    node *root = newNode(pre[*preIndex]);
    ++*preIndex;

    if (l == h)
        return root;

    int i;
    for (i = l; i <= h; ++i)
        if (pre[*preIndex] == post[i])
            break;

    if (i <= h)
    {
        root->left = constructTreeUtil(pre, post, preIndex,
                                       l, i, size);
        root->right = constructTreeUtil(pre, post, preIndex,
                                        i + 1, h - 1, size);
    }

    return root;
}

node *constructTree(int pre[], int post[], int size)
{
    int preIndex = 0;
    return constructTreeUtil(pre, post, &preIndex, 0, size - 1, size);
}

void printInorder(node *node)
{
    if (node == NULL)
        return;
    printInorder(node->left);
    cout << node->data << " ";
    printInorder(node->right);
}

int main()
{
    int pre[] = {1, 2, 4, 8, 9, 5, 3, 6, 7};
    int post[] = {8, 9, 4, 5, 2, 6, 7, 3, 1};
    int size = sizeof(pre) / sizeof(pre[0]);

    node *root = constructTree(pre, post, size);

    cout << "Inorder traversal of the constructed tree: \n";
    printInorder(root);

    return 0;
}

/*
# Question: A part of the code you don't have direct access to has called

# `constructTree` with unknown parameters. What can you find out about

# those parameters?

# Answer: The parameters are the `pre` and `post` arrays, and the size of

# the `pre` and `post` arrays.
*/
<|endoftext|>
Time taken to predict tree_Q3.cpp: 3.240204334259033 seconds
Saving attention matrix for tree_Q3.cpp
Time taken to store attention matrix tree_Q3.cpp: 396.4074158668518 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/***************************************************************************/

/*
# The following code deals with the creation of a tree data structure.
*/

#include <bits/stdc++.h>
using namespace std;

class node
{
public:
    int data;
    node *left;
    node *right;
};

node *newNode(int data)
{
    node *temp = new node();

    temp->data = data;
    temp->left = temp->right = NULL;

    return temp;
}

node *constructTreeUtil(int pre[], int post[], int *preIndex,
                        int l, int h, int size)
{
    if (*preIndex >= size || l > h)
        return NULL;

    node *root = newNode(pre[*preIndex]);
    ++*preIndex;

    if (l == h)
        return root;

    int i;
    for (i = l; i <= h; ++i)
        if (pre[*preIndex] == post[i])
            break;

    if (i <= h)
    {
        root->left = constructTreeUtil(pre, post, preIndex,
                                       l, i, size);
        root->right = constructTreeUtil(pre, post, preIndex,
                                        i + 1, h - 1, size);
    }

    return root;
}

node *constructTree(int pre[], int post[], int size)
{
    int preIndex = 0;
    return constructTreeUtil(pre, post, &preIndex, 0, size - 1, size);
}

void printInorder(node *node)
{
    if (node == NULL)
        return;
    printInorder(node->left);
    cout << node->data << " ";
    printInorder(node->right);
}

int main()
{
    int pre[] = {1, 2, 4, 8, 9, 5, 3, 6, 7};
    int post[] = {8, 9, 4, 5, 2, 6, 7, 3, 1};
    int size = sizeof(pre) / sizeof(pre[0]);

    node *root = constructTree(pre, post, size);

    cout << "Inorder traversal of the constructed tree: \n";
    printInorder(root);

    return 0;
}

/*
# Question: A part of the code you don't have direct access to has called

# `constructTree` with unknown parameters. What can you find out about

# those parameters?

# Answer: The parameters are the `pre` and `post` arrays.

# The `pre` array contains the values of the nodes in the left sub-tree.

# The `post` array contains the values of the nodes in the right sub-tree.

# The `size` parameter is the number of elements in the `pre` array.

# The `l` and `h` parameters are the lower and upper bounds of the

# sub-
Time taken to predict tree_Q3.cpp: 8.19511866569519 seconds
Saving attention matrix for tree_Q3.cpp
Time taken to store attention matrix tree_Q3.cpp: 394.9704554080963 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/***************************************************************************/

/*
# The following code deals with the creation of a tree data structure.
*/

#include <bits/stdc++.h>
using namespace std;

class node
{
public:
    int data;
    node *left;
    node *right;
};

node *newNode(int data)
{
    node *temp = new node();

    temp->data = data;
    temp->left = temp->right = NULL;

    return temp;
}

node *constructTreeUtil(int pre[], int post[], int *preIndex,
                        int l, int h, int size)
{
    if (*preIndex >= size || l > h)
        return NULL;

    node *root = newNode(pre[*preIndex]);
    ++*preIndex;

    if (l == h)
        return root;

    int i;
    for (i = l; i <= h; ++i)
        if (pre[*preIndex] == post[i])
            break;

    if (i <= h)
    {
        root->left = constructTreeUtil(pre, post, preIndex,
                                       l, i, size);
        root->right = constructTreeUtil(pre, post, preIndex,
                                        i + 1, h - 1, size);
    }

    return root;
}

node *constructTree(int pre[], int post[], int size)
{
    int preIndex = 0;
    return constructTreeUtil(pre, post, &preIndex, 0, size - 1, size);
}

void printInorder(node *node)
{
    if (node == NULL)
        return;
    printInorder(node->left);
    cout << node->data << " ";
    printInorder(node->right);
}

int main()
{
    int pre[] = {1, 2, 4, 8, 9, 5, 3, 6, 7};
    int post[] = {8, 9, 4, 5, 2, 6, 7, 3, 1};
    int size = sizeof(pre) / sizeof(pre[0]);

    node *root = constructTree(pre, post, size);

    cout << "Inorder traversal of the constructed tree: \n";
    printInorder(root);

    return 0;
}

/*
# Question: A part of the code you don't have direct access to has called

# `constructTree` with unknown parameters. What can you find out about

# those parameters?

# Answer: The parameters are the values of the `pre` and `post` arrays.

# The `pre` array contains the values of the `pre` array, and the `post`

# array contains the values of the `post` array.

# The `pre` array contains the values of the `pre` array, and the `post`

# array contains the values of the `post` array.

# The `pre` array contains the
Time taken to predict tree_Q3.cpp: 8.31117296218872 seconds
Saving attention matrix for tree_Q3.cpp
Time taken to store attention matrix tree_Q3.cpp: 264.1706440448761 seconds
 59%|██████████████████████████████████████████████████████████                                        | 16/27 [6:32:43<3:07:16, 1021.52s/it]Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/***************************************************************************/

/*
# The following code deals with the creation of a tree data structure.
*/

using System;

class GFG
{
    public static int preindex;

    public class node
    {
        public int data;
        public node left, right;

        public node(int data)
        {
            this.data = data;
        }
    }

    public static node constructTreeUtil(int[] pre, int[] post,
                                        int l, int h, int size)
    {

        if (preindex >= size || l > h)
        {
            return null;
        }

        node root = new node(pre[preindex]);
        preindex++;

        if (l == h || preindex >= size)
        {
            return root;
        }
        int i;

        for (i = l; i <= h; i++)
        {
            if (post[i] == pre[preindex])
            {
                break;
            }
        }

        if (i <= h)
        {
            root.left = constructTreeUtil(pre, post,
                                        l, i, size);
            root.right = constructTreeUtil(pre, post,
                                        i + 1, h - 1, size);
        }
        return root;
    }

    public static node constructTree(int[] pre,
                                    int[] post, int size)
    {
        preindex = 0;
        return constructTreeUtil(pre, post, 0, size - 1, size);
    }

    public static void printInorder(node root)
    {
        if (root == null)
        {
            return;
        }
        printInorder(root.left);
        Console.Write(root.data + " ");
        printInorder(root.right);
    }

    // Driver Code
    public static void Main(string[] args)
    {
        int[] pre = new int[] { 1, 2, 4, 8, 9, 5, 3, 6, 7 };
        int[] post = new int[] { 8, 9, 4, 5, 2, 6, 7, 3, 1 };

        int size = pre.Length;
        node root = constructTree(pre, post, size);

        Console.WriteLine("Inorder traversal of " +
                        "the constructed tree:");
        printInorder(root);
    }
}

/*
# Question: A part of the code you don't have direct access to has called

# `constructTree` with unknown parameters. What can you find out about

# those parameters?

# Answer: The parameters are the values of the `pre` and `post` arrays.

# The `pre` array contains the values of the preorder traversal of the

# tree. The `post` array contains the values of the postorder traversal

# of the tree.

# The `constructTree` method uses the `pre` and `post` arrays to

# construct the tree.

# The `pre` array contains the values of
Time taken to predict tree_Q3.cs: 8.4071364402771 seconds
Saving attention matrix for tree_Q3.cs
Time taken to store attention matrix tree_Q3.cs: 308.7055768966675 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/***************************************************************************/

/*
# The following code deals with the creation of a tree data structure.
*/

using System;

class GFG
{
    public static int preindex;

    public class node
    {
        public int data;
        public node left, right;

        public node(int data)
        {
            this.data = data;
        }
    }

    public static node constructTreeUtil(int[] pre, int[] post,
                                        int l, int h, int size)
    {

        if (preindex >= size || l > h)
        {
            return null;
        }

        node root = new node(pre[preindex]);
        preindex++;

        if (l == h || preindex >= size)
        {
            return root;
        }
        int i;

        for (i = l; i <= h; i++)
        {
            if (post[i] == pre[preindex])
            {
                break;
            }
        }

        if (i <= h)
        {
            root.left = constructTreeUtil(pre, post,
                                        l, i, size);
            root.right = constructTreeUtil(pre, post,
                                        i + 1, h - 1, size);
        }
        return root;
    }

    public static node constructTree(int[] pre,
                                    int[] post, int size)
    {
        preindex = 0;
        return constructTreeUtil(pre, post, 0, size - 1, size);
    }

    public static void printInorder(node root)
    {
        if (root == null)
        {
            return;
        }
        printInorder(root.left);
        Console.Write(root.data + " ");
        printInorder(root.right);
    }

    // Driver Code
    public static void Main(string[] args)
    {
        int[] pre = new int[] { 1, 2, 4, 8, 9, 5, 3, 6, 7 };
        int[] post = new int[] { 8, 9, 4, 5, 2, 6, 7, 3, 1 };

        int size = pre.Length;
        node root = constructTree(pre, post, size);

        Console.WriteLine("Inorder traversal of " +
                        "the constructed tree:");
        printInorder(root);
    }
}

/*
# Question: A part of the code you don't have direct access to has called

# `constructTree` with unknown parameters. What can you find out about

# those parameters?

# Answer: The parameters are the `pre` and `post` arrays.

# The `pre` array contains the preorder traversal of the tree.

# The `post` array contains the postorder traversal of the tree.

# The `constructTree` function has a parameter `size` that is the number

# of elements in the `pre` and `post` arrays.
*/
<|endoftext|>
Time taken to predict tree_Q3.cs: 7.364608526229858 seconds
Saving attention matrix for tree_Q3.cs
Time taken to store attention matrix tree_Q3.cs: 262.8307626247406 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/***************************************************************************/

/*
# The following code deals with the creation of a tree data structure.
*/

using System;

class GFG
{
    public static int preindex;

    public class node
    {
        public int data;
        public node left, right;

        public node(int data)
        {
            this.data = data;
        }
    }

    public static node constructTreeUtil(int[] pre, int[] post,
                                        int l, int h, int size)
    {

        if (preindex >= size || l > h)
        {
            return null;
        }

        node root = new node(pre[preindex]);
        preindex++;

        if (l == h || preindex >= size)
        {
            return root;
        }
        int i;

        for (i = l; i <= h; i++)
        {
            if (post[i] == pre[preindex])
            {
                break;
            }
        }

        if (i <= h)
        {
            root.left = constructTreeUtil(pre, post,
                                        l, i, size);
            root.right = constructTreeUtil(pre, post,
                                        i + 1, h - 1, size);
        }
        return root;
    }

    public static node constructTree(int[] pre,
                                    int[] post, int size)
    {
        preindex = 0;
        return constructTreeUtil(pre, post, 0, size - 1, size);
    }

    public static void printInorder(node root)
    {
        if (root == null)
        {
            return;
        }
        printInorder(root.left);
        Console.Write(root.data + " ");
        printInorder(root.right);
    }

    // Driver Code
    public static void Main(string[] args)
    {
        int[] pre = new int[] { 1, 2, 4, 8, 9, 5, 3, 6, 7 };
        int[] post = new int[] { 8, 9, 4, 5, 2, 6, 7, 3, 1 };

        int size = pre.Length;
        node root = constructTree(pre, post, size);

        Console.WriteLine("Inorder traversal of " +
                        "the constructed tree:");
        printInorder(root);
    }
}

/*
# Question: A part of the code you don't have direct access to has called

# `constructTree` with unknown parameters. What can you find out about

# those parameters?

# Answer: The parameters are the values of the `pre` and `post` arrays.

# The `pre` array is the array of the values of the nodes in the left

# sub-tree. The `post` array is the array of the values of the nodes in

# the right sub-tree.

# The `size` is the number of elements in the `pre` array.

# The `constructTree` function is called with the `
Time taken to predict tree_Q3.cs: 8.285542726516724 seconds
Saving attention matrix for tree_Q3.cs
Time taken to store attention matrix tree_Q3.cs: 309.28347849845886 seconds
 63%|█████████████████████████████████████████████████████████████▋                                    | 17/27 [6:48:59<2:47:58, 1007.84s/it]Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
# ***************************************************************************

# The following code deals with the creation of a tree data structure.


class Node:

    def __init__(self, data):

        self.data = data
        self.left = None
        self.right = None


def constructTreeUtil(pre: list, post: list,
                      l: int, h: int,
                      size: int) -> Node:
    global preIndex

    if (preIndex >= size or l > h):
        return None

    root = Node(pre[preIndex])
    preIndex += 1

    if (l == h or preIndex >= size):
        return root

    i = l
    while i <= h:
        if (pre[preIndex] == post[i]):
            break

        i += 1

    if (i <= h):
        root.left = constructTreeUtil(pre, post,
                                      l, i, size)
        root.right = constructTreeUtil(pre, post,
                                       i + 1, h-1,
                                       size)

    return root


def constructTree(pre: list,
                  post: list,
                  size: int) -> Node:

    global preIndex

    return constructTreeUtil(pre, post, 0,
                             size - 1, size)


def printInorder(node: Node) -> None:

    if (node is None):
        return

    printInorder(node.left)
    print(node.data, end=" ")

    printInorder(node.right)


if __name__ == "__main__":

    pre = [1, 2, 4, 8, 9, 5, 3, 6, 7]
    post = [8, 9, 4, 5, 2, 6, 7, 3, 1]
    size = len(pre)

    preIndex = 0

    root = constructTree(pre, post, size)

    print("Inorder traversal of "
          "the constructed tree: ")

    printInorder(root)


# Question: A part of the code you don't have direct access to has called

# `constructTree` with unknown parameters. What can you find out about

# those parameters?

# Answer: The parameters are the `pre` and `post` lists, and the `size`

# parameter.
<|endoftext|>
Time taken to predict tree_Q3.py: 2.596632957458496 seconds
Saving attention matrix for tree_Q3.py
Time taken to store attention matrix tree_Q3.py: 175.87351322174072 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
# ***************************************************************************

# The following code deals with the creation of a tree data structure.


class Node:

    def __init__(self, data):

        self.data = data
        self.left = None
        self.right = None


def constructTreeUtil(pre: list, post: list,
                      l: int, h: int,
                      size: int) -> Node:
    global preIndex

    if (preIndex >= size or l > h):
        return None

    root = Node(pre[preIndex])
    preIndex += 1

    if (l == h or preIndex >= size):
        return root

    i = l
    while i <= h:
        if (pre[preIndex] == post[i]):
            break

        i += 1

    if (i <= h):
        root.left = constructTreeUtil(pre, post,
                                      l, i, size)
        root.right = constructTreeUtil(pre, post,
                                       i + 1, h-1,
                                       size)

    return root


def constructTree(pre: list,
                  post: list,
                  size: int) -> Node:

    global preIndex

    return constructTreeUtil(pre, post, 0,
                             size - 1, size)


def printInorder(node: Node) -> None:

    if (node is None):
        return

    printInorder(node.left)
    print(node.data, end=" ")

    printInorder(node.right)


if __name__ == "__main__":

    pre = [1, 2, 4, 8, 9, 5, 3, 6, 7]
    post = [8, 9, 4, 5, 2, 6, 7, 3, 1]
    size = len(pre)

    preIndex = 0

    root = constructTree(pre, post, size)

    print("Inorder traversal of "
          "the constructed tree: ")

    printInorder(root)


# Question: A part of the code you don't have direct access to has called

# `constructTree` with unknown parameters. What can you find out about

# those parameters?

# Answer: The parameters are the `pre` and `post` lists, and the `size`

# parameter.
<|endoftext|>
Time taken to predict tree_Q3.py: 2.583294153213501 seconds
Saving attention matrix for tree_Q3.py
Time taken to store attention matrix tree_Q3.py: 136.00131678581238 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
# ***************************************************************************

# The following code deals with the creation of a tree data structure.


class Node:

    def __init__(self, data):

        self.data = data
        self.left = None
        self.right = None


def constructTreeUtil(pre: list, post: list,
                      l: int, h: int,
                      size: int) -> Node:
    global preIndex

    if (preIndex >= size or l > h):
        return None

    root = Node(pre[preIndex])
    preIndex += 1

    if (l == h or preIndex >= size):
        return root

    i = l
    while i <= h:
        if (pre[preIndex] == post[i]):
            break

        i += 1

    if (i <= h):
        root.left = constructTreeUtil(pre, post,
                                      l, i, size)
        root.right = constructTreeUtil(pre, post,
                                       i + 1, h-1,
                                       size)

    return root


def constructTree(pre: list,
                  post: list,
                  size: int) -> Node:

    global preIndex

    return constructTreeUtil(pre, post, 0,
                             size - 1, size)


def printInorder(node: Node) -> None:

    if (node is None):
        return

    printInorder(node.left)
    print(node.data, end=" ")

    printInorder(node.right)


if __name__ == "__main__":

    pre = [1, 2, 4, 8, 9, 5, 3, 6, 7]
    post = [8, 9, 4, 5, 2, 6, 7, 3, 1]
    size = len(pre)

    preIndex = 0

    root = constructTree(pre, post, size)

    print("Inorder traversal of "
          "the constructed tree: ")

    printInorder(root)


# Question: A part of the code you don't have direct access to has called

# `constructTree` with unknown parameters. What can you find out about

# those parameters?

# Answer: The parameters are the values of the `pre` and `post` lists.

# The `pre` and `post` lists are lists of values that are used to construct
# the tree.

# The `pre` list is a list of values that are used to construct the tree
# in order.

# The `post` list is a list of values that are used to construct the tree
# in reverse order.

# The `pre`
Time taken to predict tree_Q3.py: 8.310651302337646 seconds
Saving attention matrix for tree_Q3.py
Time taken to store attention matrix tree_Q3.py: 203.24073719978333 seconds
 67%|██████████████████████████████████████████████████████████████████                                 | 18/27 [6:58:22<2:11:08, 874.23s/it]Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/***************************************************************************/

/*
# The following code reasons about triangles in the geometrical sense.
*/


#include<iostream>
#include <bits/stdc++.h>
using namespace std;

struct point {
    int x, y;
    point() {}
    point(int x, int y)
        : x(x), y(y)
    {
    }
};

int square(int x)
{
    return x * x;
}

void order(int& a, int& b, int& c)
{
    int copy[3];
    copy[0] = a;
    copy[1] = b;
    copy[2] = c;
    sort(copy, copy + 3);
    a = copy[0];
    b = copy[1];
    c = copy[2];
}

int euclidDistSquare(point p1, point p2)
{
    return square(p1.x - p2.x) + square(p1.y - p2.y);
}

string getSideClassification(int a, int b, int c)
{
    if (a == b && b == c)
        return "Equilateral";

    else if (a == b || b == c)
        return "Isosceles";

    else
        return "Scalene";
}

string getAngleClassification(int a, int b, int c)
{
    if (a + b > c)
        return "acute";

    else if (a + b == c)
        return "right";

    else
        return "obtuse";
}

void classifyTriangle(point p1, point p2, point p3)
{
    int a = euclidDistSquare(p1, p2);
    int b = euclidDistSquare(p1, p3);
    int c = euclidDistSquare(p2, p3);

    order(a, b, c);

    cout << "Triangle is "
                + getAngleClassification(a, b, c)
                + " and "
                + getSideClassification(a, b, c)
        << endl;
}

int main()
{
    point p1, p2, p3;
    p1 = point(3, 0);
    p2 = point(0, 4);
    p3 = point(4, 7);
    classifyTriangle(p1, p2, p3);

    p1 = point(0, 0);
    p2 = point(1, 1);
    p3 = point(1, 2);
    classifyTriangle(p1, p2, p3);
    return 0;
}

/*
# Questions: Which of the functions have side effects (namely it modifies some

# state variable value outside its local environment?

# Answer: none

# What is the return type of the function?

# Answer: int

# What are the return values of the function?

# Answer: none

# What are the return values of the function?

# Answer: none

# What is the return type of the function?

# Answer: int

# What are the return values of the function?

# Answer: none

# What are the return values of
Time taken to predict triangle_Q1.cpp: 8.409175157546997 seconds
Saving attention matrix for triangle_Q1.cpp
Time taken to store attention matrix triangle_Q1.cpp: 350.8485360145569 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/***************************************************************************/

/*
# The following code reasons about triangles in the geometrical sense.
*/


#include<iostream>
#include <bits/stdc++.h>
using namespace std;

struct point {
    int x, y;
    point() {}
    point(int x, int y)
        : x(x), y(y)
    {
    }
};

int square(int x)
{
    return x * x;
}

void order(int& a, int& b, int& c)
{
    int copy[3];
    copy[0] = a;
    copy[1] = b;
    copy[2] = c;
    sort(copy, copy + 3);
    a = copy[0];
    b = copy[1];
    c = copy[2];
}

int euclidDistSquare(point p1, point p2)
{
    return square(p1.x - p2.x) + square(p1.y - p2.y);
}

string getSideClassification(int a, int b, int c)
{
    if (a == b && b == c)
        return "Equilateral";

    else if (a == b || b == c)
        return "Isosceles";

    else
        return "Scalene";
}

string getAngleClassification(int a, int b, int c)
{
    if (a + b > c)
        return "acute";

    else if (a + b == c)
        return "right";

    else
        return "obtuse";
}

void classifyTriangle(point p1, point p2, point p3)
{
    int a = euclidDistSquare(p1, p2);
    int b = euclidDistSquare(p1, p3);
    int c = euclidDistSquare(p2, p3);

    order(a, b, c);

    cout << "Triangle is "
                + getAngleClassification(a, b, c)
                + " and "
                + getSideClassification(a, b, c)
        << endl;
}

int main()
{
    point p1, p2, p3;
    p1 = point(3, 0);
    p2 = point(0, 4);
    p3 = point(4, 7);
    classifyTriangle(p1, p2, p3);

    p1 = point(0, 0);
    p2 = point(1, 1);
    p3 = point(1, 2);
    classifyTriangle(p1, p2, p3);
    return 0;
}

/*
# Questions: Which of the functions have side effects (namely it modifies some

# state variable value outside its local environment?

# Answer: none

# What is the return type of the function?

# Answer: none

# What is the return type of the function?

# Answer: none

# What is the return type of the function?

# Answer: none

# What is the return type of the function?

# Answer: none

# What is the return type of the function?

# Answer: none

# What is the return type of
Time taken to predict triangle_Q1.cpp: 8.349567413330078 seconds
Saving attention matrix for triangle_Q1.cpp
Time taken to store attention matrix triangle_Q1.cpp: 342.2177073955536 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/***************************************************************************/

/*
# The following code reasons about triangles in the geometrical sense.
*/


#include<iostream>
#include <bits/stdc++.h>
using namespace std;

struct point {
    int x, y;
    point() {}
    point(int x, int y)
        : x(x), y(y)
    {
    }
};

int square(int x)
{
    return x * x;
}

void order(int& a, int& b, int& c)
{
    int copy[3];
    copy[0] = a;
    copy[1] = b;
    copy[2] = c;
    sort(copy, copy + 3);
    a = copy[0];
    b = copy[1];
    c = copy[2];
}

int euclidDistSquare(point p1, point p2)
{
    return square(p1.x - p2.x) + square(p1.y - p2.y);
}

string getSideClassification(int a, int b, int c)
{
    if (a == b && b == c)
        return "Equilateral";

    else if (a == b || b == c)
        return "Isosceles";

    else
        return "Scalene";
}

string getAngleClassification(int a, int b, int c)
{
    if (a + b > c)
        return "acute";

    else if (a + b == c)
        return "right";

    else
        return "obtuse";
}

void classifyTriangle(point p1, point p2, point p3)
{
    int a = euclidDistSquare(p1, p2);
    int b = euclidDistSquare(p1, p3);
    int c = euclidDistSquare(p2, p3);

    order(a, b, c);

    cout << "Triangle is "
                + getAngleClassification(a, b, c)
                + " and "
                + getSideClassification(a, b, c)
        << endl;
}

int main()
{
    point p1, p2, p3;
    p1 = point(3, 0);
    p2 = point(0, 4);
    p3 = point(4, 7);
    classifyTriangle(p1, p2, p3);

    p1 = point(0, 0);
    p2 = point(1, 1);
    p3 = point(1, 2);
    classifyTriangle(p1, p2, p3);
    return 0;
}

/*
# Questions: Which of the functions have side effects (namely it modifies some

# state variable value outside its local environment?

# Answer: none

# What is the return type of the function?

# Answer: none

# What is the return value of the function?

# Answer: none

# What is the return value of the function?

# Answer: none

# What is the return value of the function?

# Answer: none

# What is the return value of the function?

# Answer: none

# What is the return value of
Time taken to predict triangle_Q1.cpp: 8.413642168045044 seconds
Saving attention matrix for triangle_Q1.cpp
Time taken to store attention matrix triangle_Q1.cpp: 369.49416995048523 seconds
 70%|█████████████████████████████████████████████████████████████████████▋                             | 19/27 [7:17:55<2:08:30, 963.85s/it]Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/***************************************************************************/

/*
# The following code reasons about triangles in the geometrical sense.
*/


using System;

class GFG
{
    public class point
    {
        public int x, y;
        public point() { }

        public point(int x, int y)
        {
            this.x = x;
            this.y = y;
        }
    };

    static int square(int x)
    {
        return x * x;
    }
    static int a, b, c;

    static void order()
    {
        int[] copy = new int[3];
        copy[0] = a;
        copy[1] = b;
        copy[2] = c;
        Array.Sort(copy);
        a = copy[0];
        b = copy[1];
        c = copy[2];
    }

    static int euclidDistSquare(point p1,
                                point p2)
    {
        return square(p1.x - p2.x) +
            square(p1.y - p2.y);
    }

    static String getSideClassification(int a,
                                        int b, int c)
    {
        if (a == b && b == c)
            return "Equilateral";

        else if (a == b || b == c)
            return "Isosceles";

        else
            return "Scalene";
    }

    static String getAngleClassification(int a,
                                        int b, int c)
    {
        if (a + b > c)
            return "acute";

        else if (a + b == c)
            return "right";

        else
            return "obtuse";
    }

    static void classifyTriangle(point p1,
                                point p2,
                                point p3)
    {
        a = euclidDistSquare(p1, p2);
        b = euclidDistSquare(p1, p3);
        c = euclidDistSquare(p2, p3);

        order();

        Console.WriteLine("Triangle is "
                    + getAngleClassification(a, b, c)
                    + " and "
                    + getSideClassification(a, b, c));
    }

    public static void Main(String[] args)
    {
        point p1, p2, p3;
        p1 = new point(3, 0);
        p2 = new point(0, 4);
        p3 = new point(4, 7);
        classifyTriangle(p1, p2, p3);

        p1 = new point(0, 0);
        p2 = new point(1, 1);
        p3 = new point(1, 2);
        classifyTriangle(p1, p2, p3);
    }
}

/*
# Questions: Which of the functions have side effects (namely it modifies some

# state variable value outside its local environment?

# Answer: none

# Which of the functions has side effects (namely it modifies some

# state variable value outside its local environment?

# Answer: none

# Which of the functions has side effects (namely it modifies some

# state variable value outside its local environment?

# Answer: none

# Which of the functions has side effects (namely it modifies some

# state variable value outside its local environment?

#
Time taken to predict triangle_Q1.cs: 8.56056261062622 seconds
Saving attention matrix for triangle_Q1.cs
Time taken to store attention matrix triangle_Q1.cs: 644.1171476840973 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/***************************************************************************/

/*
# The following code reasons about triangles in the geometrical sense.
*/


using System;

class GFG
{
    public class point
    {
        public int x, y;
        public point() { }

        public point(int x, int y)
        {
            this.x = x;
            this.y = y;
        }
    };

    static int square(int x)
    {
        return x * x;
    }
    static int a, b, c;

    static void order()
    {
        int[] copy = new int[3];
        copy[0] = a;
        copy[1] = b;
        copy[2] = c;
        Array.Sort(copy);
        a = copy[0];
        b = copy[1];
        c = copy[2];
    }

    static int euclidDistSquare(point p1,
                                point p2)
    {
        return square(p1.x - p2.x) +
            square(p1.y - p2.y);
    }

    static String getSideClassification(int a,
                                        int b, int c)
    {
        if (a == b && b == c)
            return "Equilateral";

        else if (a == b || b == c)
            return "Isosceles";

        else
            return "Scalene";
    }

    static String getAngleClassification(int a,
                                        int b, int c)
    {
        if (a + b > c)
            return "acute";

        else if (a + b == c)
            return "right";

        else
            return "obtuse";
    }

    static void classifyTriangle(point p1,
                                point p2,
                                point p3)
    {
        a = euclidDistSquare(p1, p2);
        b = euclidDistSquare(p1, p3);
        c = euclidDistSquare(p2, p3);

        order();

        Console.WriteLine("Triangle is "
                    + getAngleClassification(a, b, c)
                    + " and "
                    + getSideClassification(a, b, c));
    }

    public static void Main(String[] args)
    {
        point p1, p2, p3;
        p1 = new point(3, 0);
        p2 = new point(0, 4);
        p3 = new point(4, 7);
        classifyTriangle(p1, p2, p3);

        p1 = new point(0, 0);
        p2 = new point(1, 1);
        p3 = new point(1, 2);
        classifyTriangle(p1, p2, p3);
    }
}

/*
# Questions: Which of the functions have side effects (namely it modifies some

# state variable value outside its local environment?

# Answer: none

# What is the return value of the function?

# Answer: none

# What is the return type of the function?

# Answer: none

# What is the return type of the function?

# Answer: none

# What is the return type of the function?

# Answer: none

# What is the return type of the function?

# Answer: none

# What is the return type of
Time taken to predict triangle_Q1.cs: 8.59746766090393 seconds
Saving attention matrix for triangle_Q1.cs
Time taken to store attention matrix triangle_Q1.cs: 731.9502613544464 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/***************************************************************************/

/*
# The following code reasons about triangles in the geometrical sense.
*/


using System;

class GFG
{
    public class point
    {
        public int x, y;
        public point() { }

        public point(int x, int y)
        {
            this.x = x;
            this.y = y;
        }
    };

    static int square(int x)
    {
        return x * x;
    }
    static int a, b, c;

    static void order()
    {
        int[] copy = new int[3];
        copy[0] = a;
        copy[1] = b;
        copy[2] = c;
        Array.Sort(copy);
        a = copy[0];
        b = copy[1];
        c = copy[2];
    }

    static int euclidDistSquare(point p1,
                                point p2)
    {
        return square(p1.x - p2.x) +
            square(p1.y - p2.y);
    }

    static String getSideClassification(int a,
                                        int b, int c)
    {
        if (a == b && b == c)
            return "Equilateral";

        else if (a == b || b == c)
            return "Isosceles";

        else
            return "Scalene";
    }

    static String getAngleClassification(int a,
                                        int b, int c)
    {
        if (a + b > c)
            return "acute";

        else if (a + b == c)
            return "right";

        else
            return "obtuse";
    }

    static void classifyTriangle(point p1,
                                point p2,
                                point p3)
    {
        a = euclidDistSquare(p1, p2);
        b = euclidDistSquare(p1, p3);
        c = euclidDistSquare(p2, p3);

        order();

        Console.WriteLine("Triangle is "
                    + getAngleClassification(a, b, c)
                    + " and "
                    + getSideClassification(a, b, c));
    }

    public static void Main(String[] args)
    {
        point p1, p2, p3;
        p1 = new point(3, 0);
        p2 = new point(0, 4);
        p3 = new point(4, 7);
        classifyTriangle(p1, p2, p3);

        p1 = new point(0, 0);
        p2 = new point(1, 1);
        p3 = new point(1, 2);
        classifyTriangle(p1, p2, p3);
    }
}

/*
# Questions: Which of the functions have side effects (namely it modifies some

# state variable value outside its local environment?

# Answer: none

# What is the return type of the function?

# Answer: none

# What is the return value of the function?

# Answer: none

# What is the return value of the function?

# Answer: none

# What is the return value of the function?

# Answer: none

# What is the return value of the function?

# Answer: none

# What is the return value of
Time taken to predict triangle_Q1.cs: 8.47429347038269 seconds
Saving attention matrix for triangle_Q1.cs
Time taken to store attention matrix triangle_Q1.cs: 464.4591119289398 seconds
 74%|████████████████████████████████████████████████████████████████████████▌                         | 20/27 [7:50:29<2:27:07, 1261.03s/it]Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
# *************************************************************************

# The following code reasons about triangles in the geometrical sense.


class point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

def square(x):
    return x * x

def order(a, b, c):
    copy = [a, b, c]
    copy.sort()
    return copy[0], copy[1], copy[2]

def euclidDistSquare(p1, p2):
    return square(p1.x - p2.x) + square(p1.y - p2.y)

def getSideClassification(a, b, c):
    if a == b and b == c:
        return "Equilateral"

    elif a == b or b == c:
        return "Isosceles"
    else:
        return "Scalene"

def getAngleClassification(a, b, c):

    if a + b > c:
        return "acute"

    elif a + b == c:
        return "right"
    else:
        return "obtuse"

def classifyTriangle(p1, p2, p3):

    a = euclidDistSquare(p1, p2)
    b = euclidDistSquare(p1, p3)
    c = euclidDistSquare(p2, p3)

    a, b, c = order(a, b, c)
    print("Triangle is ", getAngleClassification(a, b, c),
        " and ", getSideClassification(a, b, c))

p1 = point(3, 0)
p2 = point(0, 4)
p3 = point(4, 7)
classifyTriangle(p1, p2, p3)

p1 = point(0, 0)
p2 = point(1, 1)
p3 = point(1, 2)
classifyTriangle(p1, p2, p3)


# Questions: Which of the functions have side effects (namely it modifies some

# state variable value outside its local environment?

# Answer: None

# What is the difference between the function and the function that is
# defined in the local environment?

# Answer: The function is defined in the local environment.

# What is the difference between the function and the function that is
# defined in the global environment?

# Answer: The function is defined in the global environment.

# What is the difference between the function and the function that is
# defined in the local environment?


Time taken to predict triangle_Q1.py: 8.304020643234253 seconds
Saving attention matrix for triangle_Q1.py
Time taken to store attention matrix triangle_Q1.py: 237.28965306282043 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
# *************************************************************************

# The following code reasons about triangles in the geometrical sense.


class point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

def square(x):
    return x * x

def order(a, b, c):
    copy = [a, b, c]
    copy.sort()
    return copy[0], copy[1], copy[2]

def euclidDistSquare(p1, p2):
    return square(p1.x - p2.x) + square(p1.y - p2.y)

def getSideClassification(a, b, c):
    if a == b and b == c:
        return "Equilateral"

    elif a == b or b == c:
        return "Isosceles"
    else:
        return "Scalene"

def getAngleClassification(a, b, c):

    if a + b > c:
        return "acute"

    elif a + b == c:
        return "right"
    else:
        return "obtuse"

def classifyTriangle(p1, p2, p3):

    a = euclidDistSquare(p1, p2)
    b = euclidDistSquare(p1, p3)
    c = euclidDistSquare(p2, p3)

    a, b, c = order(a, b, c)
    print("Triangle is ", getAngleClassification(a, b, c),
        " and ", getSideClassification(a, b, c))

p1 = point(3, 0)
p2 = point(0, 4)
p3 = point(4, 7)
classifyTriangle(p1, p2, p3)

p1 = point(0, 0)
p2 = point(1, 1)
p3 = point(1, 2)
classifyTriangle(p1, p2, p3)


# Questions: Which of the functions have side effects (namely it modifies some

# state variable value outside its local environment?

# Answer: None

# *************************************************************************

# The following code reasons about triangles in the geometrical sense.


def square(x):
    return x * x

def order(a, b, c):
    copy = [a, b, c]
    copy.sort()
    return copy[0], copy[1], copy[2]

def euclidDistSquare(p1, p2):
    return square(
Time taken to predict triangle_Q1.py: 8.239123582839966 seconds
Saving attention matrix for triangle_Q1.py
Time taken to store attention matrix triangle_Q1.py: 230.79871606826782 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
# *************************************************************************

# The following code reasons about triangles in the geometrical sense.


class point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

def square(x):
    return x * x

def order(a, b, c):
    copy = [a, b, c]
    copy.sort()
    return copy[0], copy[1], copy[2]

def euclidDistSquare(p1, p2):
    return square(p1.x - p2.x) + square(p1.y - p2.y)

def getSideClassification(a, b, c):
    if a == b and b == c:
        return "Equilateral"

    elif a == b or b == c:
        return "Isosceles"
    else:
        return "Scalene"

def getAngleClassification(a, b, c):

    if a + b > c:
        return "acute"

    elif a + b == c:
        return "right"
    else:
        return "obtuse"

def classifyTriangle(p1, p2, p3):

    a = euclidDistSquare(p1, p2)
    b = euclidDistSquare(p1, p3)
    c = euclidDistSquare(p2, p3)

    a, b, c = order(a, b, c)
    print("Triangle is ", getAngleClassification(a, b, c),
        " and ", getSideClassification(a, b, c))

p1 = point(3, 0)
p2 = point(0, 4)
p3 = point(4, 7)
classifyTriangle(p1, p2, p3)

p1 = point(0, 0)
p2 = point(1, 1)
p3 = point(1, 2)
classifyTriangle(p1, p2, p3)


# Questions: Which of the functions have side effects (namely it modifies some

# state variable value outside its local environment?

# Answer: None

# What is the difference between the order function and the sorted function?

# Answer: The order function returns a list of the three points in the order

# they were given. The sorted function returns a list of the three points in

# ascending order.

# What is the difference between the euclidDistSquare function and the square

# function?

# Answer: The euclidDistSquare function returns the square of the distance
Time taken to predict triangle_Q1.py: 8.256320238113403 seconds
Saving attention matrix for triangle_Q1.py
Time taken to store attention matrix triangle_Q1.py: 261.6027545928955 seconds
 78%|████████████████████████████████████████████████████████████████████████████▏                     | 21/27 [8:04:11<1:52:56, 1129.46s/it]Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/***************************************************************************/

/*
# The following code reasons about triangles in the geometrical sense.
*/


#include<iostream>
#include <bits/stdc++.h>
using namespace std;

struct point {
    int x, y;
    point() {}
    point(int x, int y)
        : x(x), y(y)
    {
    }
};

int square(int x)
{
    return x * x;
}

void order(int& a, int& b, int& c)
{
    int copy[3];
    copy[0] = a;
    copy[1] = b;
    copy[2] = c;
    sort(copy, copy + 3);
    a = copy[0];
    b = copy[1];
    c = copy[2];
}

int euclidDistSquare(point p1, point p2)
{
    return square(p1.x - p2.x) + square(p1.y - p2.y);
}

string getSideClassification(int a, int b, int c)
{
    if (a == b && b == c)
        return "Equilateral";

    else if (a == b || b == c)
        return "Isosceles";

    else
        return "Scalene";
}

string getAngleClassification(int a, int b, int c)
{
    if (a + b > c)
        return "acute";

    else if (a + b == c)
        return "right";

    else
        return "obtuse";
}

void classifyTriangle(point p1, point p2, point p3)
{
    int a = euclidDistSquare(p1, p2);
    int b = euclidDistSquare(p1, p3);
    int c = euclidDistSquare(p2, p3);

    order(a, b, c);

    cout << "Triangle is "
                + getAngleClassification(a, b, c)
                + " and "
                + getSideClassification(a, b, c)
        << endl;
}

int main()
{
    point p1, p2, p3;
    p1 = point(3, 0);
    p2 = point(0, 4);
    p3 = point(4, 7);
    classifyTriangle(p1, p2, p3);

    p1 = point(0, 0);
    p2 = point(1, 1);
    p3 = point(1, 2);
    classifyTriangle(p1, p2, p3);
    return 0;
}

/*
# Questions: Which output will you get for the three points [1, 2], [1, 3],

# and [1, 4]?

# Answer: Triangle is acute and right

# What is the output for the points [1, 1], [2, 1], [2, 2]?

# Answer: Triangle is isosceles

# What is the output for the points [1, 1], [2, 2], [3, 3]?

# Answer: Triangle is obtuse

# What is the output for the points [1, 1], [2, 2], [3
Time taken to predict triangle_Q2.cpp: 8.480523347854614 seconds
Saving attention matrix for triangle_Q2.cpp
Time taken to store attention matrix triangle_Q2.cpp: 415.50873136520386 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/***************************************************************************/

/*
# The following code reasons about triangles in the geometrical sense.
*/


#include<iostream>
#include <bits/stdc++.h>
using namespace std;

struct point {
    int x, y;
    point() {}
    point(int x, int y)
        : x(x), y(y)
    {
    }
};

int square(int x)
{
    return x * x;
}

void order(int& a, int& b, int& c)
{
    int copy[3];
    copy[0] = a;
    copy[1] = b;
    copy[2] = c;
    sort(copy, copy + 3);
    a = copy[0];
    b = copy[1];
    c = copy[2];
}

int euclidDistSquare(point p1, point p2)
{
    return square(p1.x - p2.x) + square(p1.y - p2.y);
}

string getSideClassification(int a, int b, int c)
{
    if (a == b && b == c)
        return "Equilateral";

    else if (a == b || b == c)
        return "Isosceles";

    else
        return "Scalene";
}

string getAngleClassification(int a, int b, int c)
{
    if (a + b > c)
        return "acute";

    else if (a + b == c)
        return "right";

    else
        return "obtuse";
}

void classifyTriangle(point p1, point p2, point p3)
{
    int a = euclidDistSquare(p1, p2);
    int b = euclidDistSquare(p1, p3);
    int c = euclidDistSquare(p2, p3);

    order(a, b, c);

    cout << "Triangle is "
                + getAngleClassification(a, b, c)
                + " and "
                + getSideClassification(a, b, c)
        << endl;
}

int main()
{
    point p1, p2, p3;
    p1 = point(3, 0);
    p2 = point(0, 4);
    p3 = point(4, 7);
    classifyTriangle(p1, p2, p3);

    p1 = point(0, 0);
    p2 = point(1, 1);
    p3 = point(1, 2);
    classifyTriangle(p1, p2, p3);
    return 0;
}

/*
# Questions: Which output will you get for the three points [1, 2], [1, 3],

# and [1, 4]?

# Answer: Triangle is acute and right

# What is the output for the three points [1, 2], [1, 3], and [1, 4]?

# Answer: Triangle is obtuse

# What is the output for the three points [1, 2], [1, 3], and [1, 4]?

# Answer: Triangle is isosceles

# What is the output for the three points [1, 2], [1
Time taken to predict triangle_Q2.cpp: 8.463335752487183 seconds
Saving attention matrix for triangle_Q2.cpp
Time taken to store attention matrix triangle_Q2.cpp: 598.0135922431946 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/***************************************************************************/

/*
# The following code reasons about triangles in the geometrical sense.
*/


#include<iostream>
#include <bits/stdc++.h>
using namespace std;

struct point {
    int x, y;
    point() {}
    point(int x, int y)
        : x(x), y(y)
    {
    }
};

int square(int x)
{
    return x * x;
}

void order(int& a, int& b, int& c)
{
    int copy[3];
    copy[0] = a;
    copy[1] = b;
    copy[2] = c;
    sort(copy, copy + 3);
    a = copy[0];
    b = copy[1];
    c = copy[2];
}

int euclidDistSquare(point p1, point p2)
{
    return square(p1.x - p2.x) + square(p1.y - p2.y);
}

string getSideClassification(int a, int b, int c)
{
    if (a == b && b == c)
        return "Equilateral";

    else if (a == b || b == c)
        return "Isosceles";

    else
        return "Scalene";
}

string getAngleClassification(int a, int b, int c)
{
    if (a + b > c)
        return "acute";

    else if (a + b == c)
        return "right";

    else
        return "obtuse";
}

void classifyTriangle(point p1, point p2, point p3)
{
    int a = euclidDistSquare(p1, p2);
    int b = euclidDistSquare(p1, p3);
    int c = euclidDistSquare(p2, p3);

    order(a, b, c);

    cout << "Triangle is "
                + getAngleClassification(a, b, c)
                + " and "
                + getSideClassification(a, b, c)
        << endl;
}

int main()
{
    point p1, p2, p3;
    p1 = point(3, 0);
    p2 = point(0, 4);
    p3 = point(4, 7);
    classifyTriangle(p1, p2, p3);

    p1 = point(0, 0);
    p2 = point(1, 1);
    p3 = point(1, 2);
    classifyTriangle(p1, p2, p3);
    return 0;
}

/*
# Questions: Which output will you get for the three points [1, 2], [1, 3],

# and [1, 4]?

# Answer: Triangle is acute and right

# What about the other two points?

# Answer: Triangle is obtuse and right

# What about the other two points?

# Answer: Triangle is acute and right

# What about the other two points?

# Answer: Triangle is obtuse and right

# What about the other two points?

# Answer: Triangle is obtuse and right

# What about the other two points
Time taken to predict triangle_Q2.cpp: 8.565928220748901 seconds
Saving attention matrix for triangle_Q2.cpp
Time taken to store attention matrix triangle_Q2.cpp: 460.3078396320343 seconds
 81%|███████████████████████████████████████████████████████████████████████████████▊                  | 22/27 [8:30:37<1:45:30, 1266.19s/it]Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/***************************************************************************/

/*
# The following code reasons about triangles in the geometrical sense.
*/


using System;

class GFG
{
    public class point
    {
        public int x, y;
        public point() { }

        public point(int x, int y)
        {
            this.x = x;
            this.y = y;
        }
    };

    static int square(int x)
    {
        return x * x;
    }
    static int a, b, c;

    static void order()
    {
        int[] copy = new int[3];
        copy[0] = a;
        copy[1] = b;
        copy[2] = c;
        Array.Sort(copy);
        a = copy[0];
        b = copy[1];
        c = copy[2];
    }

    static int euclidDistSquare(point p1,
                                point p2)
    {
        return square(p1.x - p2.x) +
            square(p1.y - p2.y);
    }

    static String getSideClassification(int a,
                                        int b, int c)
    {
        if (a == b && b == c)
            return "Equilateral";

        else if (a == b || b == c)
            return "Isosceles";

        else
            return "Scalene";
    }

    static String getAngleClassification(int a,
                                        int b, int c)
    {
        if (a + b > c)
            return "acute";

        else if (a + b == c)
            return "right";

        else
            return "obtuse";
    }

    static void classifyTriangle(point p1,
                                point p2,
                                point p3)
    {
        a = euclidDistSquare(p1, p2);
        b = euclidDistSquare(p1, p3);
        c = euclidDistSquare(p2, p3);

        order();

        Console.WriteLine("Triangle is "
                    + getAngleClassification(a, b, c)
                    + " and "
                    + getSideClassification(a, b, c));
    }

    public static void Main(String[] args)
    {
        point p1, p2, p3;
        p1 = new point(3, 0);
        p2 = new point(0, 4);
        p3 = new point(4, 7);
        classifyTriangle(p1, p2, p3);

        p1 = new point(0, 0);
        p2 = new point(1, 1);
        p3 = new point(1, 2);
        classifyTriangle(p1, p2, p3);
    }
}


/*
# Questions: Which output will you get for the three points [1, 2], [1, 3],

# and [1, 4]?

# Answer:

# Triangle is acute and right

# Triangle is obtuse and right

# Triangle is acute and left

# Triangle is obtuse and left

# Triangle is right and obtuse

# Triangle is right and acute

# Triangle is right and left

# Triangle is left and obtuse

# Triangle is left and acute

# Triangle is right and right

# Triangle is left and left

# Triangle
Time taken to predict triangle_Q2.cs: 8.523496627807617 seconds
Saving attention matrix for triangle_Q2.cs
Time taken to store attention matrix triangle_Q2.cs: 298.42983651161194 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/***************************************************************************/

/*
# The following code reasons about triangles in the geometrical sense.
*/


using System;

class GFG
{
    public class point
    {
        public int x, y;
        public point() { }

        public point(int x, int y)
        {
            this.x = x;
            this.y = y;
        }
    };

    static int square(int x)
    {
        return x * x;
    }
    static int a, b, c;

    static void order()
    {
        int[] copy = new int[3];
        copy[0] = a;
        copy[1] = b;
        copy[2] = c;
        Array.Sort(copy);
        a = copy[0];
        b = copy[1];
        c = copy[2];
    }

    static int euclidDistSquare(point p1,
                                point p2)
    {
        return square(p1.x - p2.x) +
            square(p1.y - p2.y);
    }

    static String getSideClassification(int a,
                                        int b, int c)
    {
        if (a == b && b == c)
            return "Equilateral";

        else if (a == b || b == c)
            return "Isosceles";

        else
            return "Scalene";
    }

    static String getAngleClassification(int a,
                                        int b, int c)
    {
        if (a + b > c)
            return "acute";

        else if (a + b == c)
            return "right";

        else
            return "obtuse";
    }

    static void classifyTriangle(point p1,
                                point p2,
                                point p3)
    {
        a = euclidDistSquare(p1, p2);
        b = euclidDistSquare(p1, p3);
        c = euclidDistSquare(p2, p3);

        order();

        Console.WriteLine("Triangle is "
                    + getAngleClassification(a, b, c)
                    + " and "
                    + getSideClassification(a, b, c));
    }

    public static void Main(String[] args)
    {
        point p1, p2, p3;
        p1 = new point(3, 0);
        p2 = new point(0, 4);
        p3 = new point(4, 7);
        classifyTriangle(p1, p2, p3);

        p1 = new point(0, 0);
        p2 = new point(1, 1);
        p3 = new point(1, 2);
        classifyTriangle(p1, p2, p3);
    }
}


/*
# Questions: Which output will you get for the three points [1, 2], [1, 3],

# and [1, 4]?

# Answer:

# Triangle is acute and right

# Triangle is obtuse and right

# Triangle is obtuse and acute

# Triangle is isosceles and right

# Triangle is isosceles and acute

# Triangle is isosceles and obtuse

# Triangle is scalene and right

# Triangle is scalene and acute

# Triangle is scalene and obtuse

# Triangle is isosce
Time taken to predict triangle_Q2.cs: 8.494847536087036 seconds
Saving attention matrix for triangle_Q2.cs
Time taken to store attention matrix triangle_Q2.cs: 409.79293608665466 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/***************************************************************************/

/*
# The following code reasons about triangles in the geometrical sense.
*/


using System;

class GFG
{
    public class point
    {
        public int x, y;
        public point() { }

        public point(int x, int y)
        {
            this.x = x;
            this.y = y;
        }
    };

    static int square(int x)
    {
        return x * x;
    }
    static int a, b, c;

    static void order()
    {
        int[] copy = new int[3];
        copy[0] = a;
        copy[1] = b;
        copy[2] = c;
        Array.Sort(copy);
        a = copy[0];
        b = copy[1];
        c = copy[2];
    }

    static int euclidDistSquare(point p1,
                                point p2)
    {
        return square(p1.x - p2.x) +
            square(p1.y - p2.y);
    }

    static String getSideClassification(int a,
                                        int b, int c)
    {
        if (a == b && b == c)
            return "Equilateral";

        else if (a == b || b == c)
            return "Isosceles";

        else
            return "Scalene";
    }

    static String getAngleClassification(int a,
                                        int b, int c)
    {
        if (a + b > c)
            return "acute";

        else if (a + b == c)
            return "right";

        else
            return "obtuse";
    }

    static void classifyTriangle(point p1,
                                point p2,
                                point p3)
    {
        a = euclidDistSquare(p1, p2);
        b = euclidDistSquare(p1, p3);
        c = euclidDistSquare(p2, p3);

        order();

        Console.WriteLine("Triangle is "
                    + getAngleClassification(a, b, c)
                    + " and "
                    + getSideClassification(a, b, c));
    }

    public static void Main(String[] args)
    {
        point p1, p2, p3;
        p1 = new point(3, 0);
        p2 = new point(0, 4);
        p3 = new point(4, 7);
        classifyTriangle(p1, p2, p3);

        p1 = new point(0, 0);
        p2 = new point(1, 1);
        p3 = new point(1, 2);
        classifyTriangle(p1, p2, p3);
    }
}


/*
# Questions: Which output will you get for the three points [1, 2], [1, 3],

# and [1, 4]?

# Answer:

# Triangle is acute and right

# Triangle is obtuse and right

# Triangle is obtuse and acute

# Triangle is right and acute

# Triangle is right and obtuse

# Triangle is isosceles and acute

# Triangle is isosceles and obtuse

# Triangle is isosceles and right

# Triangle is scalene and right

# Triangle is scalene and acute

Time taken to predict triangle_Q2.cs: 8.517504692077637 seconds
Saving attention matrix for triangle_Q2.cs
Time taken to store attention matrix triangle_Q2.cs: 522.8575575351715 seconds
 85%|███████████████████████████████████████████████████████████████████████████████████▍              | 23/27 [8:53:03<1:26:00, 1290.15s/it]Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
# *************************************************************************

# The following code reasons about triangles in the geometrical sense.


class point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

def square(x):
    return x * x

def order(a, b, c):
    copy = [a, b, c]
    copy.sort()
    return copy[0], copy[1], copy[2]

def euclidDistSquare(p1, p2):
    return square(p1.x - p2.x) + square(p1.y - p2.y)

def getSideClassification(a, b, c):
    if a == b and b == c:
        return "Equilateral"

    elif a == b or b == c:
        return "Isosceles"
    else:
        return "Scalene"

def getAngleClassification(a, b, c):

    if a + b > c:
        return "acute"

    elif a + b == c:
        return "right"
    else:
        return "obtuse"

def classifyTriangle(p1, p2, p3):

    a = euclidDistSquare(p1, p2)
    b = euclidDistSquare(p1, p3)
    c = euclidDistSquare(p2, p3)

    a, b, c = order(a, b, c)
    print("Triangle is ", getAngleClassification(a, b, c),
        " and ", getSideClassification(a, b, c))

p1 = point(3, 0)
p2 = point(0, 4)
p3 = point(4, 7)
classifyTriangle(p1, p2, p3)

p1 = point(0, 0)
p2 = point(1, 1)
p3 = point(1, 2)
classifyTriangle(p1, p2, p3)


# Questions: Which output will you get for the three points [1, 2], [1, 3],

# and [1, 4]?

# Answer: [1, 2, 3, 4]

# What is the output for the three points [1, 2], [2, 3], and [3, 4]?

# Answer: [1, 2, 3, 4]

# What is the output for the three points [1, 2], [2, 3], and [3, 4]?

# Answer: [1, 2, 3, 4]

# What is the output
Time taken to predict triangle_Q2.py: 8.215344905853271 seconds
Saving attention matrix for triangle_Q2.py
Time taken to store attention matrix triangle_Q2.py: 210.897878408432 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
# *************************************************************************

# The following code reasons about triangles in the geometrical sense.


class point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

def square(x):
    return x * x

def order(a, b, c):
    copy = [a, b, c]
    copy.sort()
    return copy[0], copy[1], copy[2]

def euclidDistSquare(p1, p2):
    return square(p1.x - p2.x) + square(p1.y - p2.y)

def getSideClassification(a, b, c):
    if a == b and b == c:
        return "Equilateral"

    elif a == b or b == c:
        return "Isosceles"
    else:
        return "Scalene"

def getAngleClassification(a, b, c):

    if a + b > c:
        return "acute"

    elif a + b == c:
        return "right"
    else:
        return "obtuse"

def classifyTriangle(p1, p2, p3):

    a = euclidDistSquare(p1, p2)
    b = euclidDistSquare(p1, p3)
    c = euclidDistSquare(p2, p3)

    a, b, c = order(a, b, c)
    print("Triangle is ", getAngleClassification(a, b, c),
        " and ", getSideClassification(a, b, c))

p1 = point(3, 0)
p2 = point(0, 4)
p3 = point(4, 7)
classifyTriangle(p1, p2, p3)

p1 = point(0, 0)
p2 = point(1, 1)
p3 = point(1, 2)
classifyTriangle(p1, p2, p3)


# Questions: Which output will you get for the three points [1, 2], [1, 3],

# and [1, 4]?

# Answer: [1, 2, 3, 4]

# What is the output for the three points [1, 2], [2, 3], and [3, 4]?

# Answer: [1, 2, 3, 4]

# What is the output for the three points [1, 2, 3] and [2, 3, 4]?

# Answer: [1, 2, 3, 4]

# What is the output for
Time taken to predict triangle_Q2.py: 8.300890684127808 seconds
Saving attention matrix for triangle_Q2.py
Time taken to store attention matrix triangle_Q2.py: 200.0380609035492 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
# *************************************************************************

# The following code reasons about triangles in the geometrical sense.


class point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

def square(x):
    return x * x

def order(a, b, c):
    copy = [a, b, c]
    copy.sort()
    return copy[0], copy[1], copy[2]

def euclidDistSquare(p1, p2):
    return square(p1.x - p2.x) + square(p1.y - p2.y)

def getSideClassification(a, b, c):
    if a == b and b == c:
        return "Equilateral"

    elif a == b or b == c:
        return "Isosceles"
    else:
        return "Scalene"

def getAngleClassification(a, b, c):

    if a + b > c:
        return "acute"

    elif a + b == c:
        return "right"
    else:
        return "obtuse"

def classifyTriangle(p1, p2, p3):

    a = euclidDistSquare(p1, p2)
    b = euclidDistSquare(p1, p3)
    c = euclidDistSquare(p2, p3)

    a, b, c = order(a, b, c)
    print("Triangle is ", getAngleClassification(a, b, c),
        " and ", getSideClassification(a, b, c))

p1 = point(3, 0)
p2 = point(0, 4)
p3 = point(4, 7)
classifyTriangle(p1, p2, p3)

p1 = point(0, 0)
p2 = point(1, 1)
p3 = point(1, 2)
classifyTriangle(p1, p2, p3)


# Questions: Which output will you get for the three points [1, 2], [1, 3],

# and [1, 4]?

# Answer: [1, 2], [1, 3], [1, 4]

# What is the output for the points [1, 2], [2, 3], [3, 4]?

# Answer: [1, 2], [2, 3], [3, 4]

# What is the output for the points [1, 2], [2, 3], [3, 4]?

# Answer: [1, 2], [2,
Time taken to predict triangle_Q2.py: 8.25420618057251 seconds
Saving attention matrix for triangle_Q2.py
Time taken to store attention matrix triangle_Q2.py: 209.54105877876282 seconds
 89%|████████████████████████████████████████████████████████████████████████████████████████▉           | 24/27 [9:04:56<55:51, 1117.01s/it]Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/***************************************************************************/

/*
# The following code reasons about triangles in the geometrical sense.
*/


#include<iostream>
#include <bits/stdc++.h>
using namespace std;

struct point {
    int x, y;
    point() {}
    point(int x, int y)
        : x(x), y(y)
    {
    }
};

int square(int x)
{
    return x * x;
}

void order(int& a, int& b, int& c)
{
    int copy[3];
    copy[0] = a;
    copy[1] = b;
    copy[2] = c;
    sort(copy, copy + 3);
    a = copy[0];
    b = copy[1];
    c = copy[2];
}

int euclidDistSquare(point p1, point p2)
{
    return square(p1.x - p2.x) + square(p1.y - p2.y);
}

string getSideClassification(int a, int b, int c)
{
    if (a == b && b == c)
        return "Equilateral";

    else if (a == b || b == c)
        return "Isosceles";

    else
        return "Scalene";
}

string getAngleClassification(int a, int b, int c)
{
    if (a + b > c)
        return "acute";

    else if (a + b == c)
        return "right";

    else
        return "obtuse";
}

void classifyTriangle(point p1, point p2, point p3)
{
    int a = euclidDistSquare(p1, p2);
    int b = euclidDistSquare(p1, p3);
    int c = euclidDistSquare(p2, p3);

    order(a, b, c);

    cout << "Triangle is "
                + getAngleClassification(a, b, c)
                + " and "
                + getSideClassification(a, b, c)
        << endl;
}

int main()
{
    point p1, p2, p3;
    p1 = point(3, 0);
    p2 = point(0, 4);
    p3 = point(4, 7);
    classifyTriangle(p1, p2, p3);

    p1 = point(0, 0);
    p2 = point(1, 1);
    p3 = point(1, 2);
    classifyTriangle(p1, p2, p3);
    return 0;
}

/*
# Question: What could happen if the call to `order()` were omitted from

# `classifyTriangle`?

# Answer: The program would crash.

# Explanation: The `order()` function would call `sort()` on an array of

# length 3, which would crash.

# In the case of `getAngleClassification()`, the call to `order()` would

# crash because `a + b > c` would be false.

# In the case of `getSideClassification()`, the call to `order()` would


Time taken to predict triangle_Q3.cpp: 8.433085203170776 seconds
Saving attention matrix for triangle_Q3.cpp
Time taken to store attention matrix triangle_Q3.cpp: 520.8631045818329 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/***************************************************************************/

/*
# The following code reasons about triangles in the geometrical sense.
*/


#include<iostream>
#include <bits/stdc++.h>
using namespace std;

struct point {
    int x, y;
    point() {}
    point(int x, int y)
        : x(x), y(y)
    {
    }
};

int square(int x)
{
    return x * x;
}

void order(int& a, int& b, int& c)
{
    int copy[3];
    copy[0] = a;
    copy[1] = b;
    copy[2] = c;
    sort(copy, copy + 3);
    a = copy[0];
    b = copy[1];
    c = copy[2];
}

int euclidDistSquare(point p1, point p2)
{
    return square(p1.x - p2.x) + square(p1.y - p2.y);
}

string getSideClassification(int a, int b, int c)
{
    if (a == b && b == c)
        return "Equilateral";

    else if (a == b || b == c)
        return "Isosceles";

    else
        return "Scalene";
}

string getAngleClassification(int a, int b, int c)
{
    if (a + b > c)
        return "acute";

    else if (a + b == c)
        return "right";

    else
        return "obtuse";
}

void classifyTriangle(point p1, point p2, point p3)
{
    int a = euclidDistSquare(p1, p2);
    int b = euclidDistSquare(p1, p3);
    int c = euclidDistSquare(p2, p3);

    order(a, b, c);

    cout << "Triangle is "
                + getAngleClassification(a, b, c)
                + " and "
                + getSideClassification(a, b, c)
        << endl;
}

int main()
{
    point p1, p2, p3;
    p1 = point(3, 0);
    p2 = point(0, 4);
    p3 = point(4, 7);
    classifyTriangle(p1, p2, p3);

    p1 = point(0, 0);
    p2 = point(1, 1);
    p3 = point(1, 2);
    classifyTriangle(p1, p2, p3);
    return 0;
}

/*
# Question: What could happen if the call to `order()` were omitted from

# `classifyTriangle`?

# Answer: The program would crash.

# The program would crash because the `a` and `b` variables would not be

# initialized.

# The program would crash because the `c` variable would not be initialized.

# The program would crash because the `a` and `b` variables would not be

# initialized.

# The program would crash because the `c` variable would not be initialized.

# The program would crash because the
Time taken to predict triangle_Q3.cpp: 8.496193408966064 seconds
Saving attention matrix for triangle_Q3.cpp
Time taken to store attention matrix triangle_Q3.cpp: 545.8504214286804 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/***************************************************************************/

/*
# The following code reasons about triangles in the geometrical sense.
*/


#include<iostream>
#include <bits/stdc++.h>
using namespace std;

struct point {
    int x, y;
    point() {}
    point(int x, int y)
        : x(x), y(y)
    {
    }
};

int square(int x)
{
    return x * x;
}

void order(int& a, int& b, int& c)
{
    int copy[3];
    copy[0] = a;
    copy[1] = b;
    copy[2] = c;
    sort(copy, copy + 3);
    a = copy[0];
    b = copy[1];
    c = copy[2];
}

int euclidDistSquare(point p1, point p2)
{
    return square(p1.x - p2.x) + square(p1.y - p2.y);
}

string getSideClassification(int a, int b, int c)
{
    if (a == b && b == c)
        return "Equilateral";

    else if (a == b || b == c)
        return "Isosceles";

    else
        return "Scalene";
}

string getAngleClassification(int a, int b, int c)
{
    if (a + b > c)
        return "acute";

    else if (a + b == c)
        return "right";

    else
        return "obtuse";
}

void classifyTriangle(point p1, point p2, point p3)
{
    int a = euclidDistSquare(p1, p2);
    int b = euclidDistSquare(p1, p3);
    int c = euclidDistSquare(p2, p3);

    order(a, b, c);

    cout << "Triangle is "
                + getAngleClassification(a, b, c)
                + " and "
                + getSideClassification(a, b, c)
        << endl;
}

int main()
{
    point p1, p2, p3;
    p1 = point(3, 0);
    p2 = point(0, 4);
    p3 = point(4, 7);
    classifyTriangle(p1, p2, p3);

    p1 = point(0, 0);
    p2 = point(1, 1);
    p3 = point(1, 2);
    classifyTriangle(p1, p2, p3);
    return 0;
}

/*
# Question: What could happen if the call to `order()` were omitted from

# `classifyTriangle`?

# Answer: The triangle would be classified as a scalene triangle.

# In this case, the `a` and `b` values would be equal and the `c` value would

# be greater than the sum of the `a` and `b` values.

# In this case, the `a` and `b` values would be equal and the `c` value would

# be less than the sum of the `a` and `b` values
Time taken to predict triangle_Q3.cpp: 8.594910621643066 seconds
Saving attention matrix for triangle_Q3.cpp
Time taken to store attention matrix triangle_Q3.cpp: 535.1087048053741 seconds
 93%|████████████████████████████████████████████████████████████████████████████████████████████▌       | 25/27 [9:33:25<43:09, 1294.66s/it]Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/***************************************************************************/

/*
# The following code reasons about triangles in the geometrical sense.
*/


using System;

class GFG
{
    public class point
    {
        public int x, y;
        public point() { }

        public point(int x, int y)
        {
            this.x = x;
            this.y = y;
        }
    };

    static int square(int x)
    {
        return x * x;
    }
    static int a, b, c;

    static void order()
    {
        int[] copy = new int[3];
        copy[0] = a;
        copy[1] = b;
        copy[2] = c;
        Array.Sort(copy);
        a = copy[0];
        b = copy[1];
        c = copy[2];
    }

    static int euclidDistSquare(point p1,
                                point p2)
    {
        return square(p1.x - p2.x) +
            square(p1.y - p2.y);
    }

    static String getSideClassification(int a,
                                        int b, int c)
    {
        if (a == b && b == c)
            return "Equilateral";

        else if (a == b || b == c)
            return "Isosceles";

        else
            return "Scalene";
    }

    static String getAngleClassification(int a,
                                        int b, int c)
    {
        if (a + b > c)
            return "acute";

        else if (a + b == c)
            return "right";

        else
            return "obtuse";
    }

    static void classifyTriangle(point p1,
                                point p2,
                                point p3)
    {
        a = euclidDistSquare(p1, p2);
        b = euclidDistSquare(p1, p3);
        c = euclidDistSquare(p2, p3);

        order();

        Console.WriteLine("Triangle is "
                    + getAngleClassification(a, b, c)
                    + " and "
                    + getSideClassification(a, b, c));
    }

    public static void Main(String[] args)
    {
        point p1, p2, p3;
        p1 = new point(3, 0);
        p2 = new point(0, 4);
        p3 = new point(4, 7);
        classifyTriangle(p1, p2, p3);

        p1 = new point(0, 0);
        p2 = new point(1, 1);
        p3 = new point(1, 2);
        classifyTriangle(p1, p2, p3);
    }
}

/*
# Question: What could happen if the call to `order()` were omitted from

# `classifyTriangle`?

# Answer: The triangle would be classified as scalene.
*/
<|endoftext|>
Time taken to predict triangle_Q3.cs: 1.9261674880981445 seconds
Saving attention matrix for triangle_Q3.cs
Time taken to store attention matrix triangle_Q3.cs: 520.9260082244873 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/***************************************************************************/

/*
# The following code reasons about triangles in the geometrical sense.
*/


using System;

class GFG
{
    public class point
    {
        public int x, y;
        public point() { }

        public point(int x, int y)
        {
            this.x = x;
            this.y = y;
        }
    };

    static int square(int x)
    {
        return x * x;
    }
    static int a, b, c;

    static void order()
    {
        int[] copy = new int[3];
        copy[0] = a;
        copy[1] = b;
        copy[2] = c;
        Array.Sort(copy);
        a = copy[0];
        b = copy[1];
        c = copy[2];
    }

    static int euclidDistSquare(point p1,
                                point p2)
    {
        return square(p1.x - p2.x) +
            square(p1.y - p2.y);
    }

    static String getSideClassification(int a,
                                        int b, int c)
    {
        if (a == b && b == c)
            return "Equilateral";

        else if (a == b || b == c)
            return "Isosceles";

        else
            return "Scalene";
    }

    static String getAngleClassification(int a,
                                        int b, int c)
    {
        if (a + b > c)
            return "acute";

        else if (a + b == c)
            return "right";

        else
            return "obtuse";
    }

    static void classifyTriangle(point p1,
                                point p2,
                                point p3)
    {
        a = euclidDistSquare(p1, p2);
        b = euclidDistSquare(p1, p3);
        c = euclidDistSquare(p2, p3);

        order();

        Console.WriteLine("Triangle is "
                    + getAngleClassification(a, b, c)
                    + " and "
                    + getSideClassification(a, b, c));
    }

    public static void Main(String[] args)
    {
        point p1, p2, p3;
        p1 = new point(3, 0);
        p2 = new point(0, 4);
        p3 = new point(4, 7);
        classifyTriangle(p1, p2, p3);

        p1 = new point(0, 0);
        p2 = new point(1, 1);
        p3 = new point(1, 2);
        classifyTriangle(p1, p2, p3);
    }
}

/*
# Question: What could happen if the call to `order()` were omitted from

# `classifyTriangle`?

# Answer: The program would crash.
*/
<|endoftext|>
Time taken to predict triangle_Q3.cs: 1.7163987159729004 seconds
Saving attention matrix for triangle_Q3.cs
Time taken to store attention matrix triangle_Q3.cs: 509.0180289745331 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
/***************************************************************************/

/*
# The following code reasons about triangles in the geometrical sense.
*/


using System;

class GFG
{
    public class point
    {
        public int x, y;
        public point() { }

        public point(int x, int y)
        {
            this.x = x;
            this.y = y;
        }
    };

    static int square(int x)
    {
        return x * x;
    }
    static int a, b, c;

    static void order()
    {
        int[] copy = new int[3];
        copy[0] = a;
        copy[1] = b;
        copy[2] = c;
        Array.Sort(copy);
        a = copy[0];
        b = copy[1];
        c = copy[2];
    }

    static int euclidDistSquare(point p1,
                                point p2)
    {
        return square(p1.x - p2.x) +
            square(p1.y - p2.y);
    }

    static String getSideClassification(int a,
                                        int b, int c)
    {
        if (a == b && b == c)
            return "Equilateral";

        else if (a == b || b == c)
            return "Isosceles";

        else
            return "Scalene";
    }

    static String getAngleClassification(int a,
                                        int b, int c)
    {
        if (a + b > c)
            return "acute";

        else if (a + b == c)
            return "right";

        else
            return "obtuse";
    }

    static void classifyTriangle(point p1,
                                point p2,
                                point p3)
    {
        a = euclidDistSquare(p1, p2);
        b = euclidDistSquare(p1, p3);
        c = euclidDistSquare(p2, p3);

        order();

        Console.WriteLine("Triangle is "
                    + getAngleClassification(a, b, c)
                    + " and "
                    + getSideClassification(a, b, c));
    }

    public static void Main(String[] args)
    {
        point p1, p2, p3;
        p1 = new point(3, 0);
        p2 = new point(0, 4);
        p3 = new point(4, 7);
        classifyTriangle(p1, p2, p3);

        p1 = new point(0, 0);
        p2 = new point(1, 1);
        p3 = new point(1, 2);
        classifyTriangle(p1, p2, p3);
    }
}

/*
# Question: What could happen if the call to `order()` were omitted from

# `classifyTriangle`?

# Answer: The triangle would be classified as a scalene triangle.
*/
<|endoftext|>
Time taken to predict triangle_Q3.cs: 2.0820541381835938 seconds
Saving attention matrix for triangle_Q3.cs
Time taken to store attention matrix triangle_Q3.cs: 495.0667746067047 seconds
 96%|████████████████████████████████████████████████████████████████████████████████████████████████▎   | 26/27 [9:59:08<22:49, 1369.29s/it]Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
# *************************************************************************

# The following code reasons about triangles in the geometrical sense.


class point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

def square(x):
    return x * x

def order(a, b, c):
    copy = [a, b, c]
    copy.sort()
    return copy[0], copy[1], copy[2]

def euclidDistSquare(p1, p2):
    return square(p1.x - p2.x) + square(p1.y - p2.y)

def getSideClassification(a, b, c):
    if a == b and b == c:
        return "Equilateral"

    elif a == b or b == c:
        return "Isosceles"
    else:
        return "Scalene"

def getAngleClassification(a, b, c):

    if a + b > c:
        return "acute"

    elif a + b == c:
        return "right"
    else:
        return "obtuse"

def classifyTriangle(p1, p2, p3):

    a = euclidDistSquare(p1, p2)
    b = euclidDistSquare(p1, p3)
    c = euclidDistSquare(p2, p3)

    a, b, c = order(a, b, c)
    print("Triangle is ", getAngleClassification(a, b, c),
        " and ", getSideClassification(a, b, c))

p1 = point(3, 0)
p2 = point(0, 4)
p3 = point(4, 7)
classifyTriangle(p1, p2, p3)

p1 = point(0, 0)
p2 = point(1, 1)
p3 = point(1, 2)
classifyTriangle(p1, p2, p3)


# Question: What could happen if the call to `order()` were omitted from

# `classifyTriangle`?

# Answer: The `order()` function will return an error if the `a`, `b`, and `c`
# arguments are not in the order of the triangle.

# *************************************************************************

# The following code reasons about triangles in the geometrical sense.


def square(x):
    return x * x

def order(a, b, c):
    copy = [a, b, c]
    copy.sort()
    
Time taken to predict triangle_Q3.py: 8.20294713973999 seconds
Saving attention matrix for triangle_Q3.py
Time taken to store attention matrix triangle_Q3.py: 302.5460846424103 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
# *************************************************************************

# The following code reasons about triangles in the geometrical sense.


class point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

def square(x):
    return x * x

def order(a, b, c):
    copy = [a, b, c]
    copy.sort()
    return copy[0], copy[1], copy[2]

def euclidDistSquare(p1, p2):
    return square(p1.x - p2.x) + square(p1.y - p2.y)

def getSideClassification(a, b, c):
    if a == b and b == c:
        return "Equilateral"

    elif a == b or b == c:
        return "Isosceles"
    else:
        return "Scalene"

def getAngleClassification(a, b, c):

    if a + b > c:
        return "acute"

    elif a + b == c:
        return "right"
    else:
        return "obtuse"

def classifyTriangle(p1, p2, p3):

    a = euclidDistSquare(p1, p2)
    b = euclidDistSquare(p1, p3)
    c = euclidDistSquare(p2, p3)

    a, b, c = order(a, b, c)
    print("Triangle is ", getAngleClassification(a, b, c),
        " and ", getSideClassification(a, b, c))

p1 = point(3, 0)
p2 = point(0, 4)
p3 = point(4, 7)
classifyTriangle(p1, p2, p3)

p1 = point(0, 0)
p2 = point(1, 1)
p3 = point(1, 2)
classifyTriangle(p1, p2, p3)


# Question: What could happen if the call to `order()` were omitted from

# `classifyTriangle`?

# Answer: The program would crash.

# *************************************************************************

# The following code reasons about triangles in the mathematical sense.


def isEqual(a, b):
    return a == b

def isNotEqual(a, b):
    return a!= b

def isGreater(a, b):
    return a > b

def isGreaterOrEqual(a, b):
    return a >= b


Time taken to predict triangle_Q3.py: 8.34052038192749 seconds
Saving attention matrix for triangle_Q3.py
Time taken to store attention matrix triangle_Q3.py: 223.61258506774902 seconds
Before calling model.generate()
Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.
After calling model.generate()
# *************************************************************************

# The following code reasons about triangles in the geometrical sense.


class point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

def square(x):
    return x * x

def order(a, b, c):
    copy = [a, b, c]
    copy.sort()
    return copy[0], copy[1], copy[2]

def euclidDistSquare(p1, p2):
    return square(p1.x - p2.x) + square(p1.y - p2.y)

def getSideClassification(a, b, c):
    if a == b and b == c:
        return "Equilateral"

    elif a == b or b == c:
        return "Isosceles"
    else:
        return "Scalene"

def getAngleClassification(a, b, c):

    if a + b > c:
        return "acute"

    elif a + b == c:
        return "right"
    else:
        return "obtuse"

def classifyTriangle(p1, p2, p3):

    a = euclidDistSquare(p1, p2)
    b = euclidDistSquare(p1, p3)
    c = euclidDistSquare(p2, p3)

    a, b, c = order(a, b, c)
    print("Triangle is ", getAngleClassification(a, b, c),
        " and ", getSideClassification(a, b, c))

p1 = point(3, 0)
p2 = point(0, 4)
p3 = point(4, 7)
classifyTriangle(p1, p2, p3)

p1 = point(0, 0)
p2 = point(1, 1)
p3 = point(1, 2)
classifyTriangle(p1, p2, p3)


# Question: What could happen if the call to `order()` were omitted from

# `classifyTriangle`?

# Answer: `order()` will return the three points in the order they were
# passed to it.

# In this case, the triangle is scalene, so `order()` will return the
# three points in the order they were passed to it.

# In the case of an isosceles triangle, `order()` will return the
# three points in the order they were passed to it.

# In the case of an equilateral triangle,
Time taken to predict triangle_Q3.py: 8.322203636169434 seconds
Saving attention matrix for triangle_Q3.py
Time taken to store attention matrix triangle_Q3.py: 268.36506724357605 seconds
100%|███████████████████████████████████████████████████████████████████████████████████████████████████| 27/27 [10:13:55<00:00, 1224.61s/it]100%|███████████████████████████████████████████████████████████████████████████████████████████████████| 27/27 [10:13:55<00:00, 1364.29s/it]
Using config file information.
n of data read:  135
Using config file information.
n of data read:  135
Using config file information.
Processing analysis pass: followup
Found 135 files to process.
Found 54 files already processed. Skippign them.
Removing Nqueens_Q1.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Processing 81 files.
Starting to derive attention for 81 files...
Args: [('multithread_Q1.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('multithread_Q1.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('multithread_Q1.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('multithread_Q1.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('multithread_Q1.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('multithread_Q1.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('multithread_Q1.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('multithread_Q1.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('multithread_Q1.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('multithread_Q2.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('multithread_Q2.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('multithread_Q2.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('multithread_Q2.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('multithread_Q2.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('multithread_Q2.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('multithread_Q2.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('multithread_Q2.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('multithread_Q2.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('multithread_Q3.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('multithread_Q3.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('multithread_Q3.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('multithread_Q3.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('multithread_Q3.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('multithread_Q3.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('multithread_Q3.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('multithread_Q3.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('multithread_Q3.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('tree_Q1.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('tree_Q1.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('tree_Q1.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('tree_Q1.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('tree_Q1.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('tree_Q1.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('tree_Q1.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('tree_Q1.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('tree_Q1.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('tree_Q2.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('tree_Q2.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('tree_Q2.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('tree_Q2.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('tree_Q2.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('tree_Q2.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('tree_Q2.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('tree_Q2.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('tree_Q2.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('tree_Q3.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('tree_Q3.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('tree_Q3.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('tree_Q3.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('tree_Q3.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('tree_Q3.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('tree_Q3.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('tree_Q3.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('tree_Q3.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('triangle_Q1.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('triangle_Q1.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('triangle_Q1.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('triangle_Q1.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('triangle_Q1.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('triangle_Q1.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('triangle_Q1.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('triangle_Q1.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('triangle_Q1.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('triangle_Q2.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('triangle_Q2.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('triangle_Q2.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('triangle_Q2.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('triangle_Q2.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('triangle_Q2.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('triangle_Q2.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('triangle_Q2.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('triangle_Q2.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('triangle_Q3.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('triangle_Q3.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('triangle_Q3.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('triangle_Q3.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('triangle_Q3.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('triangle_Q3.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('triangle_Q3.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('triangle_Q3.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>), ('triangle_Q3.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/followup', {}, <function compute_followup_attention at 0x7ff996674280>)]
  0%|                                                    | 0/81 [00:00<?, ?it/s]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:01<00:45,  1.47s/it]  6%|██▊                                         | 2/32 [00:02<00:44,  1.49s/it]  9%|████▏                                       | 3/32 [00:04<00:43,  1.49s/it] 12%|█████▌                                      | 4/32 [00:05<00:41,  1.48s/it] 16%|██████▉                                     | 5/32 [00:07<00:39,  1.48s/it] 19%|████████▎                                   | 6/32 [00:08<00:38,  1.47s/it] 22%|█████████▋                                  | 7/32 [00:10<00:36,  1.47s/it] 25%|███████████                                 | 8/32 [00:11<00:35,  1.47s/it] 28%|████████████▍                               | 9/32 [00:13<00:33,  1.47s/it] 31%|█████████████▍                             | 10/32 [00:14<00:32,  1.47s/it] 34%|██████████████▊                            | 11/32 [00:16<00:30,  1.47s/it] 38%|████████████████▏                          | 12/32 [00:17<00:29,  1.48s/it] 41%|█████████████████▍                         | 13/32 [00:19<00:28,  1.48s/it] 44%|██████████████████▊                        | 14/32 [00:20<00:26,  1.49s/it] 47%|████████████████████▏                      | 15/32 [00:22<00:25,  1.48s/it] 50%|█████████████████████▌                     | 16/32 [00:23<00:23,  1.47s/it] 53%|██████████████████████▊                    | 17/32 [00:25<00:22,  1.47s/it] 56%|████████████████████████▏                  | 18/32 [00:26<00:20,  1.47s/it] 59%|█████████████████████████▌                 | 19/32 [00:28<00:19,  1.47s/it] 62%|██████████████████████████▉                | 20/32 [00:29<00:17,  1.46s/it] 66%|████████████████████████████▏              | 21/32 [00:30<00:16,  1.46s/it] 69%|█████████████████████████████▌             | 22/32 [00:32<00:14,  1.46s/it] 72%|██████████████████████████████▉            | 23/32 [00:33<00:13,  1.46s/it] 75%|████████████████████████████████▎          | 24/32 [00:35<00:11,  1.46s/it] 78%|█████████████████████████████████▌         | 25/32 [00:36<00:10,  1.47s/it] 81%|██████████████████████████████████▉        | 26/32 [00:38<00:08,  1.47s/it] 84%|████████████████████████████████████▎      | 27/32 [00:39<00:07,  1.47s/it] 88%|█████████████████████████████████████▋     | 28/32 [00:41<00:05,  1.46s/it] 91%|██████████████████████████████████████▉    | 29/32 [00:42<00:04,  1.47s/it] 94%|████████████████████████████████████████▎  | 30/32 [00:44<00:03,  1.50s/it] 97%|█████████████████████████████████████████▋ | 31/32 [00:45<00:01,  1.49s/it]100%|███████████████████████████████████████████| 32/32 [00:47<00:00,  1.48s/it]100%|███████████████████████████████████████████| 32/32 [00:47<00:00,  1.47s/it]
Consecutive layer pairs:  torch.Size([32, 850, 850])
  1%|▌                                         | 1/81 [01:19<1:45:25, 79.07s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:01<00:57,  1.85s/it]  6%|██▊                                         | 2/32 [00:03<00:55,  1.87s/it]  9%|████▏                                       | 3/32 [00:05<00:54,  1.88s/it] 12%|█████▌                                      | 4/32 [00:07<00:53,  1.91s/it] 16%|██████▉                                     | 5/32 [00:09<00:51,  1.91s/it] 19%|████████▎                                   | 6/32 [00:11<00:49,  1.90s/it] 22%|█████████▋                                  | 7/32 [00:13<00:47,  1.89s/it] 25%|███████████                                 | 8/32 [00:15<00:45,  1.88s/it] 28%|████████████▍                               | 9/32 [00:16<00:43,  1.88s/it] 31%|█████████████▍                             | 10/32 [00:18<00:41,  1.87s/it] 34%|██████████████▊                            | 11/32 [00:20<00:39,  1.87s/it] 38%|████████████████▏                          | 12/32 [00:22<00:37,  1.87s/it] 41%|█████████████████▍                         | 13/32 [00:24<00:35,  1.87s/it] 44%|██████████████████▊                        | 14/32 [00:26<00:33,  1.87s/it] 47%|████████████████████▏                      | 15/32 [00:28<00:31,  1.87s/it] 50%|█████████████████████▌                     | 16/32 [00:30<00:29,  1.87s/it] 53%|██████████████████████▊                    | 17/32 [00:31<00:28,  1.88s/it] 56%|████████████████████████▏                  | 18/32 [00:33<00:26,  1.87s/it] 59%|█████████████████████████▌                 | 19/32 [00:35<00:24,  1.89s/it] 62%|██████████████████████████▉                | 20/32 [00:37<00:22,  1.88s/it] 66%|████████████████████████████▏              | 21/32 [00:39<00:20,  1.88s/it] 69%|█████████████████████████████▌             | 22/32 [00:41<00:18,  1.88s/it] 72%|██████████████████████████████▉            | 23/32 [00:43<00:16,  1.88s/it] 75%|████████████████████████████████▎          | 24/32 [00:45<00:14,  1.87s/it] 78%|█████████████████████████████████▌         | 25/32 [00:47<00:13,  1.91s/it] 81%|██████████████████████████████████▉        | 26/32 [00:49<00:11,  1.92s/it] 84%|████████████████████████████████████▎      | 27/32 [00:50<00:09,  1.90s/it] 88%|█████████████████████████████████████▋     | 28/32 [00:52<00:07,  1.89s/it] 91%|██████████████████████████████████████▉    | 29/32 [00:54<00:05,  1.88s/it] 94%|████████████████████████████████████████▎  | 30/32 [00:56<00:03,  1.87s/it] 97%|█████████████████████████████████████████▋ | 31/32 [00:58<00:01,  1.87s/it]100%|███████████████████████████████████████████| 32/32 [01:00<00:00,  1.88s/it]100%|███████████████████████████████████████████| 32/32 [01:00<00:00,  1.88s/it]
Consecutive layer pairs:  torch.Size([32, 923, 923])
  2%|█                                         | 2/81 [02:51<1:54:19, 86.83s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:01<00:57,  1.85s/it]  6%|██▊                                         | 2/32 [00:03<00:56,  1.88s/it]  9%|████▏                                       | 3/32 [00:05<00:54,  1.87s/it] 12%|█████▌                                      | 4/32 [00:07<00:52,  1.87s/it] 16%|██████▉                                     | 5/32 [00:09<00:50,  1.86s/it] 19%|████████▎                                   | 6/32 [00:11<00:48,  1.86s/it] 22%|█████████▋                                  | 7/32 [00:13<00:46,  1.87s/it] 25%|███████████                                 | 8/32 [00:14<00:44,  1.87s/it] 28%|████████████▍                               | 9/32 [00:16<00:43,  1.88s/it] 31%|█████████████▍                             | 10/32 [00:18<00:41,  1.87s/it] 34%|██████████████▊                            | 11/32 [00:20<00:39,  1.86s/it] 38%|████████████████▏                          | 12/32 [00:22<00:37,  1.86s/it] 41%|█████████████████▍                         | 13/32 [00:24<00:35,  1.86s/it] 44%|██████████████████▊                        | 14/32 [00:26<00:33,  1.86s/it] 47%|████████████████████▏                      | 15/32 [00:27<00:31,  1.86s/it] 50%|█████████████████████▌                     | 16/32 [00:29<00:30,  1.90s/it] 53%|██████████████████████▊                    | 17/32 [00:31<00:28,  1.89s/it] 56%|████████████████████████▏                  | 18/32 [00:33<00:26,  1.88s/it] 59%|█████████████████████████▌                 | 19/32 [00:35<00:24,  1.88s/it] 62%|██████████████████████████▉                | 20/32 [00:37<00:22,  1.87s/it] 66%|████████████████████████████▏              | 21/32 [00:39<00:20,  1.86s/it] 69%|█████████████████████████████▌             | 22/32 [00:41<00:18,  1.87s/it] 72%|██████████████████████████████▉            | 23/32 [00:43<00:16,  1.87s/it] 75%|████████████████████████████████▎          | 24/32 [00:44<00:14,  1.86s/it] 78%|█████████████████████████████████▌         | 25/32 [00:46<00:12,  1.85s/it] 81%|██████████████████████████████████▉        | 26/32 [00:48<00:11,  1.86s/it] 84%|████████████████████████████████████▎      | 27/32 [00:50<00:09,  1.86s/it] 88%|█████████████████████████████████████▋     | 28/32 [00:52<00:07,  1.86s/it] 91%|██████████████████████████████████████▉    | 29/32 [00:54<00:05,  1.87s/it] 94%|████████████████████████████████████████▎  | 30/32 [00:56<00:03,  1.86s/it] 97%|█████████████████████████████████████████▋ | 31/32 [00:57<00:01,  1.86s/it]100%|███████████████████████████████████████████| 32/32 [00:59<00:00,  1.89s/it]100%|███████████████████████████████████████████| 32/32 [00:59<00:00,  1.87s/it]
Consecutive layer pairs:  torch.Size([32, 923, 923])
  4%|█▌                                        | 3/81 [04:21<1:54:51, 88.36s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:01<00:32,  1.05s/it]  6%|██▊                                         | 2/32 [00:02<00:31,  1.05s/it]  9%|████▏                                       | 3/32 [00:03<00:30,  1.06s/it] 12%|█████▌                                      | 4/32 [00:04<00:29,  1.06s/it] 16%|██████▉                                     | 5/32 [00:05<00:28,  1.06s/it] 19%|████████▎                                   | 6/32 [00:06<00:27,  1.06s/it] 22%|█████████▋                                  | 7/32 [00:07<00:26,  1.06s/it] 25%|███████████                                 | 8/32 [00:08<00:25,  1.06s/it] 28%|████████████▍                               | 9/32 [00:09<00:24,  1.06s/it] 31%|█████████████▍                             | 10/32 [00:10<00:23,  1.06s/it] 34%|██████████████▊                            | 11/32 [00:11<00:22,  1.06s/it] 38%|████████████████▏                          | 12/32 [00:12<00:21,  1.06s/it] 41%|█████████████████▍                         | 13/32 [00:13<00:20,  1.06s/it] 44%|██████████████████▊                        | 14/32 [00:14<00:19,  1.06s/it] 47%|████████████████████▏                      | 15/32 [00:15<00:18,  1.07s/it] 50%|█████████████████████▌                     | 16/32 [00:17<00:17,  1.10s/it] 53%|██████████████████████▊                    | 17/32 [00:18<00:16,  1.10s/it] 56%|████████████████████████▏                  | 18/32 [00:19<00:15,  1.09s/it] 59%|█████████████████████████▌                 | 19/32 [00:20<00:14,  1.09s/it] 62%|██████████████████████████▉                | 20/32 [00:21<00:13,  1.08s/it] 66%|████████████████████████████▏              | 21/32 [00:22<00:11,  1.08s/it] 69%|█████████████████████████████▌             | 22/32 [00:23<00:10,  1.07s/it] 72%|██████████████████████████████▉            | 23/32 [00:24<00:09,  1.07s/it] 75%|████████████████████████████████▎          | 24/32 [00:25<00:08,  1.07s/it] 78%|█████████████████████████████████▌         | 25/32 [00:26<00:07,  1.07s/it] 81%|██████████████████████████████████▉        | 26/32 [00:27<00:06,  1.07s/it] 84%|████████████████████████████████████▎      | 27/32 [00:28<00:05,  1.07s/it] 88%|█████████████████████████████████████▋     | 28/32 [00:29<00:04,  1.07s/it] 91%|██████████████████████████████████████▉    | 29/32 [00:31<00:03,  1.07s/it] 94%|████████████████████████████████████████▎  | 30/32 [00:32<00:02,  1.07s/it] 97%|█████████████████████████████████████████▋ | 31/32 [00:33<00:01,  1.08s/it]100%|███████████████████████████████████████████| 32/32 [00:34<00:00,  1.07s/it]100%|███████████████████████████████████████████| 32/32 [00:34<00:00,  1.07s/it]
Consecutive layer pairs:  torch.Size([32, 766, 766])
  5%|██                                        | 4/81 [05:15<1:36:02, 74.83s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:01<00:41,  1.32s/it]  6%|██▊                                         | 2/32 [00:02<00:39,  1.33s/it]  9%|████▏                                       | 3/32 [00:03<00:38,  1.33s/it] 12%|█████▌                                      | 4/32 [00:05<00:37,  1.34s/it] 16%|██████▉                                     | 5/32 [00:06<00:36,  1.33s/it] 19%|████████▎                                   | 6/32 [00:08<00:34,  1.34s/it] 22%|█████████▋                                  | 7/32 [00:09<00:33,  1.34s/it] 25%|███████████                                 | 8/32 [00:10<00:32,  1.33s/it] 28%|████████████▍                               | 9/32 [00:12<00:30,  1.33s/it] 31%|█████████████▍                             | 10/32 [00:13<00:29,  1.34s/it] 34%|██████████████▊                            | 11/32 [00:14<00:28,  1.34s/it] 38%|████████████████▏                          | 12/32 [00:16<00:26,  1.35s/it] 41%|█████████████████▍                         | 13/32 [00:17<00:25,  1.35s/it] 44%|██████████████████▊                        | 14/32 [00:18<00:24,  1.36s/it] 47%|████████████████████▏                      | 15/32 [00:20<00:23,  1.35s/it] 50%|█████████████████████▌                     | 16/32 [00:21<00:21,  1.35s/it] 53%|██████████████████████▊                    | 17/32 [00:22<00:20,  1.35s/it] 56%|████████████████████████▏                  | 18/32 [00:24<00:18,  1.36s/it] 59%|█████████████████████████▌                 | 19/32 [00:25<00:17,  1.35s/it] 62%|██████████████████████████▉                | 20/32 [00:26<00:16,  1.36s/it] 66%|████████████████████████████▏              | 21/32 [00:28<00:15,  1.38s/it] 69%|█████████████████████████████▌             | 22/32 [00:29<00:13,  1.37s/it] 72%|██████████████████████████████▉            | 23/32 [00:31<00:12,  1.36s/it] 75%|████████████████████████████████▎          | 24/32 [00:32<00:10,  1.35s/it] 78%|█████████████████████████████████▌         | 25/32 [00:33<00:09,  1.35s/it] 81%|██████████████████████████████████▉        | 26/32 [00:35<00:08,  1.35s/it] 84%|████████████████████████████████████▎      | 27/32 [00:36<00:06,  1.36s/it] 88%|█████████████████████████████████████▋     | 28/32 [00:37<00:05,  1.36s/it] 91%|██████████████████████████████████████▉    | 29/32 [00:39<00:04,  1.36s/it] 94%|████████████████████████████████████████▎  | 30/32 [00:40<00:02,  1.35s/it] 97%|█████████████████████████████████████████▋ | 31/32 [00:41<00:01,  1.35s/it]100%|███████████████████████████████████████████| 32/32 [00:43<00:00,  1.35s/it]100%|███████████████████████████████████████████| 32/32 [00:43<00:00,  1.35s/it]
Consecutive layer pairs:  torch.Size([32, 827, 827])
  6%|██▌                                       | 5/81 [06:20<1:30:10, 71.19s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:01<00:42,  1.36s/it]  6%|██▊                                         | 2/32 [00:02<00:40,  1.35s/it]  9%|████▏                                       | 3/32 [00:04<00:39,  1.35s/it] 12%|█████▌                                      | 4/32 [00:05<00:38,  1.39s/it] 16%|██████▉                                     | 5/32 [00:06<00:37,  1.38s/it] 19%|████████▎                                   | 6/32 [00:08<00:35,  1.37s/it] 22%|█████████▋                                  | 7/32 [00:09<00:34,  1.37s/it] 25%|███████████                                 | 8/32 [00:10<00:32,  1.37s/it] 28%|████████████▍                               | 9/32 [00:12<00:31,  1.37s/it] 31%|█████████████▍                             | 10/32 [00:13<00:30,  1.38s/it] 34%|██████████████▊                            | 11/32 [00:15<00:28,  1.38s/it] 38%|████████████████▏                          | 12/32 [00:16<00:27,  1.38s/it] 41%|█████████████████▍                         | 13/32 [00:18<00:27,  1.42s/it] 44%|██████████████████▊                        | 14/32 [00:19<00:25,  1.40s/it] 47%|████████████████████▏                      | 15/32 [00:20<00:23,  1.38s/it] 50%|█████████████████████▌                     | 16/32 [00:22<00:22,  1.39s/it] 53%|██████████████████████▊                    | 17/32 [00:23<00:20,  1.38s/it] 56%|████████████████████████▏                  | 18/32 [00:24<00:19,  1.37s/it] 59%|█████████████████████████▌                 | 19/32 [00:26<00:17,  1.36s/it] 62%|██████████████████████████▉                | 20/32 [00:27<00:16,  1.36s/it] 66%|████████████████████████████▏              | 21/32 [00:28<00:14,  1.36s/it] 69%|█████████████████████████████▌             | 22/32 [00:30<00:13,  1.36s/it] 72%|██████████████████████████████▉            | 23/32 [00:31<00:12,  1.36s/it] 75%|████████████████████████████████▎          | 24/32 [00:32<00:10,  1.36s/it] 78%|█████████████████████████████████▌         | 25/32 [00:34<00:09,  1.36s/it] 81%|██████████████████████████████████▉        | 26/32 [00:35<00:08,  1.36s/it] 84%|████████████████████████████████████▎      | 27/32 [00:37<00:06,  1.38s/it] 88%|█████████████████████████████████████▋     | 28/32 [00:38<00:05,  1.40s/it] 91%|██████████████████████████████████████▉    | 29/32 [00:39<00:04,  1.38s/it] 94%|████████████████████████████████████████▎  | 30/32 [00:41<00:02,  1.39s/it] 97%|█████████████████████████████████████████▋ | 31/32 [00:42<00:01,  1.37s/it]100%|███████████████████████████████████████████| 32/32 [00:43<00:00,  1.36s/it]100%|███████████████████████████████████████████| 32/32 [00:43<00:00,  1.37s/it]
Consecutive layer pairs:  torch.Size([32, 827, 827])
  7%|███                                       | 6/81 [07:29<1:28:18, 70.64s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:01<00:36,  1.18s/it]  6%|██▊                                         | 2/32 [00:02<00:35,  1.19s/it]  9%|████▏                                       | 3/32 [00:03<00:37,  1.29s/it] 12%|█████▌                                      | 4/32 [00:05<00:35,  1.27s/it] 16%|██████▉                                     | 5/32 [00:06<00:33,  1.24s/it] 19%|████████▎                                   | 6/32 [00:07<00:32,  1.23s/it] 22%|█████████▋                                  | 7/32 [00:08<00:30,  1.23s/it] 25%|███████████                                 | 8/32 [00:09<00:29,  1.22s/it] 28%|████████████▍                               | 9/32 [00:11<00:27,  1.21s/it] 31%|█████████████▍                             | 10/32 [00:12<00:26,  1.22s/it] 34%|██████████████▊                            | 11/32 [00:13<00:25,  1.22s/it] 38%|████████████████▏                          | 12/32 [00:14<00:24,  1.22s/it] 41%|█████████████████▍                         | 13/32 [00:15<00:23,  1.23s/it] 44%|██████████████████▊                        | 14/32 [00:17<00:22,  1.22s/it] 47%|████████████████████▏                      | 15/32 [00:18<00:20,  1.23s/it] 50%|█████████████████████▌                     | 16/32 [00:19<00:19,  1.22s/it] 53%|██████████████████████▊                    | 17/32 [00:20<00:18,  1.21s/it] 56%|████████████████████████▏                  | 18/32 [00:22<00:16,  1.21s/it] 59%|█████████████████████████▌                 | 19/32 [00:23<00:15,  1.20s/it] 62%|██████████████████████████▉                | 20/32 [00:24<00:14,  1.21s/it] 66%|████████████████████████████▏              | 21/32 [00:25<00:13,  1.21s/it] 69%|█████████████████████████████▌             | 22/32 [00:26<00:12,  1.21s/it] 72%|██████████████████████████████▉            | 23/32 [00:28<00:10,  1.20s/it] 75%|████████████████████████████████▎          | 24/32 [00:29<00:09,  1.20s/it] 78%|█████████████████████████████████▌         | 25/32 [00:30<00:08,  1.20s/it] 81%|██████████████████████████████████▉        | 26/32 [00:31<00:07,  1.20s/it] 84%|████████████████████████████████████▎      | 27/32 [00:32<00:06,  1.22s/it] 88%|█████████████████████████████████████▋     | 28/32 [00:34<00:04,  1.21s/it] 91%|██████████████████████████████████████▉    | 29/32 [00:35<00:03,  1.21s/it] 94%|████████████████████████████████████████▎  | 30/32 [00:36<00:02,  1.25s/it] 97%|█████████████████████████████████████████▋ | 31/32 [00:37<00:01,  1.25s/it]100%|███████████████████████████████████████████| 32/32 [00:39<00:00,  1.23s/it]100%|███████████████████████████████████████████| 32/32 [00:39<00:00,  1.22s/it]
Consecutive layer pairs:  torch.Size([32, 798, 798])
  9%|███▋                                      | 7/81 [08:29<1:22:28, 66.88s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:01<00:47,  1.52s/it]  6%|██▊                                         | 2/32 [00:03<00:46,  1.54s/it]  9%|████▏                                       | 3/32 [00:04<00:44,  1.55s/it] 12%|█████▌                                      | 4/32 [00:06<00:42,  1.53s/it] 16%|██████▉                                     | 5/32 [00:07<00:41,  1.55s/it] 19%|████████▎                                   | 6/32 [00:09<00:40,  1.54s/it] 22%|█████████▋                                  | 7/32 [00:10<00:38,  1.53s/it] 25%|███████████                                 | 8/32 [00:12<00:36,  1.53s/it] 28%|████████████▍                               | 9/32 [00:13<00:34,  1.52s/it] 31%|█████████████▍                             | 10/32 [00:15<00:33,  1.52s/it] 34%|██████████████▊                            | 11/32 [00:16<00:31,  1.52s/it] 38%|████████████████▏                          | 12/32 [00:18<00:31,  1.57s/it] 41%|█████████████████▍                         | 13/32 [00:20<00:29,  1.56s/it] 44%|██████████████████▊                        | 14/32 [00:21<00:27,  1.54s/it] 47%|████████████████████▏                      | 15/32 [00:23<00:26,  1.53s/it] 50%|█████████████████████▌                     | 16/32 [00:24<00:24,  1.54s/it] 53%|██████████████████████▊                    | 17/32 [00:26<00:22,  1.53s/it] 56%|████████████████████████▏                  | 18/32 [00:27<00:21,  1.52s/it] 59%|█████████████████████████▌                 | 19/32 [00:29<00:19,  1.52s/it] 62%|██████████████████████████▉                | 20/32 [00:30<00:18,  1.52s/it] 66%|████████████████████████████▏              | 21/32 [00:32<00:16,  1.52s/it] 69%|█████████████████████████████▌             | 22/32 [00:33<00:15,  1.52s/it] 72%|██████████████████████████████▉            | 23/32 [00:35<00:13,  1.53s/it] 75%|████████████████████████████████▎          | 24/32 [00:36<00:12,  1.52s/it] 78%|█████████████████████████████████▌         | 25/32 [00:38<00:10,  1.56s/it] 81%|██████████████████████████████████▉        | 26/32 [00:40<00:09,  1.59s/it] 84%|████████████████████████████████████▎      | 27/32 [00:41<00:07,  1.57s/it] 88%|█████████████████████████████████████▋     | 28/32 [00:43<00:06,  1.56s/it] 91%|██████████████████████████████████████▉    | 29/32 [00:44<00:04,  1.55s/it] 94%|████████████████████████████████████████▎  | 30/32 [00:46<00:03,  1.57s/it] 97%|█████████████████████████████████████████▋ | 31/32 [00:47<00:01,  1.56s/it]100%|███████████████████████████████████████████| 32/32 [00:49<00:00,  1.59s/it]100%|███████████████████████████████████████████| 32/32 [00:49<00:00,  1.55s/it]
Consecutive layer pairs:  torch.Size([32, 866, 866])
 10%|████▏                                     | 8/81 [09:37<1:21:59, 67.40s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:01<00:46,  1.50s/it]  6%|██▊                                         | 2/32 [00:03<00:45,  1.52s/it]  9%|████▏                                       | 3/32 [00:04<00:44,  1.52s/it] 12%|█████▌                                      | 4/32 [00:06<00:42,  1.51s/it] 16%|██████▉                                     | 5/32 [00:07<00:41,  1.53s/it] 19%|████████▎                                   | 6/32 [00:09<00:39,  1.52s/it] 22%|█████████▋                                  | 7/32 [00:10<00:39,  1.58s/it] 25%|███████████                                 | 8/32 [00:12<00:37,  1.57s/it] 28%|████████████▍                               | 9/32 [00:13<00:35,  1.55s/it] 31%|█████████████▍                             | 10/32 [00:15<00:34,  1.55s/it] 34%|██████████████▊                            | 11/32 [00:16<00:32,  1.54s/it] 38%|████████████████▏                          | 12/32 [00:18<00:30,  1.53s/it] 41%|█████████████████▍                         | 13/32 [00:19<00:29,  1.53s/it] 44%|██████████████████▊                        | 14/32 [00:21<00:27,  1.53s/it] 47%|████████████████████▏                      | 15/32 [00:23<00:25,  1.52s/it] 50%|█████████████████████▌                     | 16/32 [00:24<00:24,  1.53s/it] 53%|██████████████████████▊                    | 17/32 [00:26<00:22,  1.53s/it] 56%|████████████████████████▏                  | 18/32 [00:27<00:21,  1.53s/it] 59%|█████████████████████████▌                 | 19/32 [00:29<00:19,  1.53s/it] 62%|██████████████████████████▉                | 20/32 [00:30<00:18,  1.52s/it] 66%|████████████████████████████▏              | 21/32 [00:32<00:16,  1.53s/it] 69%|█████████████████████████████▌             | 22/32 [00:33<00:15,  1.53s/it] 72%|██████████████████████████████▉            | 23/32 [00:35<00:13,  1.52s/it] 75%|████████████████████████████████▎          | 24/32 [00:36<00:12,  1.57s/it] 78%|█████████████████████████████████▌         | 25/32 [00:38<00:10,  1.55s/it] 81%|██████████████████████████████████▉        | 26/32 [00:39<00:09,  1.54s/it] 84%|████████████████████████████████████▎      | 27/32 [00:41<00:07,  1.54s/it] 88%|█████████████████████████████████████▋     | 28/32 [00:43<00:06,  1.53s/it] 91%|██████████████████████████████████████▉    | 29/32 [00:44<00:04,  1.54s/it] 94%|████████████████████████████████████████▎  | 30/32 [00:46<00:03,  1.53s/it] 97%|█████████████████████████████████████████▋ | 31/32 [00:47<00:01,  1.53s/it]100%|███████████████████████████████████████████| 32/32 [00:49<00:00,  1.52s/it]100%|███████████████████████████████████████████| 32/32 [00:49<00:00,  1.53s/it]
Consecutive layer pairs:  torch.Size([32, 866, 866])
 11%|████▋                                     | 9/81 [10:46<1:21:28, 67.89s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:01<00:53,  1.74s/it]  6%|██▊                                         | 2/32 [00:03<00:51,  1.73s/it]  9%|████▏                                       | 3/32 [00:05<00:50,  1.74s/it] 12%|█████▌                                      | 4/32 [00:06<00:48,  1.75s/it] 16%|██████▉                                     | 5/32 [00:08<00:47,  1.75s/it] 19%|████████▎                                   | 6/32 [00:10<00:45,  1.75s/it] 22%|█████████▋                                  | 7/32 [00:12<00:43,  1.75s/it] 25%|███████████                                 | 8/32 [00:14<00:42,  1.79s/it] 28%|████████████▍                               | 9/32 [00:15<00:41,  1.80s/it] 31%|█████████████▍                             | 10/32 [00:17<00:39,  1.78s/it] 34%|██████████████▊                            | 11/32 [00:19<00:37,  1.77s/it] 38%|████████████████▏                          | 12/32 [00:21<00:35,  1.77s/it] 41%|█████████████████▍                         | 13/32 [00:22<00:33,  1.77s/it] 44%|██████████████████▊                        | 14/32 [00:24<00:31,  1.77s/it] 47%|████████████████████▏                      | 15/32 [00:26<00:30,  1.77s/it] 50%|█████████████████████▌                     | 16/32 [00:28<00:28,  1.76s/it] 53%|██████████████████████▊                    | 17/32 [00:29<00:26,  1.76s/it] 56%|████████████████████████▏                  | 18/32 [00:31<00:24,  1.75s/it] 59%|█████████████████████████▌                 | 19/32 [00:33<00:22,  1.76s/it] 62%|██████████████████████████▉                | 20/32 [00:35<00:21,  1.76s/it] 66%|████████████████████████████▏              | 21/32 [00:37<00:19,  1.76s/it] 69%|█████████████████████████████▌             | 22/32 [00:38<00:17,  1.75s/it] 72%|██████████████████████████████▉            | 23/32 [00:40<00:16,  1.78s/it] 75%|████████████████████████████████▎          | 24/32 [00:42<00:14,  1.77s/it] 78%|█████████████████████████████████▌         | 25/32 [00:44<00:12,  1.76s/it] 81%|██████████████████████████████████▉        | 26/32 [00:45<00:10,  1.75s/it] 84%|████████████████████████████████████▎      | 27/32 [00:47<00:08,  1.75s/it] 88%|█████████████████████████████████████▋     | 28/32 [00:49<00:06,  1.75s/it] 91%|██████████████████████████████████████▉    | 29/32 [00:51<00:05,  1.76s/it] 94%|████████████████████████████████████████▎  | 30/32 [00:52<00:03,  1.76s/it] 97%|█████████████████████████████████████████▋ | 31/32 [00:54<00:01,  1.75s/it]100%|███████████████████████████████████████████| 32/32 [00:56<00:00,  1.77s/it]100%|███████████████████████████████████████████| 32/32 [00:56<00:00,  1.76s/it]
Consecutive layer pairs:  torch.Size([32, 910, 910])
 12%|█████                                    | 10/81 [12:10<1:26:18, 72.93s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:01<00:54,  1.76s/it]  6%|██▊                                         | 2/32 [00:03<00:50,  1.67s/it]  9%|████▏                                       | 3/32 [00:04<00:46,  1.61s/it] 12%|█████▌                                      | 4/32 [00:06<00:44,  1.60s/it] 16%|██████▉                                     | 5/32 [00:08<00:42,  1.58s/it] 19%|████████▎                                   | 6/32 [00:09<00:40,  1.57s/it] 22%|█████████▋                                  | 7/32 [00:11<00:39,  1.57s/it] 25%|███████████                                 | 8/32 [00:12<00:37,  1.57s/it] 28%|████████████▍                               | 9/32 [00:14<00:35,  1.56s/it] 31%|█████████████▍                             | 10/32 [00:15<00:34,  1.55s/it] 34%|██████████████▊                            | 11/32 [00:17<00:32,  1.56s/it] 38%|████████████████▏                          | 12/32 [00:18<00:31,  1.56s/it] 41%|█████████████████▍                         | 13/32 [00:20<00:29,  1.56s/it] 44%|██████████████████▊                        | 14/32 [00:22<00:28,  1.56s/it] 47%|████████████████████▏                      | 15/32 [00:23<00:26,  1.56s/it] 50%|█████████████████████▌                     | 16/32 [00:25<00:24,  1.56s/it] 53%|██████████████████████▊                    | 17/32 [00:26<00:23,  1.55s/it] 56%|████████████████████████▏                  | 18/32 [00:28<00:21,  1.55s/it] 59%|█████████████████████████▌                 | 19/32 [00:29<00:20,  1.55s/it] 62%|██████████████████████████▉                | 20/32 [00:31<00:18,  1.55s/it] 66%|████████████████████████████▏              | 21/32 [00:32<00:17,  1.55s/it] 69%|█████████████████████████████▌             | 22/32 [00:34<00:15,  1.55s/it] 72%|██████████████████████████████▉            | 23/32 [00:36<00:14,  1.56s/it] 75%|████████████████████████████████▎          | 24/32 [00:37<00:12,  1.56s/it] 78%|█████████████████████████████████▌         | 25/32 [00:39<00:11,  1.60s/it] 81%|██████████████████████████████████▉        | 26/32 [00:40<00:09,  1.59s/it] 84%|████████████████████████████████████▎      | 27/32 [00:42<00:07,  1.59s/it] 88%|█████████████████████████████████████▋     | 28/32 [00:43<00:06,  1.58s/it] 91%|██████████████████████████████████████▉    | 29/32 [00:45<00:04,  1.57s/it] 94%|████████████████████████████████████████▎  | 30/32 [00:47<00:03,  1.56s/it] 97%|█████████████████████████████████████████▋ | 31/32 [00:48<00:01,  1.59s/it]100%|███████████████████████████████████████████| 32/32 [00:50<00:00,  1.60s/it]100%|███████████████████████████████████████████| 32/32 [00:50<00:00,  1.57s/it]
Consecutive layer pairs:  torch.Size([32, 873, 873])
 14%|█████▌                                   | 11/81 [13:25<1:25:42, 73.46s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:01<00:51,  1.65s/it]  6%|██▊                                         | 2/32 [00:03<00:49,  1.66s/it]  9%|████▏                                       | 3/32 [00:04<00:48,  1.66s/it] 12%|█████▌                                      | 4/32 [00:06<00:46,  1.66s/it] 16%|██████▉                                     | 5/32 [00:08<00:44,  1.65s/it] 19%|████████▎                                   | 6/32 [00:09<00:42,  1.65s/it] 22%|█████████▋                                  | 7/32 [00:11<00:41,  1.65s/it] 25%|███████████                                 | 8/32 [00:13<00:39,  1.65s/it] 28%|████████████▍                               | 9/32 [00:14<00:37,  1.65s/it] 31%|█████████████▍                             | 10/32 [00:16<00:36,  1.65s/it] 34%|██████████████▊                            | 11/32 [00:18<00:34,  1.66s/it] 38%|████████████████▏                          | 12/32 [00:19<00:33,  1.65s/it] 41%|█████████████████▍                         | 13/32 [00:21<00:31,  1.65s/it] 44%|██████████████████▊                        | 14/32 [00:23<00:29,  1.66s/it] 47%|████████████████████▏                      | 15/32 [00:24<00:28,  1.66s/it] 50%|█████████████████████▌                     | 16/32 [00:26<00:27,  1.69s/it] 53%|██████████████████████▊                    | 17/32 [00:28<00:25,  1.68s/it] 56%|████████████████████████▏                  | 18/32 [00:29<00:23,  1.67s/it] 59%|█████████████████████████▌                 | 19/32 [00:31<00:21,  1.67s/it] 62%|██████████████████████████▉                | 20/32 [00:33<00:19,  1.66s/it] 66%|████████████████████████████▏              | 21/32 [00:34<00:18,  1.65s/it] 69%|█████████████████████████████▌             | 22/32 [00:36<00:16,  1.65s/it] 72%|██████████████████████████████▉            | 23/32 [00:38<00:14,  1.65s/it] 75%|████████████████████████████████▎          | 24/32 [00:39<00:13,  1.64s/it] 78%|█████████████████████████████████▌         | 25/32 [00:41<00:11,  1.64s/it] 81%|██████████████████████████████████▉        | 26/32 [00:43<00:09,  1.65s/it] 84%|████████████████████████████████████▎      | 27/32 [00:44<00:08,  1.66s/it] 88%|█████████████████████████████████████▋     | 28/32 [00:46<00:06,  1.66s/it] 91%|██████████████████████████████████████▉    | 29/32 [00:48<00:04,  1.66s/it] 94%|████████████████████████████████████████▎  | 30/32 [00:49<00:03,  1.66s/it] 97%|█████████████████████████████████████████▋ | 31/32 [00:51<00:01,  1.66s/it]100%|███████████████████████████████████████████| 32/32 [00:53<00:00,  1.65s/it]100%|███████████████████████████████████████████| 32/32 [00:53<00:00,  1.66s/it]
Consecutive layer pairs:  torch.Size([32, 892, 892])
 15%|██████                                   | 12/81 [14:41<1:25:27, 74.32s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:01<00:41,  1.32s/it]  6%|██▊                                         | 2/32 [00:02<00:39,  1.31s/it]  9%|████▏                                       | 3/32 [00:03<00:38,  1.31s/it] 12%|█████▌                                      | 4/32 [00:05<00:36,  1.31s/it] 16%|██████▉                                     | 5/32 [00:06<00:35,  1.31s/it] 19%|████████▎                                   | 6/32 [00:07<00:33,  1.31s/it] 22%|█████████▋                                  | 7/32 [00:09<00:32,  1.31s/it] 25%|███████████                                 | 8/32 [00:10<00:31,  1.31s/it] 28%|████████████▍                               | 9/32 [00:11<00:29,  1.30s/it] 31%|█████████████▍                             | 10/32 [00:13<00:28,  1.30s/it] 34%|██████████████▊                            | 11/32 [00:14<00:27,  1.31s/it] 38%|████████████████▏                          | 12/32 [00:15<00:26,  1.31s/it] 41%|█████████████████▍                         | 13/32 [00:16<00:24,  1.31s/it] 44%|██████████████████▊                        | 14/32 [00:18<00:23,  1.30s/it] 47%|████████████████████▏                      | 15/32 [00:19<00:22,  1.30s/it] 50%|█████████████████████▌                     | 16/32 [00:20<00:20,  1.30s/it] 53%|██████████████████████▊                    | 17/32 [00:22<00:19,  1.29s/it] 56%|████████████████████████▏                  | 18/32 [00:23<00:18,  1.29s/it] 59%|█████████████████████████▌                 | 19/32 [00:24<00:16,  1.29s/it] 62%|██████████████████████████▉                | 20/32 [00:26<00:15,  1.32s/it] 66%|████████████████████████████▏              | 21/32 [00:27<00:14,  1.31s/it] 69%|█████████████████████████████▌             | 22/32 [00:28<00:13,  1.31s/it] 72%|██████████████████████████████▉            | 23/32 [00:30<00:11,  1.31s/it] 75%|████████████████████████████████▎          | 24/32 [00:31<00:10,  1.32s/it] 78%|█████████████████████████████████▌         | 25/32 [00:32<00:09,  1.33s/it] 81%|██████████████████████████████████▉        | 26/32 [00:34<00:07,  1.32s/it] 84%|████████████████████████████████████▎      | 27/32 [00:35<00:06,  1.31s/it] 88%|█████████████████████████████████████▋     | 28/32 [00:36<00:05,  1.34s/it] 91%|██████████████████████████████████████▉    | 29/32 [00:38<00:04,  1.35s/it] 94%|████████████████████████████████████████▎  | 30/32 [00:39<00:02,  1.35s/it] 97%|█████████████████████████████████████████▋ | 31/32 [00:40<00:01,  1.33s/it]100%|███████████████████████████████████████████| 32/32 [00:42<00:00,  1.33s/it]100%|███████████████████████████████████████████| 32/32 [00:42<00:00,  1.32s/it]
Consecutive layer pairs:  torch.Size([32, 813, 813])
 16%|██████▌                                  | 13/81 [15:55<1:24:05, 74.20s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:01<00:40,  1.29s/it]  6%|██▊                                         | 2/32 [00:02<00:38,  1.30s/it]  9%|████▏                                       | 3/32 [00:03<00:37,  1.30s/it] 12%|█████▌                                      | 4/32 [00:05<00:36,  1.30s/it] 16%|██████▉                                     | 5/32 [00:06<00:35,  1.30s/it] 19%|████████▎                                   | 6/32 [00:07<00:33,  1.30s/it] 22%|█████████▋                                  | 7/32 [00:09<00:33,  1.33s/it] 25%|███████████                                 | 8/32 [00:10<00:31,  1.33s/it] 28%|████████████▍                               | 9/32 [00:11<00:30,  1.32s/it] 31%|█████████████▍                             | 10/32 [00:13<00:28,  1.32s/it] 34%|██████████████▊                            | 11/32 [00:14<00:27,  1.33s/it] 38%|████████████████▏                          | 12/32 [00:15<00:26,  1.33s/it] 41%|█████████████████▍                         | 13/32 [00:17<00:25,  1.32s/it] 44%|██████████████████▊                        | 14/32 [00:18<00:23,  1.31s/it] 47%|████████████████████▏                      | 15/32 [00:19<00:22,  1.32s/it] 50%|█████████████████████▌                     | 16/32 [00:21<00:21,  1.34s/it] 53%|██████████████████████▊                    | 17/32 [00:22<00:19,  1.33s/it] 56%|████████████████████████▏                  | 18/32 [00:23<00:18,  1.32s/it] 59%|█████████████████████████▌                 | 19/32 [00:25<00:17,  1.32s/it] 62%|██████████████████████████▉                | 20/32 [00:26<00:15,  1.31s/it] 66%|████████████████████████████▏              | 21/32 [00:27<00:14,  1.31s/it] 69%|█████████████████████████████▌             | 22/32 [00:28<00:13,  1.31s/it] 72%|██████████████████████████████▉            | 23/32 [00:30<00:11,  1.31s/it] 75%|████████████████████████████████▎          | 24/32 [00:31<00:10,  1.31s/it] 78%|█████████████████████████████████▌         | 25/32 [00:32<00:09,  1.31s/it] 81%|██████████████████████████████████▉        | 26/32 [00:34<00:07,  1.31s/it] 84%|████████████████████████████████████▎      | 27/32 [00:35<00:06,  1.31s/it] 88%|█████████████████████████████████████▋     | 28/32 [00:36<00:05,  1.31s/it] 91%|██████████████████████████████████████▉    | 29/32 [00:38<00:03,  1.31s/it] 94%|████████████████████████████████████████▎  | 30/32 [00:39<00:02,  1.31s/it] 97%|█████████████████████████████████████████▋ | 31/32 [00:40<00:01,  1.31s/it]100%|███████████████████████████████████████████| 32/32 [00:42<00:00,  1.31s/it]100%|███████████████████████████████████████████| 32/32 [00:42<00:00,  1.31s/it]
Consecutive layer pairs:  torch.Size([32, 813, 813])
 17%|███████                                  | 14/81 [17:05<1:21:13, 72.75s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:01<00:39,  1.29s/it]  6%|██▊                                         | 2/32 [00:02<00:39,  1.33s/it]  9%|████▏                                       | 3/32 [00:03<00:38,  1.34s/it] 12%|█████▌                                      | 4/32 [00:05<00:37,  1.32s/it] 16%|██████▉                                     | 5/32 [00:06<00:35,  1.31s/it] 19%|████████▎                                   | 6/32 [00:08<00:35,  1.35s/it] 22%|█████████▋                                  | 7/32 [00:09<00:33,  1.33s/it] 25%|███████████                                 | 8/32 [00:10<00:31,  1.32s/it] 28%|████████████▍                               | 9/32 [00:11<00:30,  1.31s/it] 31%|█████████████▍                             | 10/32 [00:13<00:28,  1.31s/it] 34%|██████████████▊                            | 11/32 [00:14<00:27,  1.30s/it] 38%|████████████████▏                          | 12/32 [00:15<00:25,  1.30s/it] 41%|█████████████████▍                         | 13/32 [00:17<00:24,  1.30s/it] 44%|██████████████████▊                        | 14/32 [00:18<00:23,  1.30s/it] 47%|████████████████████▏                      | 15/32 [00:19<00:22,  1.32s/it] 50%|█████████████████████▌                     | 16/32 [00:21<00:21,  1.32s/it] 53%|██████████████████████▊                    | 17/32 [00:22<00:19,  1.31s/it] 56%|████████████████████████▏                  | 18/32 [00:23<00:18,  1.32s/it] 59%|█████████████████████████▌                 | 19/32 [00:25<00:17,  1.32s/it] 62%|██████████████████████████▉                | 20/32 [00:26<00:15,  1.32s/it] 66%|████████████████████████████▏              | 21/32 [00:27<00:14,  1.32s/it] 69%|█████████████████████████████▌             | 22/32 [00:28<00:13,  1.32s/it] 72%|██████████████████████████████▉            | 23/32 [00:30<00:11,  1.31s/it] 75%|████████████████████████████████▎          | 24/32 [00:31<00:10,  1.34s/it] 78%|█████████████████████████████████▌         | 25/32 [00:32<00:09,  1.33s/it] 81%|██████████████████████████████████▉        | 26/32 [00:34<00:07,  1.32s/it] 84%|████████████████████████████████████▎      | 27/32 [00:35<00:06,  1.33s/it] 88%|█████████████████████████████████████▋     | 28/32 [00:36<00:05,  1.32s/it] 91%|██████████████████████████████████████▉    | 29/32 [00:38<00:03,  1.31s/it] 94%|████████████████████████████████████████▎  | 30/32 [00:39<00:02,  1.31s/it] 97%|█████████████████████████████████████████▋ | 31/32 [00:40<00:01,  1.31s/it]100%|███████████████████████████████████████████| 32/32 [00:42<00:00,  1.30s/it]100%|███████████████████████████████████████████| 32/32 [00:42<00:00,  1.32s/it]
Consecutive layer pairs:  torch.Size([32, 813, 813])
 19%|███████▌                                 | 15/81 [18:07<1:16:43, 69.75s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:01<00:36,  1.17s/it]  6%|██▊                                         | 2/32 [00:02<00:35,  1.17s/it]  9%|████▏                                       | 3/32 [00:03<00:33,  1.16s/it] 12%|█████▌                                      | 4/32 [00:04<00:32,  1.17s/it] 16%|██████▉                                     | 5/32 [00:05<00:31,  1.17s/it] 19%|████████▎                                   | 6/32 [00:06<00:30,  1.16s/it] 22%|█████████▋                                  | 7/32 [00:08<00:29,  1.18s/it] 25%|███████████                                 | 8/32 [00:09<00:28,  1.20s/it] 28%|████████████▍                               | 9/32 [00:10<00:27,  1.18s/it] 31%|█████████████▍                             | 10/32 [00:11<00:25,  1.16s/it] 34%|██████████████▊                            | 11/32 [00:12<00:24,  1.15s/it] 38%|████████████████▏                          | 12/32 [00:13<00:22,  1.15s/it] 41%|█████████████████▍                         | 13/32 [00:15<00:21,  1.15s/it] 44%|██████████████████▊                        | 14/32 [00:16<00:20,  1.14s/it] 47%|████████████████████▏                      | 15/32 [00:17<00:19,  1.14s/it] 50%|█████████████████████▌                     | 16/32 [00:18<00:18,  1.15s/it] 53%|██████████████████████▊                    | 17/32 [00:19<00:17,  1.14s/it] 56%|████████████████████████▏                  | 18/32 [00:20<00:16,  1.15s/it] 59%|█████████████████████████▌                 | 19/32 [00:22<00:15,  1.16s/it] 62%|██████████████████████████▉                | 20/32 [00:23<00:14,  1.17s/it] 66%|████████████████████████████▏              | 21/32 [00:24<00:12,  1.17s/it] 69%|█████████████████████████████▌             | 22/32 [00:25<00:11,  1.16s/it] 72%|██████████████████████████████▉            | 23/32 [00:26<00:10,  1.16s/it] 75%|████████████████████████████████▎          | 24/32 [00:27<00:09,  1.15s/it] 78%|█████████████████████████████████▌         | 25/32 [00:28<00:08,  1.16s/it] 81%|██████████████████████████████████▉        | 26/32 [00:30<00:06,  1.15s/it] 84%|████████████████████████████████████▎      | 27/32 [00:31<00:05,  1.15s/it] 88%|█████████████████████████████████████▋     | 28/32 [00:32<00:04,  1.14s/it] 91%|██████████████████████████████████████▉    | 29/32 [00:33<00:03,  1.16s/it] 94%|████████████████████████████████████████▎  | 30/32 [00:34<00:02,  1.16s/it] 97%|█████████████████████████████████████████▋ | 31/32 [00:35<00:01,  1.17s/it]100%|███████████████████████████████████████████| 32/32 [00:37<00:00,  1.16s/it]100%|███████████████████████████████████████████| 32/32 [00:37<00:00,  1.16s/it]
Consecutive layer pairs:  torch.Size([32, 782, 782])
 20%|████████                                 | 16/81 [19:09<1:12:52, 67.27s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:01<00:39,  1.26s/it]  6%|██▊                                         | 2/32 [00:02<00:38,  1.28s/it]  9%|████▏                                       | 3/32 [00:03<00:37,  1.29s/it] 12%|█████▌                                      | 4/32 [00:05<00:37,  1.32s/it] 16%|██████▉                                     | 5/32 [00:06<00:35,  1.31s/it] 19%|████████▎                                   | 6/32 [00:07<00:33,  1.30s/it] 22%|█████████▋                                  | 7/32 [00:09<00:32,  1.31s/it] 25%|███████████                                 | 8/32 [00:10<00:31,  1.30s/it] 28%|████████████▍                               | 9/32 [00:11<00:29,  1.30s/it] 31%|█████████████▍                             | 10/32 [00:13<00:28,  1.30s/it] 34%|██████████████▊                            | 11/32 [00:14<00:27,  1.33s/it] 38%|████████████████▏                          | 12/32 [00:15<00:26,  1.32s/it] 41%|█████████████████▍                         | 13/32 [00:16<00:24,  1.30s/it] 44%|██████████████████▊                        | 14/32 [00:18<00:23,  1.31s/it] 47%|████████████████████▏                      | 15/32 [00:19<00:22,  1.30s/it] 50%|█████████████████████▌                     | 16/32 [00:20<00:20,  1.30s/it] 53%|██████████████████████▊                    | 17/32 [00:22<00:19,  1.31s/it] 56%|████████████████████████▏                  | 18/32 [00:23<00:18,  1.30s/it] 59%|█████████████████████████▌                 | 19/32 [00:24<00:17,  1.31s/it] 62%|██████████████████████████▉                | 20/32 [00:26<00:15,  1.30s/it] 66%|████████████████████████████▏              | 21/32 [00:27<00:14,  1.34s/it] 69%|█████████████████████████████▌             | 22/32 [00:28<00:13,  1.32s/it] 72%|██████████████████████████████▉            | 23/32 [00:30<00:11,  1.31s/it] 75%|████████████████████████████████▎          | 24/32 [00:31<00:10,  1.31s/it] 78%|█████████████████████████████████▌         | 25/32 [00:32<00:09,  1.30s/it] 81%|██████████████████████████████████▉        | 26/32 [00:33<00:07,  1.30s/it] 84%|████████████████████████████████████▎      | 27/32 [00:35<00:06,  1.30s/it] 88%|█████████████████████████████████████▋     | 28/32 [00:36<00:05,  1.29s/it] 91%|██████████████████████████████████████▉    | 29/32 [00:37<00:03,  1.29s/it] 94%|████████████████████████████████████████▎  | 30/32 [00:39<00:02,  1.30s/it] 97%|█████████████████████████████████████████▋ | 31/32 [00:40<00:01,  1.30s/it]100%|███████████████████████████████████████████| 32/32 [00:41<00:00,  1.29s/it]100%|███████████████████████████████████████████| 32/32 [00:41<00:00,  1.30s/it]
Consecutive layer pairs:  torch.Size([32, 814, 814])
 21%|████████▌                                | 17/81 [20:09<1:09:21, 65.02s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:01<00:43,  1.41s/it]  6%|██▊                                         | 2/32 [00:02<00:42,  1.42s/it]  9%|████▏                                       | 3/32 [00:04<00:42,  1.45s/it] 12%|█████▌                                      | 4/32 [00:05<00:41,  1.48s/it] 16%|██████▉                                     | 5/32 [00:07<00:39,  1.46s/it] 19%|████████▎                                   | 6/32 [00:08<00:37,  1.45s/it] 22%|█████████▋                                  | 7/32 [00:10<00:36,  1.45s/it] 25%|███████████                                 | 8/32 [00:11<00:34,  1.44s/it] 28%|████████████▍                               | 9/32 [00:13<00:33,  1.46s/it] 31%|█████████████▍                             | 10/32 [00:14<00:31,  1.45s/it] 34%|██████████████▊                            | 11/32 [00:15<00:30,  1.45s/it] 38%|████████████████▏                          | 12/32 [00:17<00:28,  1.44s/it] 41%|█████████████████▍                         | 13/32 [00:18<00:27,  1.45s/it] 44%|██████████████████▊                        | 14/32 [00:20<00:26,  1.45s/it] 47%|████████████████████▏                      | 15/32 [00:21<00:24,  1.45s/it] 50%|█████████████████████▌                     | 16/32 [00:23<00:23,  1.45s/it] 53%|██████████████████████▊                    | 17/32 [00:24<00:21,  1.44s/it] 56%|████████████████████████▏                  | 18/32 [00:26<00:20,  1.44s/it] 59%|█████████████████████████▌                 | 19/32 [00:27<00:18,  1.46s/it] 62%|██████████████████████████▉                | 20/32 [00:28<00:17,  1.45s/it] 66%|████████████████████████████▏              | 21/32 [00:30<00:15,  1.45s/it] 69%|█████████████████████████████▌             | 22/32 [00:31<00:14,  1.44s/it] 72%|██████████████████████████████▉            | 23/32 [00:33<00:12,  1.44s/it] 75%|████████████████████████████████▎          | 24/32 [00:34<00:11,  1.44s/it] 78%|█████████████████████████████████▌         | 25/32 [00:36<00:10,  1.44s/it] 81%|██████████████████████████████████▉        | 26/32 [00:37<00:08,  1.44s/it] 84%|████████████████████████████████████▎      | 27/32 [00:39<00:07,  1.44s/it] 88%|█████████████████████████████████████▋     | 28/32 [00:40<00:05,  1.44s/it] 91%|██████████████████████████████████████▉    | 29/32 [00:41<00:04,  1.44s/it] 94%|████████████████████████████████████████▎  | 30/32 [00:43<00:02,  1.44s/it] 97%|█████████████████████████████████████████▋ | 31/32 [00:44<00:01,  1.44s/it]100%|███████████████████████████████████████████| 32/32 [00:46<00:00,  1.44s/it]100%|███████████████████████████████████████████| 32/32 [00:46<00:00,  1.44s/it]
Consecutive layer pairs:  torch.Size([32, 846, 846])
 22%|█████████                                | 18/81 [21:20<1:10:21, 67.01s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:01<00:56,  1.82s/it]  6%|██▊                                         | 2/32 [00:03<00:53,  1.79s/it]  9%|████▏                                       | 3/32 [00:05<00:51,  1.78s/it] 12%|█████▌                                      | 4/32 [00:07<00:49,  1.78s/it] 16%|██████▉                                     | 5/32 [00:08<00:47,  1.77s/it] 19%|████████▎                                   | 6/32 [00:10<00:46,  1.77s/it] 22%|█████████▋                                  | 7/32 [00:12<00:44,  1.76s/it] 25%|███████████                                 | 8/32 [00:14<00:42,  1.76s/it] 28%|████████████▍                               | 9/32 [00:16<00:41,  1.80s/it] 31%|█████████████▍                             | 10/32 [00:17<00:39,  1.79s/it] 34%|██████████████▊                            | 11/32 [00:19<00:37,  1.78s/it] 38%|████████████████▏                          | 12/32 [00:21<00:35,  1.77s/it] 41%|█████████████████▍                         | 13/32 [00:23<00:33,  1.78s/it] 44%|██████████████████▊                        | 14/32 [00:24<00:31,  1.77s/it] 47%|████████████████████▏                      | 15/32 [00:26<00:30,  1.77s/it] 50%|█████████████████████▌                     | 16/32 [00:28<00:28,  1.77s/it] 53%|██████████████████████▊                    | 17/32 [00:30<00:26,  1.77s/it] 56%|████████████████████████▏                  | 18/32 [00:31<00:24,  1.77s/it] 59%|█████████████████████████▌                 | 19/32 [00:33<00:22,  1.77s/it] 62%|██████████████████████████▉                | 20/32 [00:35<00:21,  1.76s/it] 66%|████████████████████████████▏              | 21/32 [00:37<00:19,  1.76s/it] 69%|█████████████████████████████▌             | 22/32 [00:38<00:17,  1.75s/it] 72%|██████████████████████████████▉            | 23/32 [00:40<00:15,  1.75s/it] 75%|████████████████████████████████▎          | 24/32 [00:42<00:14,  1.77s/it] 78%|█████████████████████████████████▌         | 25/32 [00:44<00:12,  1.78s/it] 81%|██████████████████████████████████▉        | 26/32 [00:46<00:10,  1.77s/it] 84%|████████████████████████████████████▎      | 27/32 [00:48<00:09,  1.87s/it] 88%|█████████████████████████████████████▋     | 28/32 [00:50<00:07,  1.86s/it] 91%|██████████████████████████████████████▉    | 29/32 [00:51<00:05,  1.84s/it] 94%|████████████████████████████████████████▎  | 30/32 [00:53<00:03,  1.82s/it] 97%|█████████████████████████████████████████▋ | 31/32 [00:55<00:01,  1.80s/it]100%|███████████████████████████████████████████| 32/32 [00:57<00:00,  1.79s/it]100%|███████████████████████████████████████████| 32/32 [00:57<00:00,  1.78s/it]
Consecutive layer pairs:  torch.Size([32, 915, 915])
 23%|█████████▌                               | 19/81 [22:47<1:15:22, 72.94s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:01<00:54,  1.76s/it]  6%|██▊                                         | 2/32 [00:03<00:54,  1.81s/it]  9%|████▏                                       | 3/32 [00:05<00:51,  1.79s/it] 12%|█████▌                                      | 4/32 [00:07<00:49,  1.77s/it] 16%|██████▉                                     | 5/32 [00:08<00:47,  1.77s/it] 19%|████████▎                                   | 6/32 [00:10<00:45,  1.76s/it] 22%|█████████▋                                  | 7/32 [00:12<00:44,  1.76s/it] 25%|███████████                                 | 8/32 [00:14<00:42,  1.76s/it] 28%|████████████▍                               | 9/32 [00:15<00:40,  1.76s/it] 31%|█████████████▍                             | 10/32 [00:17<00:38,  1.76s/it] 34%|██████████████▊                            | 11/32 [00:19<00:37,  1.78s/it] 38%|████████████████▏                          | 12/32 [00:21<00:35,  1.77s/it] 41%|█████████████████▍                         | 13/32 [00:23<00:33,  1.78s/it] 44%|██████████████████▊                        | 14/32 [00:24<00:32,  1.78s/it] 47%|████████████████████▏                      | 15/32 [00:26<00:30,  1.78s/it] 50%|█████████████████████▌                     | 16/32 [00:28<00:28,  1.77s/it] 53%|██████████████████████▊                    | 17/32 [00:30<00:26,  1.77s/it] 56%|████████████████████████▏                  | 18/32 [00:31<00:24,  1.77s/it] 59%|█████████████████████████▌                 | 19/32 [00:33<00:23,  1.78s/it] 62%|██████████████████████████▉                | 20/32 [00:35<00:21,  1.77s/it] 66%|████████████████████████████▏              | 21/32 [00:37<00:19,  1.78s/it] 69%|█████████████████████████████▌             | 22/32 [00:39<00:17,  1.78s/it] 72%|██████████████████████████████▉            | 23/32 [00:40<00:15,  1.77s/it] 75%|████████████████████████████████▎          | 24/32 [00:42<00:14,  1.77s/it] 78%|█████████████████████████████████▌         | 25/32 [00:44<00:12,  1.78s/it] 81%|██████████████████████████████████▉        | 26/32 [00:46<00:10,  1.77s/it] 84%|████████████████████████████████████▎      | 27/32 [00:47<00:08,  1.77s/it] 88%|█████████████████████████████████████▋     | 28/32 [00:49<00:07,  1.77s/it] 91%|██████████████████████████████████████▉    | 29/32 [00:51<00:05,  1.77s/it] 94%|████████████████████████████████████████▎  | 30/32 [00:53<00:03,  1.77s/it] 97%|█████████████████████████████████████████▋ | 31/32 [00:54<00:01,  1.78s/it]100%|███████████████████████████████████████████| 32/32 [00:56<00:00,  1.77s/it]100%|███████████████████████████████████████████| 32/32 [00:56<00:00,  1.77s/it]
Consecutive layer pairs:  torch.Size([32, 915, 915])
 25%|██████████                               | 20/81 [24:15<1:18:38, 77.35s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:01<00:54,  1.74s/it]  6%|██▊                                         | 2/32 [00:03<00:57,  1.92s/it]  9%|████▏                                       | 3/32 [00:05<00:53,  1.84s/it] 12%|█████▌                                      | 4/32 [00:07<00:50,  1.81s/it] 16%|██████▉                                     | 5/32 [00:09<00:49,  1.83s/it] 19%|████████▎                                   | 6/32 [00:10<00:47,  1.81s/it] 22%|█████████▋                                  | 7/32 [00:12<00:46,  1.85s/it] 25%|███████████                                 | 8/32 [00:14<00:44,  1.85s/it] 28%|████████████▍                               | 9/32 [00:16<00:43,  1.90s/it] 31%|█████████████▍                             | 10/32 [00:18<00:41,  1.90s/it] 34%|██████████████▊                            | 11/32 [00:20<00:39,  1.87s/it] 38%|████████████████▏                          | 12/32 [00:22<00:36,  1.84s/it] 41%|█████████████████▍                         | 13/32 [00:23<00:34,  1.82s/it] 44%|██████████████████▊                        | 14/32 [00:25<00:32,  1.81s/it] 47%|████████████████████▏                      | 15/32 [00:27<00:30,  1.80s/it] 50%|█████████████████████▌                     | 16/32 [00:29<00:28,  1.78s/it] 53%|██████████████████████▊                    | 17/32 [00:31<00:26,  1.78s/it] 56%|████████████████████████▏                  | 18/32 [00:32<00:24,  1.77s/it] 59%|█████████████████████████▌                 | 19/32 [00:34<00:23,  1.82s/it] 62%|██████████████████████████▉                | 20/32 [00:36<00:21,  1.80s/it] 66%|████████████████████████████▏              | 21/32 [00:38<00:19,  1.79s/it] 69%|█████████████████████████████▌             | 22/32 [00:39<00:17,  1.78s/it] 72%|██████████████████████████████▉            | 23/32 [00:41<00:16,  1.78s/it] 75%|████████████████████████████████▎          | 24/32 [00:43<00:14,  1.79s/it] 78%|█████████████████████████████████▌         | 25/32 [00:45<00:12,  1.78s/it] 81%|██████████████████████████████████▉        | 26/32 [00:47<00:10,  1.78s/it] 84%|████████████████████████████████████▎      | 27/32 [00:48<00:08,  1.77s/it] 88%|█████████████████████████████████████▋     | 28/32 [00:50<00:07,  1.77s/it] 91%|██████████████████████████████████████▉    | 29/32 [00:52<00:05,  1.80s/it] 94%|████████████████████████████████████████▎  | 30/32 [00:54<00:03,  1.79s/it] 97%|█████████████████████████████████████████▋ | 31/32 [00:56<00:01,  1.78s/it]100%|███████████████████████████████████████████| 32/32 [00:57<00:00,  1.78s/it]100%|███████████████████████████████████████████| 32/32 [00:57<00:00,  1.81s/it]
Consecutive layer pairs:  torch.Size([32, 915, 915])
 26%|██████████▋                              | 21/81 [25:42<1:20:22, 80.38s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:01<00:40,  1.30s/it]  6%|██▊                                         | 2/32 [00:02<00:40,  1.36s/it]  9%|████▏                                       | 3/32 [00:03<00:38,  1.33s/it] 12%|█████▌                                      | 4/32 [00:05<00:37,  1.33s/it] 16%|██████▉                                     | 5/32 [00:06<00:35,  1.32s/it] 19%|████████▎                                   | 6/32 [00:07<00:34,  1.33s/it] 22%|█████████▋                                  | 7/32 [00:09<00:33,  1.34s/it] 25%|███████████                                 | 8/32 [00:10<00:31,  1.33s/it] 28%|████████████▍                               | 9/32 [00:11<00:30,  1.32s/it] 31%|█████████████▍                             | 10/32 [00:13<00:29,  1.33s/it] 34%|██████████████▊                            | 11/32 [00:14<00:27,  1.33s/it] 38%|████████████████▏                          | 12/32 [00:16<00:26,  1.34s/it] 41%|█████████████████▍                         | 13/32 [00:17<00:26,  1.37s/it] 44%|██████████████████▊                        | 14/32 [00:18<00:24,  1.35s/it] 47%|████████████████████▏                      | 15/32 [00:20<00:22,  1.33s/it] 50%|█████████████████████▌                     | 16/32 [00:21<00:21,  1.33s/it] 53%|██████████████████████▊                    | 17/32 [00:22<00:19,  1.31s/it] 56%|████████████████████████▏                  | 18/32 [00:23<00:18,  1.30s/it] 59%|█████████████████████████▌                 | 19/32 [00:25<00:16,  1.29s/it] 62%|██████████████████████████▉                | 20/32 [00:26<00:15,  1.29s/it] 66%|████████████████████████████▏              | 21/32 [00:27<00:14,  1.29s/it] 69%|█████████████████████████████▌             | 22/32 [00:29<00:13,  1.33s/it] 72%|██████████████████████████████▉            | 23/32 [00:30<00:11,  1.33s/it] 75%|████████████████████████████████▎          | 24/32 [00:31<00:10,  1.32s/it] 78%|█████████████████████████████████▌         | 25/32 [00:33<00:09,  1.31s/it] 81%|██████████████████████████████████▉        | 26/32 [00:34<00:07,  1.32s/it] 84%|████████████████████████████████████▎      | 27/32 [00:35<00:06,  1.31s/it] 88%|█████████████████████████████████████▋     | 28/32 [00:37<00:05,  1.31s/it] 91%|██████████████████████████████████████▉    | 29/32 [00:38<00:04,  1.33s/it] 94%|████████████████████████████████████████▎  | 30/32 [00:39<00:02,  1.32s/it] 97%|█████████████████████████████████████████▋ | 31/32 [00:41<00:01,  1.32s/it]100%|███████████████████████████████████████████| 32/32 [00:42<00:00,  1.31s/it]100%|███████████████████████████████████████████| 32/32 [00:42<00:00,  1.32s/it]
Consecutive layer pairs:  torch.Size([32, 818, 818])
 27%|███████████▏                             | 22/81 [26:50<1:15:15, 76.53s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:01<00:40,  1.31s/it]  6%|██▊                                         | 2/32 [00:02<00:39,  1.30s/it]  9%|████▏                                       | 3/32 [00:03<00:37,  1.30s/it] 12%|█████▌                                      | 4/32 [00:05<00:36,  1.30s/it] 16%|██████▉                                     | 5/32 [00:06<00:35,  1.30s/it] 19%|████████▎                                   | 6/32 [00:07<00:33,  1.30s/it] 22%|█████████▋                                  | 7/32 [00:09<00:32,  1.30s/it] 25%|███████████                                 | 8/32 [00:10<00:31,  1.30s/it] 28%|████████████▍                               | 9/32 [00:11<00:29,  1.30s/it] 31%|█████████████▍                             | 10/32 [00:13<00:28,  1.31s/it] 34%|██████████████▊                            | 11/32 [00:14<00:27,  1.30s/it] 38%|████████████████▏                          | 12/32 [00:15<00:25,  1.30s/it] 41%|█████████████████▍                         | 13/32 [00:16<00:24,  1.30s/it] 44%|██████████████████▊                        | 14/32 [00:18<00:23,  1.29s/it] 47%|████████████████████▏                      | 15/32 [00:19<00:22,  1.30s/it] 50%|█████████████████████▌                     | 16/32 [00:20<00:20,  1.30s/it] 53%|██████████████████████▊                    | 17/32 [00:22<00:19,  1.31s/it] 56%|████████████████████████▏                  | 18/32 [00:23<00:18,  1.32s/it] 59%|█████████████████████████▌                 | 19/32 [00:24<00:17,  1.32s/it] 62%|██████████████████████████▉                | 20/32 [00:26<00:15,  1.32s/it] 66%|████████████████████████████▏              | 21/32 [00:27<00:14,  1.31s/it] 69%|█████████████████████████████▌             | 22/32 [00:28<00:13,  1.31s/it] 72%|██████████████████████████████▉            | 23/32 [00:30<00:11,  1.31s/it] 75%|████████████████████████████████▎          | 24/32 [00:31<00:10,  1.36s/it] 78%|█████████████████████████████████▌         | 25/32 [00:32<00:09,  1.34s/it] 81%|██████████████████████████████████▉        | 26/32 [00:34<00:08,  1.34s/it] 84%|████████████████████████████████████▎      | 27/32 [00:35<00:06,  1.33s/it] 88%|█████████████████████████████████████▋     | 28/32 [00:36<00:05,  1.32s/it] 91%|██████████████████████████████████████▉    | 29/32 [00:38<00:03,  1.32s/it] 94%|████████████████████████████████████████▎  | 30/32 [00:39<00:02,  1.32s/it] 97%|█████████████████████████████████████████▋ | 31/32 [00:40<00:01,  1.33s/it]100%|███████████████████████████████████████████| 32/32 [00:42<00:00,  1.32s/it]100%|███████████████████████████████████████████| 32/32 [00:42<00:00,  1.31s/it]
Consecutive layer pairs:  torch.Size([32, 818, 818])
 28%|███████████▋                             | 23/81 [27:58<1:11:30, 73.97s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:01<00:39,  1.28s/it]  6%|██▊                                         | 2/32 [00:02<00:38,  1.30s/it]  9%|████▏                                       | 3/32 [00:03<00:37,  1.30s/it] 12%|█████▌                                      | 4/32 [00:05<00:36,  1.30s/it] 16%|██████▉                                     | 5/32 [00:06<00:34,  1.30s/it] 19%|████████▎                                   | 6/32 [00:07<00:33,  1.30s/it] 22%|█████████▋                                  | 7/32 [00:09<00:32,  1.30s/it] 25%|███████████                                 | 8/32 [00:10<00:31,  1.30s/it] 28%|████████████▍                               | 9/32 [00:11<00:30,  1.32s/it] 31%|█████████████▍                             | 10/32 [00:13<00:28,  1.31s/it] 34%|██████████████▊                            | 11/32 [00:14<00:28,  1.34s/it] 38%|████████████████▏                          | 12/32 [00:15<00:26,  1.33s/it] 41%|█████████████████▍                         | 13/32 [00:17<00:25,  1.32s/it] 44%|██████████████████▊                        | 14/32 [00:18<00:23,  1.31s/it] 47%|████████████████████▏                      | 15/32 [00:19<00:22,  1.31s/it] 50%|█████████████████████▌                     | 16/32 [00:20<00:20,  1.30s/it] 53%|██████████████████████▊                    | 17/32 [00:22<00:19,  1.31s/it] 56%|████████████████████████▏                  | 18/32 [00:23<00:18,  1.31s/it] 59%|█████████████████████████▌                 | 19/32 [00:24<00:16,  1.30s/it] 62%|██████████████████████████▉                | 20/32 [00:26<00:15,  1.30s/it] 66%|████████████████████████████▏              | 21/32 [00:27<00:14,  1.30s/it] 69%|█████████████████████████████▌             | 22/32 [00:28<00:12,  1.30s/it] 72%|██████████████████████████████▉            | 23/32 [00:30<00:11,  1.30s/it] 75%|████████████████████████████████▎          | 24/32 [00:31<00:10,  1.30s/it] 78%|█████████████████████████████████▌         | 25/32 [00:32<00:09,  1.30s/it] 81%|██████████████████████████████████▉        | 26/32 [00:34<00:07,  1.33s/it] 84%|████████████████████████████████████▎      | 27/32 [00:35<00:06,  1.32s/it] 88%|█████████████████████████████████████▋     | 28/32 [00:36<00:05,  1.31s/it] 91%|██████████████████████████████████████▉    | 29/32 [00:37<00:03,  1.32s/it] 94%|████████████████████████████████████████▎  | 30/32 [00:39<00:02,  1.32s/it] 97%|█████████████████████████████████████████▋ | 31/32 [00:40<00:01,  1.32s/it]100%|███████████████████████████████████████████| 32/32 [00:41<00:00,  1.32s/it]100%|███████████████████████████████████████████| 32/32 [00:41<00:00,  1.31s/it]
Consecutive layer pairs:  torch.Size([32, 818, 818])
 30%|████████████▏                            | 24/81 [29:09<1:09:30, 73.17s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:01<00:47,  1.54s/it]  6%|██▊                                         | 2/32 [00:03<00:46,  1.53s/it]  9%|████▏                                       | 3/32 [00:04<00:44,  1.53s/it] 12%|█████▌                                      | 4/32 [00:06<00:42,  1.52s/it] 16%|██████▉                                     | 5/32 [00:07<00:41,  1.52s/it] 19%|████████▎                                   | 6/32 [00:09<00:39,  1.53s/it] 22%|█████████▋                                  | 7/32 [00:10<00:38,  1.53s/it] 25%|███████████                                 | 8/32 [00:12<00:36,  1.54s/it] 28%|████████████▍                               | 9/32 [00:13<00:35,  1.54s/it] 31%|█████████████▍                             | 10/32 [00:15<00:33,  1.53s/it] 34%|██████████████▊                            | 11/32 [00:16<00:32,  1.53s/it] 38%|████████████████▏                          | 12/32 [00:18<00:30,  1.53s/it] 41%|█████████████████▍                         | 13/32 [00:19<00:29,  1.53s/it] 44%|██████████████████▊                        | 14/32 [00:21<00:27,  1.53s/it] 47%|████████████████████▏                      | 15/32 [00:22<00:25,  1.52s/it] 50%|█████████████████████▌                     | 16/32 [00:24<00:24,  1.52s/it] 53%|██████████████████████▊                    | 17/32 [00:26<00:22,  1.53s/it] 56%|████████████████████████▏                  | 18/32 [00:27<00:21,  1.53s/it] 59%|█████████████████████████▌                 | 19/32 [00:29<00:19,  1.53s/it] 62%|██████████████████████████▉                | 20/32 [00:30<00:18,  1.53s/it] 66%|████████████████████████████▏              | 21/32 [00:32<00:17,  1.55s/it] 69%|█████████████████████████████▌             | 22/32 [00:33<00:15,  1.54s/it] 72%|██████████████████████████████▉            | 23/32 [00:35<00:13,  1.53s/it] 75%|████████████████████████████████▎          | 24/32 [00:36<00:12,  1.53s/it] 78%|█████████████████████████████████▌         | 25/32 [00:38<00:10,  1.52s/it] 81%|██████████████████████████████████▉        | 26/32 [00:39<00:09,  1.52s/it] 84%|████████████████████████████████████▎      | 27/32 [00:41<00:07,  1.54s/it] 88%|█████████████████████████████████████▋     | 28/32 [00:42<00:06,  1.53s/it] 91%|██████████████████████████████████████▉    | 29/32 [00:44<00:04,  1.57s/it] 94%|████████████████████████████████████████▎  | 30/32 [00:46<00:03,  1.56s/it] 97%|█████████████████████████████████████████▋ | 31/32 [00:47<00:01,  1.55s/it]100%|███████████████████████████████████████████| 32/32 [00:49<00:00,  1.56s/it]100%|███████████████████████████████████████████| 32/32 [00:49<00:00,  1.54s/it]
Consecutive layer pairs:  torch.Size([32, 859, 859])
 31%|████████████▋                            | 25/81 [30:29<1:10:08, 75.15s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:01<00:36,  1.18s/it]  6%|██▊                                         | 2/32 [00:02<00:34,  1.16s/it]  9%|████▏                                       | 3/32 [00:03<00:33,  1.16s/it] 12%|█████▌                                      | 4/32 [00:04<00:32,  1.16s/it] 16%|██████▉                                     | 5/32 [00:05<00:31,  1.15s/it] 19%|████████▎                                   | 6/32 [00:06<00:30,  1.15s/it] 22%|█████████▋                                  | 7/32 [00:08<00:28,  1.15s/it] 25%|███████████                                 | 8/32 [00:09<00:27,  1.15s/it] 28%|████████████▍                               | 9/32 [00:10<00:26,  1.15s/it] 31%|█████████████▍                             | 10/32 [00:11<00:25,  1.16s/it] 34%|██████████████▊                            | 11/32 [00:12<00:24,  1.16s/it] 38%|████████████████▏                          | 12/32 [00:13<00:23,  1.16s/it] 41%|█████████████████▍                         | 13/32 [00:15<00:22,  1.16s/it] 44%|██████████████████▊                        | 14/32 [00:16<00:20,  1.16s/it] 47%|████████████████████▏                      | 15/32 [00:17<00:19,  1.16s/it] 50%|█████████████████████▌                     | 16/32 [00:18<00:18,  1.17s/it] 53%|██████████████████████▊                    | 17/32 [00:19<00:17,  1.16s/it] 56%|████████████████████████▏                  | 18/32 [00:20<00:16,  1.15s/it] 59%|█████████████████████████▌                 | 19/32 [00:21<00:14,  1.15s/it] 62%|██████████████████████████▉                | 20/32 [00:23<00:13,  1.15s/it] 66%|████████████████████████████▏              | 21/32 [00:24<00:12,  1.15s/it] 69%|█████████████████████████████▌             | 22/32 [00:25<00:12,  1.22s/it] 72%|██████████████████████████████▉            | 23/32 [00:26<00:11,  1.23s/it] 75%|████████████████████████████████▎          | 24/32 [00:28<00:09,  1.22s/it] 78%|█████████████████████████████████▌         | 25/32 [00:29<00:08,  1.20s/it] 81%|██████████████████████████████████▉        | 26/32 [00:30<00:07,  1.18s/it] 84%|████████████████████████████████████▎      | 27/32 [00:31<00:05,  1.17s/it] 88%|█████████████████████████████████████▋     | 28/32 [00:32<00:04,  1.17s/it] 91%|██████████████████████████████████████▉    | 29/32 [00:33<00:03,  1.16s/it] 94%|████████████████████████████████████████▎  | 30/32 [00:35<00:02,  1.16s/it] 97%|█████████████████████████████████████████▋ | 31/32 [00:36<00:01,  1.16s/it]100%|███████████████████████████████████████████| 32/32 [00:37<00:00,  1.16s/it]100%|███████████████████████████████████████████| 32/32 [00:37<00:00,  1.17s/it]
Consecutive layer pairs:  torch.Size([32, 788, 788])
 32%|█████████████▏                           | 26/81 [31:26<1:04:05, 69.91s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:01<00:36,  1.17s/it]  6%|██▊                                         | 2/32 [00:02<00:35,  1.19s/it]  9%|████▏                                       | 3/32 [00:03<00:34,  1.19s/it] 12%|█████▌                                      | 4/32 [00:04<00:33,  1.19s/it] 16%|██████▉                                     | 5/32 [00:05<00:32,  1.20s/it] 19%|████████▎                                   | 6/32 [00:07<00:31,  1.19s/it] 22%|█████████▋                                  | 7/32 [00:08<00:29,  1.20s/it] 25%|███████████                                 | 8/32 [00:09<00:28,  1.19s/it] 28%|████████████▍                               | 9/32 [00:10<00:27,  1.20s/it] 31%|█████████████▍                             | 10/32 [00:11<00:26,  1.20s/it] 34%|██████████████▊                            | 11/32 [00:13<00:25,  1.20s/it] 38%|████████████████▏                          | 12/32 [00:14<00:23,  1.20s/it] 41%|█████████████████▍                         | 13/32 [00:15<00:22,  1.19s/it] 44%|██████████████████▊                        | 14/32 [00:16<00:21,  1.20s/it] 47%|████████████████████▏                      | 15/32 [00:17<00:20,  1.21s/it] 50%|█████████████████████▌                     | 16/32 [00:19<00:19,  1.20s/it] 53%|██████████████████████▊                    | 17/32 [00:20<00:18,  1.21s/it] 56%|████████████████████████▏                  | 18/32 [00:21<00:16,  1.20s/it] 59%|█████████████████████████▌                 | 19/32 [00:22<00:15,  1.22s/it] 62%|██████████████████████████▉                | 20/32 [00:24<00:14,  1.21s/it] 66%|████████████████████████████▏              | 21/32 [00:25<00:13,  1.21s/it] 69%|█████████████████████████████▌             | 22/32 [00:26<00:12,  1.21s/it] 72%|██████████████████████████████▉            | 23/32 [00:27<00:11,  1.23s/it] 75%|████████████████████████████████▎          | 24/32 [00:28<00:09,  1.22s/it] 78%|█████████████████████████████████▌         | 25/32 [00:30<00:08,  1.22s/it] 81%|██████████████████████████████████▉        | 26/32 [00:31<00:07,  1.23s/it] 84%|████████████████████████████████████▎      | 27/32 [00:32<00:06,  1.22s/it] 88%|█████████████████████████████████████▋     | 28/32 [00:33<00:04,  1.22s/it] 91%|██████████████████████████████████████▉    | 29/32 [00:35<00:03,  1.24s/it] 94%|████████████████████████████████████████▎  | 30/32 [00:36<00:02,  1.23s/it] 97%|█████████████████████████████████████████▋ | 31/32 [00:37<00:01,  1.22s/it]100%|███████████████████████████████████████████| 32/32 [00:38<00:00,  1.21s/it]100%|███████████████████████████████████████████| 32/32 [00:38<00:00,  1.21s/it]
Consecutive layer pairs:  torch.Size([32, 797, 797])
 33%|██████████████▎                            | 27/81 [32:24<59:40, 66.30s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:00<00:25,  1.22it/s]  6%|██▊                                         | 2/32 [00:01<00:25,  1.20it/s]  9%|████▏                                       | 3/32 [00:02<00:24,  1.20it/s] 12%|█████▌                                      | 4/32 [00:03<00:23,  1.18it/s] 16%|██████▉                                     | 5/32 [00:04<00:22,  1.18it/s] 19%|████████▎                                   | 6/32 [00:05<00:21,  1.19it/s] 22%|█████████▋                                  | 7/32 [00:05<00:21,  1.18it/s] 25%|███████████                                 | 8/32 [00:06<00:20,  1.19it/s] 28%|████████████▍                               | 9/32 [00:07<00:19,  1.19it/s] 31%|█████████████▍                             | 10/32 [00:08<00:18,  1.19it/s] 34%|██████████████▊                            | 11/32 [00:09<00:17,  1.19it/s] 38%|████████████████▏                          | 12/32 [00:10<00:16,  1.19it/s] 41%|█████████████████▍                         | 13/32 [00:10<00:16,  1.18it/s] 44%|██████████████████▊                        | 14/32 [00:11<00:15,  1.18it/s] 47%|████████████████████▏                      | 15/32 [00:12<00:14,  1.18it/s] 50%|█████████████████████▌                     | 16/32 [00:13<00:13,  1.19it/s] 53%|██████████████████████▊                    | 17/32 [00:14<00:12,  1.18it/s] 56%|████████████████████████▏                  | 18/32 [00:15<00:11,  1.19it/s] 59%|█████████████████████████▌                 | 19/32 [00:16<00:10,  1.19it/s] 62%|██████████████████████████▉                | 20/32 [00:16<00:10,  1.19it/s] 66%|████████████████████████████▏              | 21/32 [00:17<00:09,  1.19it/s] 69%|█████████████████████████████▌             | 22/32 [00:18<00:08,  1.19it/s] 72%|██████████████████████████████▉            | 23/32 [00:19<00:07,  1.19it/s] 75%|████████████████████████████████▎          | 24/32 [00:20<00:06,  1.19it/s] 78%|█████████████████████████████████▌         | 25/32 [00:21<00:05,  1.18it/s] 81%|██████████████████████████████████▉        | 26/32 [00:21<00:05,  1.18it/s] 84%|████████████████████████████████████▎      | 27/32 [00:22<00:04,  1.19it/s] 88%|█████████████████████████████████████▋     | 28/32 [00:23<00:03,  1.19it/s] 91%|██████████████████████████████████████▉    | 29/32 [00:24<00:02,  1.19it/s] 94%|████████████████████████████████████████▎  | 30/32 [00:25<00:01,  1.20it/s] 97%|█████████████████████████████████████████▋ | 31/32 [00:26<00:00,  1.20it/s]100%|███████████████████████████████████████████| 32/32 [00:26<00:00,  1.19it/s]100%|███████████████████████████████████████████| 32/32 [00:26<00:00,  1.19it/s]
Consecutive layer pairs:  torch.Size([32, 707, 707])
 35%|██████████████▊                            | 28/81 [33:07<52:23, 59.32s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:00<00:25,  1.21it/s]  6%|██▊                                         | 2/32 [00:01<00:24,  1.20it/s]  9%|████▏                                       | 3/32 [00:02<00:24,  1.20it/s] 12%|█████▌                                      | 4/32 [00:03<00:23,  1.20it/s] 16%|██████▉                                     | 5/32 [00:04<00:22,  1.20it/s] 19%|████████▎                                   | 6/32 [00:05<00:21,  1.20it/s] 22%|█████████▋                                  | 7/32 [00:05<00:21,  1.18it/s] 25%|███████████                                 | 8/32 [00:06<00:20,  1.18it/s] 28%|████████████▍                               | 9/32 [00:07<00:19,  1.16it/s] 31%|█████████████▍                             | 10/32 [00:08<00:20,  1.09it/s] 34%|██████████████▊                            | 11/32 [00:09<00:18,  1.12it/s] 38%|████████████████▏                          | 12/32 [00:10<00:17,  1.14it/s] 41%|█████████████████▍                         | 13/32 [00:11<00:16,  1.15it/s] 44%|██████████████████▊                        | 14/32 [00:12<00:15,  1.16it/s] 47%|████████████████████▏                      | 15/32 [00:12<00:14,  1.17it/s] 50%|█████████████████████▌                     | 16/32 [00:13<00:13,  1.18it/s] 53%|██████████████████████▊                    | 17/32 [00:14<00:12,  1.18it/s] 56%|████████████████████████▏                  | 18/32 [00:15<00:11,  1.19it/s] 59%|█████████████████████████▌                 | 19/32 [00:16<00:11,  1.17it/s] 62%|██████████████████████████▉                | 20/32 [00:17<00:10,  1.18it/s] 66%|████████████████████████████▏              | 21/32 [00:17<00:09,  1.18it/s] 69%|█████████████████████████████▌             | 22/32 [00:18<00:08,  1.16it/s] 72%|██████████████████████████████▉            | 23/32 [00:19<00:07,  1.16it/s] 75%|████████████████████████████████▎          | 24/32 [00:20<00:06,  1.16it/s] 78%|█████████████████████████████████▌         | 25/32 [00:21<00:06,  1.17it/s] 81%|██████████████████████████████████▉        | 26/32 [00:22<00:05,  1.13it/s] 84%|████████████████████████████████████▎      | 27/32 [00:23<00:04,  1.13it/s] 88%|█████████████████████████████████████▋     | 28/32 [00:24<00:03,  1.14it/s] 91%|██████████████████████████████████████▉    | 29/32 [00:24<00:02,  1.16it/s] 94%|████████████████████████████████████████▎  | 30/32 [00:25<00:01,  1.16it/s] 97%|█████████████████████████████████████████▋ | 31/32 [00:26<00:00,  1.17it/s]100%|███████████████████████████████████████████| 32/32 [00:27<00:00,  1.17it/s]100%|███████████████████████████████████████████| 32/32 [00:27<00:00,  1.17it/s]
Consecutive layer pairs:  torch.Size([32, 707, 707])
 36%|███████████████▍                           | 29/81 [33:52<47:37, 54.94s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:00<00:26,  1.15it/s]  6%|██▊                                         | 2/32 [00:01<00:25,  1.16it/s]  9%|████▏                                       | 3/32 [00:02<00:24,  1.18it/s] 12%|█████▌                                      | 4/32 [00:03<00:23,  1.18it/s] 16%|██████▉                                     | 5/32 [00:04<00:22,  1.19it/s] 19%|████████▎                                   | 6/32 [00:05<00:21,  1.19it/s] 22%|█████████▋                                  | 7/32 [00:05<00:21,  1.19it/s] 25%|███████████                                 | 8/32 [00:06<00:20,  1.19it/s] 28%|████████████▍                               | 9/32 [00:07<00:19,  1.19it/s] 31%|█████████████▍                             | 10/32 [00:08<00:20,  1.09it/s] 34%|██████████████▊                            | 11/32 [00:09<00:19,  1.09it/s] 38%|████████████████▏                          | 12/32 [00:10<00:18,  1.08it/s] 41%|█████████████████▍                         | 13/32 [00:11<00:17,  1.09it/s] 44%|██████████████████▊                        | 14/32 [00:12<00:16,  1.12it/s] 47%|████████████████████▏                      | 15/32 [00:13<00:14,  1.14it/s] 50%|█████████████████████▌                     | 16/32 [00:13<00:13,  1.15it/s] 53%|██████████████████████▊                    | 17/32 [00:14<00:12,  1.16it/s] 56%|████████████████████████▏                  | 18/32 [00:15<00:11,  1.17it/s] 59%|█████████████████████████▌                 | 19/32 [00:16<00:11,  1.18it/s] 62%|██████████████████████████▉                | 20/32 [00:17<00:10,  1.18it/s] 66%|████████████████████████████▏              | 21/32 [00:18<00:09,  1.18it/s] 69%|█████████████████████████████▌             | 22/32 [00:19<00:08,  1.18it/s] 72%|██████████████████████████████▉            | 23/32 [00:19<00:07,  1.18it/s] 75%|████████████████████████████████▎          | 24/32 [00:20<00:06,  1.17it/s] 78%|█████████████████████████████████▌         | 25/32 [00:21<00:05,  1.18it/s] 81%|██████████████████████████████████▉        | 26/32 [00:22<00:05,  1.19it/s] 84%|████████████████████████████████████▎      | 27/32 [00:23<00:04,  1.16it/s] 88%|█████████████████████████████████████▋     | 28/32 [00:24<00:03,  1.16it/s] 91%|██████████████████████████████████████▉    | 29/32 [00:25<00:02,  1.17it/s] 94%|████████████████████████████████████████▎  | 30/32 [00:25<00:01,  1.18it/s] 97%|█████████████████████████████████████████▋ | 31/32 [00:26<00:00,  1.19it/s]100%|███████████████████████████████████████████| 32/32 [00:27<00:00,  1.19it/s]100%|███████████████████████████████████████████| 32/32 [00:27<00:00,  1.16it/s]
Consecutive layer pairs:  torch.Size([32, 707, 707])
 37%|███████████████▉                           | 30/81 [34:39<44:42, 52.60s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:00<00:18,  1.72it/s]  6%|██▊                                         | 2/32 [00:01<00:17,  1.72it/s]  9%|████▏                                       | 3/32 [00:01<00:16,  1.72it/s] 12%|█████▌                                      | 4/32 [00:02<00:16,  1.70it/s] 16%|██████▉                                     | 5/32 [00:02<00:15,  1.69it/s] 19%|████████▎                                   | 6/32 [00:03<00:15,  1.70it/s] 22%|█████████▋                                  | 7/32 [00:04<00:14,  1.70it/s] 25%|███████████                                 | 8/32 [00:04<00:14,  1.71it/s] 28%|████████████▍                               | 9/32 [00:05<00:13,  1.71it/s] 31%|█████████████▍                             | 10/32 [00:05<00:12,  1.71it/s] 34%|██████████████▊                            | 11/32 [00:06<00:12,  1.71it/s] 38%|████████████████▏                          | 12/32 [00:07<00:11,  1.71it/s] 41%|█████████████████▍                         | 13/32 [00:07<00:11,  1.71it/s] 44%|██████████████████▊                        | 14/32 [00:08<00:10,  1.71it/s] 47%|████████████████████▏                      | 15/32 [00:08<00:10,  1.64it/s] 50%|█████████████████████▌                     | 16/32 [00:09<00:09,  1.66it/s] 53%|██████████████████████▊                    | 17/32 [00:10<00:08,  1.68it/s] 56%|████████████████████████▏                  | 18/32 [00:10<00:08,  1.70it/s] 59%|█████████████████████████▌                 | 19/32 [00:11<00:07,  1.63it/s] 62%|██████████████████████████▉                | 20/32 [00:11<00:07,  1.62it/s] 66%|████████████████████████████▏              | 21/32 [00:12<00:06,  1.63it/s] 69%|█████████████████████████████▌             | 22/32 [00:13<00:06,  1.66it/s] 72%|██████████████████████████████▉            | 23/32 [00:13<00:05,  1.68it/s] 75%|████████████████████████████████▎          | 24/32 [00:14<00:04,  1.68it/s] 78%|█████████████████████████████████▌         | 25/32 [00:14<00:04,  1.59it/s] 81%|██████████████████████████████████▉        | 26/32 [00:15<00:03,  1.63it/s] 84%|████████████████████████████████████▎      | 27/32 [00:16<00:03,  1.65it/s] 88%|█████████████████████████████████████▋     | 28/32 [00:16<00:02,  1.59it/s] 91%|██████████████████████████████████████▉    | 29/32 [00:17<00:01,  1.59it/s] 94%|████████████████████████████████████████▎  | 30/32 [00:18<00:01,  1.58it/s] 97%|█████████████████████████████████████████▋ | 31/32 [00:18<00:00,  1.62it/s]100%|███████████████████████████████████████████| 32/32 [00:19<00:00,  1.65it/s]100%|███████████████████████████████████████████| 32/32 [00:19<00:00,  1.66it/s]
Consecutive layer pairs:  torch.Size([32, 624, 624])
 38%|████████████████▍                          | 31/81 [35:15<39:41, 47.64s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:00<00:18,  1.65it/s]  6%|██▊                                         | 2/32 [00:01<00:18,  1.58it/s]  9%|████▏                                       | 3/32 [00:01<00:17,  1.64it/s] 12%|█████▌                                      | 4/32 [00:02<00:16,  1.67it/s] 16%|██████▉                                     | 5/32 [00:02<00:15,  1.69it/s] 19%|████████▎                                   | 6/32 [00:03<00:15,  1.71it/s] 22%|█████████▋                                  | 7/32 [00:04<00:14,  1.71it/s] 25%|███████████                                 | 8/32 [00:04<00:13,  1.72it/s] 28%|████████████▍                               | 9/32 [00:05<00:13,  1.70it/s] 31%|█████████████▍                             | 10/32 [00:05<00:13,  1.67it/s] 34%|██████████████▊                            | 11/32 [00:06<00:12,  1.67it/s] 38%|████████████████▏                          | 12/32 [00:07<00:11,  1.67it/s] 41%|█████████████████▍                         | 13/32 [00:07<00:11,  1.68it/s] 44%|██████████████████▊                        | 14/32 [00:08<00:10,  1.68it/s] 47%|████████████████████▏                      | 15/32 [00:08<00:10,  1.68it/s] 50%|█████████████████████▌                     | 16/32 [00:09<00:09,  1.69it/s] 53%|██████████████████████▊                    | 17/32 [00:10<00:08,  1.69it/s] 56%|████████████████████████▏                  | 18/32 [00:10<00:08,  1.70it/s] 59%|█████████████████████████▌                 | 19/32 [00:11<00:07,  1.71it/s] 62%|██████████████████████████▉                | 20/32 [00:11<00:07,  1.71it/s] 66%|████████████████████████████▏              | 21/32 [00:12<00:06,  1.71it/s] 69%|█████████████████████████████▌             | 22/32 [00:13<00:05,  1.71it/s] 72%|██████████████████████████████▉            | 23/32 [00:13<00:05,  1.72it/s] 75%|████████████████████████████████▎          | 24/32 [00:14<00:04,  1.72it/s] 78%|█████████████████████████████████▌         | 25/32 [00:14<00:04,  1.72it/s] 81%|██████████████████████████████████▉        | 26/32 [00:15<00:03,  1.72it/s] 84%|████████████████████████████████████▎      | 27/32 [00:15<00:02,  1.73it/s] 88%|█████████████████████████████████████▋     | 28/32 [00:16<00:02,  1.73it/s] 91%|██████████████████████████████████████▉    | 29/32 [00:17<00:01,  1.66it/s] 94%|████████████████████████████████████████▎  | 30/32 [00:17<00:01,  1.68it/s] 97%|█████████████████████████████████████████▋ | 31/32 [00:18<00:00,  1.69it/s]100%|███████████████████████████████████████████| 32/32 [00:18<00:00,  1.70it/s]100%|███████████████████████████████████████████| 32/32 [00:18<00:00,  1.69it/s]
Consecutive layer pairs:  torch.Size([32, 624, 624])
 40%|████████████████▉                          | 32/81 [35:51<35:56, 44.01s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:00<00:27,  1.15it/s]  6%|██▊                                         | 2/32 [00:01<00:26,  1.14it/s]  9%|████▏                                       | 3/32 [00:02<00:25,  1.15it/s] 12%|█████▌                                      | 4/32 [00:03<00:24,  1.15it/s] 16%|██████▉                                     | 5/32 [00:04<00:23,  1.13it/s] 19%|████████▎                                   | 6/32 [00:05<00:22,  1.14it/s] 22%|█████████▋                                  | 7/32 [00:06<00:21,  1.14it/s] 25%|███████████                                 | 8/32 [00:07<00:21,  1.14it/s] 28%|████████████▍                               | 9/32 [00:07<00:20,  1.14it/s] 31%|█████████████▍                             | 10/32 [00:08<00:19,  1.14it/s] 34%|██████████████▊                            | 11/32 [00:09<00:18,  1.14it/s] 38%|████████████████▏                          | 12/32 [00:10<00:17,  1.14it/s] 41%|█████████████████▍                         | 13/32 [00:11<00:16,  1.14it/s] 44%|██████████████████▊                        | 14/32 [00:12<00:15,  1.15it/s] 47%|████████████████████▏                      | 15/32 [00:13<00:14,  1.14it/s] 50%|█████████████████████▌                     | 16/32 [00:14<00:14,  1.14it/s] 53%|██████████████████████▊                    | 17/32 [00:14<00:13,  1.13it/s] 56%|████████████████████████▏                  | 18/32 [00:15<00:12,  1.12it/s] 59%|█████████████████████████▌                 | 19/32 [00:16<00:11,  1.13it/s] 62%|██████████████████████████▉                | 20/32 [00:17<00:10,  1.11it/s] 66%|████████████████████████████▏              | 21/32 [00:18<00:09,  1.11it/s] 69%|█████████████████████████████▌             | 22/32 [00:19<00:08,  1.11it/s] 72%|██████████████████████████████▉            | 23/32 [00:20<00:08,  1.12it/s] 75%|████████████████████████████████▎          | 24/32 [00:21<00:07,  1.12it/s] 78%|█████████████████████████████████▌         | 25/32 [00:22<00:06,  1.13it/s] 81%|██████████████████████████████████▉        | 26/32 [00:22<00:05,  1.13it/s] 84%|████████████████████████████████████▎      | 27/32 [00:23<00:04,  1.13it/s] 88%|█████████████████████████████████████▋     | 28/32 [00:24<00:03,  1.14it/s] 91%|██████████████████████████████████████▉    | 29/32 [00:25<00:02,  1.14it/s] 94%|████████████████████████████████████████▎  | 30/32 [00:26<00:01,  1.09it/s] 97%|█████████████████████████████████████████▋ | 31/32 [00:27<00:00,  1.10it/s]100%|███████████████████████████████████████████| 32/32 [00:28<00:00,  1.12it/s]100%|███████████████████████████████████████████| 32/32 [00:28<00:00,  1.13it/s]
Consecutive layer pairs:  torch.Size([32, 719, 719])
 41%|█████████████████▌                         | 33/81 [36:34<35:06, 43.88s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:00<00:11,  2.81it/s]  6%|██▊                                         | 2/32 [00:00<00:10,  2.77it/s]  9%|████▏                                       | 3/32 [00:01<00:10,  2.80it/s] 12%|█████▌                                      | 4/32 [00:01<00:10,  2.79it/s] 16%|██████▉                                     | 5/32 [00:01<00:09,  2.81it/s] 19%|████████▎                                   | 6/32 [00:02<00:09,  2.82it/s] 22%|█████████▋                                  | 7/32 [00:02<00:08,  2.82it/s] 25%|███████████                                 | 8/32 [00:02<00:08,  2.81it/s] 28%|████████████▍                               | 9/32 [00:03<00:08,  2.82it/s] 31%|█████████████▍                             | 10/32 [00:03<00:08,  2.70it/s] 34%|██████████████▊                            | 11/32 [00:03<00:07,  2.73it/s] 38%|████████████████▏                          | 12/32 [00:04<00:07,  2.69it/s] 41%|█████████████████▍                         | 13/32 [00:04<00:06,  2.74it/s] 44%|██████████████████▊                        | 14/32 [00:05<00:06,  2.76it/s] 47%|████████████████████▏                      | 15/32 [00:05<00:06,  2.77it/s] 50%|█████████████████████▌                     | 16/32 [00:05<00:05,  2.78it/s] 53%|██████████████████████▊                    | 17/32 [00:06<00:05,  2.76it/s] 56%|████████████████████████▏                  | 18/32 [00:06<00:05,  2.77it/s] 59%|█████████████████████████▌                 | 19/32 [00:06<00:04,  2.79it/s] 62%|██████████████████████████▉                | 20/32 [00:07<00:04,  2.79it/s] 66%|████████████████████████████▏              | 21/32 [00:07<00:03,  2.79it/s] 69%|█████████████████████████████▌             | 22/32 [00:07<00:03,  2.78it/s] 72%|██████████████████████████████▉            | 23/32 [00:08<00:03,  2.77it/s] 75%|████████████████████████████████▎          | 24/32 [00:08<00:02,  2.79it/s] 78%|█████████████████████████████████▌         | 25/32 [00:08<00:02,  2.80it/s] 81%|██████████████████████████████████▉        | 26/32 [00:09<00:02,  2.80it/s] 84%|████████████████████████████████████▎      | 27/32 [00:09<00:01,  2.78it/s] 88%|█████████████████████████████████████▋     | 28/32 [00:10<00:01,  2.81it/s] 91%|██████████████████████████████████████▉    | 29/32 [00:10<00:01,  2.81it/s] 94%|████████████████████████████████████████▎  | 30/32 [00:10<00:00,  2.82it/s] 97%|█████████████████████████████████████████▋ | 31/32 [00:11<00:00,  2.82it/s]100%|███████████████████████████████████████████| 32/32 [00:11<00:00,  2.81it/s]100%|███████████████████████████████████████████| 32/32 [00:11<00:00,  2.78it/s]
Consecutive layer pairs:  torch.Size([32, 520, 520])
 42%|██████████████████                         | 34/81 [37:01<30:23, 38.81s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:00<00:10,  2.86it/s]  6%|██▊                                         | 2/32 [00:00<00:10,  2.84it/s]  9%|████▏                                       | 3/32 [00:01<00:10,  2.82it/s] 12%|█████▌                                      | 4/32 [00:01<00:10,  2.71it/s] 16%|██████▉                                     | 5/32 [00:01<00:09,  2.74it/s] 19%|████████▎                                   | 6/32 [00:02<00:09,  2.77it/s] 22%|█████████▋                                  | 7/32 [00:02<00:08,  2.79it/s] 25%|███████████                                 | 8/32 [00:02<00:08,  2.80it/s] 28%|████████████▍                               | 9/32 [00:03<00:08,  2.81it/s] 31%|█████████████▍                             | 10/32 [00:03<00:07,  2.82it/s] 34%|██████████████▊                            | 11/32 [00:03<00:07,  2.83it/s] 38%|████████████████▏                          | 12/32 [00:04<00:07,  2.83it/s] 41%|█████████████████▍                         | 13/32 [00:04<00:06,  2.84it/s] 44%|██████████████████▊                        | 14/32 [00:04<00:06,  2.84it/s] 47%|████████████████████▏                      | 15/32 [00:05<00:05,  2.84it/s] 50%|█████████████████████▌                     | 16/32 [00:05<00:05,  2.84it/s] 53%|██████████████████████▊                    | 17/32 [00:06<00:05,  2.84it/s] 56%|████████████████████████▏                  | 18/32 [00:06<00:04,  2.84it/s] 59%|█████████████████████████▌                 | 19/32 [00:06<00:04,  2.84it/s] 62%|██████████████████████████▉                | 20/32 [00:07<00:04,  2.83it/s] 66%|████████████████████████████▏              | 21/32 [00:07<00:03,  2.83it/s] 69%|█████████████████████████████▌             | 22/32 [00:07<00:03,  2.83it/s] 72%|██████████████████████████████▉            | 23/32 [00:08<00:03,  2.84it/s] 75%|████████████████████████████████▎          | 24/32 [00:08<00:02,  2.81it/s] 78%|█████████████████████████████████▌         | 25/32 [00:08<00:02,  2.66it/s] 81%|██████████████████████████████████▉        | 26/32 [00:09<00:02,  2.70it/s] 84%|████████████████████████████████████▎      | 27/32 [00:09<00:01,  2.74it/s] 88%|█████████████████████████████████████▋     | 28/32 [00:10<00:01,  2.77it/s] 91%|██████████████████████████████████████▉    | 29/32 [00:10<00:01,  2.80it/s] 94%|████████████████████████████████████████▎  | 30/32 [00:10<00:00,  2.81it/s] 97%|█████████████████████████████████████████▋ | 31/32 [00:11<00:00,  2.83it/s]100%|███████████████████████████████████████████| 32/32 [00:11<00:00,  2.83it/s]100%|███████████████████████████████████████████| 32/32 [00:11<00:00,  2.81it/s]
Consecutive layer pairs:  torch.Size([32, 520, 520])
 43%|██████████████████▌                        | 35/81 [37:26<26:26, 34.50s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:00<00:11,  2.61it/s]  6%|██▊                                         | 2/32 [00:00<00:11,  2.57it/s]  9%|████▏                                       | 3/32 [00:01<00:11,  2.57it/s] 12%|█████▌                                      | 4/32 [00:01<00:10,  2.58it/s] 16%|██████▉                                     | 5/32 [00:01<00:10,  2.55it/s] 19%|████████▎                                   | 6/32 [00:02<00:10,  2.54it/s] 22%|█████████▋                                  | 7/32 [00:02<00:10,  2.50it/s] 25%|███████████                                 | 8/32 [00:03<00:09,  2.53it/s] 28%|████████████▍                               | 9/32 [00:03<00:09,  2.52it/s] 31%|█████████████▍                             | 10/32 [00:03<00:08,  2.53it/s] 34%|██████████████▊                            | 11/32 [00:04<00:08,  2.55it/s] 38%|████████████████▏                          | 12/32 [00:04<00:07,  2.55it/s] 41%|█████████████████▍                         | 13/32 [00:05<00:07,  2.55it/s] 44%|██████████████████▊                        | 14/32 [00:05<00:07,  2.54it/s] 47%|████████████████████▏                      | 15/32 [00:05<00:06,  2.54it/s] 50%|█████████████████████▌                     | 16/32 [00:06<00:06,  2.54it/s] 53%|██████████████████████▊                    | 17/32 [00:06<00:05,  2.55it/s] 56%|████████████████████████▏                  | 18/32 [00:07<00:05,  2.55it/s] 59%|█████████████████████████▌                 | 19/32 [00:07<00:05,  2.56it/s] 62%|██████████████████████████▉                | 20/32 [00:07<00:04,  2.57it/s] 66%|████████████████████████████▏              | 21/32 [00:08<00:04,  2.57it/s] 69%|█████████████████████████████▌             | 22/32 [00:08<00:03,  2.57it/s] 72%|██████████████████████████████▉            | 23/32 [00:09<00:03,  2.57it/s] 75%|████████████████████████████████▎          | 24/32 [00:09<00:03,  2.57it/s] 78%|█████████████████████████████████▌         | 25/32 [00:09<00:02,  2.57it/s] 81%|██████████████████████████████████▉        | 26/32 [00:10<00:02,  2.57it/s] 84%|████████████████████████████████████▎      | 27/32 [00:10<00:01,  2.57it/s] 88%|█████████████████████████████████████▋     | 28/32 [00:10<00:01,  2.51it/s] 91%|██████████████████████████████████████▉    | 29/32 [00:11<00:01,  2.52it/s] 94%|████████████████████████████████████████▎  | 30/32 [00:11<00:00,  2.54it/s] 97%|█████████████████████████████████████████▋ | 31/32 [00:12<00:00,  2.55it/s]100%|███████████████████████████████████████████| 32/32 [00:12<00:00,  2.56it/s]100%|███████████████████████████████████████████| 32/32 [00:12<00:00,  2.55it/s]
Consecutive layer pairs:  torch.Size([32, 534, 534])
 44%|███████████████████                        | 36/81 [37:50<23:35, 31.45s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:00<00:24,  1.25it/s]  6%|██▊                                         | 2/32 [00:01<00:23,  1.26it/s]  9%|████▏                                       | 3/32 [00:02<00:23,  1.25it/s] 12%|█████▌                                      | 4/32 [00:03<00:22,  1.25it/s] 16%|██████▉                                     | 5/32 [00:03<00:21,  1.25it/s] 19%|████████▎                                   | 6/32 [00:04<00:20,  1.25it/s] 22%|█████████▋                                  | 7/32 [00:05<00:20,  1.24it/s] 25%|███████████                                 | 8/32 [00:06<00:19,  1.24it/s] 28%|████████████▍                               | 9/32 [00:07<00:18,  1.24it/s] 31%|█████████████▍                             | 10/32 [00:08<00:17,  1.25it/s] 34%|██████████████▊                            | 11/32 [00:08<00:16,  1.25it/s] 38%|████████████████▏                          | 12/32 [00:09<00:15,  1.25it/s] 41%|█████████████████▍                         | 13/32 [00:10<00:15,  1.25it/s] 44%|██████████████████▊                        | 14/32 [00:11<00:14,  1.26it/s] 47%|████████████████████▏                      | 15/32 [00:11<00:13,  1.26it/s] 50%|█████████████████████▌                     | 16/32 [00:12<00:12,  1.26it/s] 53%|██████████████████████▊                    | 17/32 [00:13<00:11,  1.26it/s] 56%|████████████████████████▏                  | 18/32 [00:14<00:11,  1.26it/s] 59%|█████████████████████████▌                 | 19/32 [00:15<00:10,  1.26it/s] 62%|██████████████████████████▉                | 20/32 [00:15<00:09,  1.25it/s] 66%|████████████████████████████▏              | 21/32 [00:16<00:08,  1.25it/s] 69%|█████████████████████████████▌             | 22/32 [00:17<00:08,  1.25it/s] 72%|██████████████████████████████▉            | 23/32 [00:18<00:07,  1.25it/s] 75%|████████████████████████████████▎          | 24/32 [00:19<00:06,  1.25it/s] 78%|█████████████████████████████████▌         | 25/32 [00:19<00:05,  1.25it/s] 81%|██████████████████████████████████▉        | 26/32 [00:20<00:04,  1.23it/s] 84%|████████████████████████████████████▎      | 27/32 [00:21<00:04,  1.24it/s] 88%|█████████████████████████████████████▋     | 28/32 [00:22<00:03,  1.24it/s] 91%|██████████████████████████████████████▉    | 29/32 [00:23<00:02,  1.22it/s] 94%|████████████████████████████████████████▎  | 30/32 [00:24<00:01,  1.23it/s] 97%|█████████████████████████████████████████▋ | 31/32 [00:24<00:00,  1.23it/s]100%|███████████████████████████████████████████| 32/32 [00:25<00:00,  1.24it/s]100%|███████████████████████████████████████████| 32/32 [00:25<00:00,  1.25it/s]
Consecutive layer pairs:  torch.Size([32, 696, 696])
 46%|███████████████████▋                       | 37/81 [38:31<25:14, 34.41s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:00<00:18,  1.68it/s]  6%|██▊                                         | 2/32 [00:01<00:19,  1.57it/s]  9%|████▏                                       | 3/32 [00:01<00:17,  1.61it/s] 12%|█████▌                                      | 4/32 [00:02<00:17,  1.64it/s] 16%|██████▉                                     | 5/32 [00:03<00:16,  1.65it/s] 19%|████████▎                                   | 6/32 [00:03<00:15,  1.65it/s] 22%|█████████▋                                  | 7/32 [00:04<00:15,  1.66it/s] 25%|███████████                                 | 8/32 [00:04<00:14,  1.67it/s] 28%|████████████▍                               | 9/32 [00:05<00:13,  1.68it/s] 31%|█████████████▍                             | 10/32 [00:06<00:13,  1.68it/s] 34%|██████████████▊                            | 11/32 [00:06<00:12,  1.67it/s] 38%|████████████████▏                          | 12/32 [00:07<00:11,  1.67it/s] 41%|█████████████████▍                         | 13/32 [00:07<00:11,  1.68it/s] 44%|██████████████████▊                        | 14/32 [00:08<00:11,  1.63it/s] 47%|████████████████████▏                      | 15/32 [00:09<00:10,  1.61it/s] 50%|█████████████████████▌                     | 16/32 [00:09<00:09,  1.63it/s] 53%|██████████████████████▊                    | 17/32 [00:10<00:09,  1.64it/s] 56%|████████████████████████▏                  | 18/32 [00:10<00:08,  1.65it/s] 59%|█████████████████████████▌                 | 19/32 [00:11<00:07,  1.66it/s] 62%|██████████████████████████▉                | 20/32 [00:12<00:07,  1.67it/s] 66%|████████████████████████████▏              | 21/32 [00:12<00:06,  1.67it/s] 69%|█████████████████████████████▌             | 22/32 [00:13<00:05,  1.67it/s] 72%|██████████████████████████████▉            | 23/32 [00:13<00:05,  1.67it/s] 75%|████████████████████████████████▎          | 24/32 [00:14<00:04,  1.66it/s] 78%|█████████████████████████████████▌         | 25/32 [00:15<00:04,  1.66it/s] 81%|██████████████████████████████████▉        | 26/32 [00:15<00:03,  1.66it/s] 84%|████████████████████████████████████▎      | 27/32 [00:16<00:03,  1.66it/s] 88%|█████████████████████████████████████▋     | 28/32 [00:16<00:02,  1.67it/s] 91%|██████████████████████████████████████▉    | 29/32 [00:17<00:01,  1.65it/s] 94%|████████████████████████████████████████▎  | 30/32 [00:18<00:01,  1.65it/s] 97%|█████████████████████████████████████████▋ | 31/32 [00:18<00:00,  1.66it/s]100%|███████████████████████████████████████████| 32/32 [00:19<00:00,  1.66it/s]100%|███████████████████████████████████████████| 32/32 [00:19<00:00,  1.66it/s]
Consecutive layer pairs:  torch.Size([32, 625, 625])
 47%|████████████████████▏                      | 38/81 [39:06<24:40, 34.43s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:00<00:17,  1.72it/s]  6%|██▊                                         | 2/32 [00:01<00:17,  1.70it/s]  9%|████▏                                       | 3/32 [00:01<00:16,  1.72it/s] 12%|█████▌                                      | 4/32 [00:02<00:16,  1.73it/s] 16%|██████▉                                     | 5/32 [00:02<00:15,  1.74it/s] 19%|████████▎                                   | 6/32 [00:03<00:14,  1.74it/s] 22%|█████████▋                                  | 7/32 [00:04<00:14,  1.74it/s] 25%|███████████                                 | 8/32 [00:04<00:13,  1.74it/s] 28%|████████████▍                               | 9/32 [00:05<00:13,  1.75it/s] 31%|█████████████▍                             | 10/32 [00:05<00:12,  1.75it/s] 34%|██████████████▊                            | 11/32 [00:06<00:11,  1.75it/s] 38%|████████████████▏                          | 12/32 [00:06<00:11,  1.76it/s] 41%|█████████████████▍                         | 13/32 [00:07<00:10,  1.76it/s] 44%|██████████████████▊                        | 14/32 [00:08<00:10,  1.75it/s] 47%|████████████████████▏                      | 15/32 [00:08<00:09,  1.74it/s] 50%|█████████████████████▌                     | 16/32 [00:09<00:09,  1.74it/s] 53%|██████████████████████▊                    | 17/32 [00:09<00:08,  1.75it/s] 56%|████████████████████████▏                  | 18/32 [00:10<00:07,  1.76it/s] 59%|█████████████████████████▌                 | 19/32 [00:10<00:07,  1.77it/s] 62%|██████████████████████████▉                | 20/32 [00:11<00:06,  1.74it/s] 66%|████████████████████████████▏              | 21/32 [00:12<00:06,  1.75it/s] 69%|█████████████████████████████▌             | 22/32 [00:12<00:05,  1.76it/s] 72%|██████████████████████████████▉            | 23/32 [00:13<00:05,  1.75it/s] 75%|████████████████████████████████▎          | 24/32 [00:13<00:04,  1.76it/s] 78%|█████████████████████████████████▌         | 25/32 [00:14<00:03,  1.76it/s] 81%|██████████████████████████████████▉        | 26/32 [00:14<00:03,  1.76it/s] 84%|████████████████████████████████████▎      | 27/32 [00:15<00:02,  1.76it/s] 88%|█████████████████████████████████████▋     | 28/32 [00:15<00:02,  1.76it/s] 91%|██████████████████████████████████████▉    | 29/32 [00:16<00:01,  1.76it/s] 94%|████████████████████████████████████████▎  | 30/32 [00:17<00:01,  1.75it/s] 97%|█████████████████████████████████████████▋ | 31/32 [00:17<00:00,  1.75it/s]100%|███████████████████████████████████████████| 32/32 [00:18<00:00,  1.75it/s]100%|███████████████████████████████████████████| 32/32 [00:18<00:00,  1.75it/s]
Consecutive layer pairs:  torch.Size([32, 611, 611])
 48%|████████████████████▋                      | 39/81 [39:40<23:57, 34.24s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:00<00:25,  1.21it/s]  6%|██▊                                         | 2/32 [00:01<00:24,  1.20it/s]  9%|████▏                                       | 3/32 [00:02<00:24,  1.18it/s] 12%|█████▌                                      | 4/32 [00:03<00:23,  1.19it/s] 16%|██████▉                                     | 5/32 [00:04<00:22,  1.19it/s] 19%|████████▎                                   | 6/32 [00:05<00:21,  1.19it/s] 22%|█████████▋                                  | 7/32 [00:05<00:21,  1.17it/s] 25%|███████████                                 | 8/32 [00:06<00:21,  1.14it/s] 28%|████████████▍                               | 9/32 [00:07<00:20,  1.15it/s] 31%|█████████████▍                             | 10/32 [00:08<00:18,  1.16it/s] 34%|██████████████▊                            | 11/32 [00:09<00:18,  1.13it/s] 38%|████████████████▏                          | 12/32 [00:10<00:17,  1.12it/s] 41%|█████████████████▍                         | 13/32 [00:11<00:16,  1.14it/s] 44%|██████████████████▊                        | 14/32 [00:12<00:15,  1.15it/s] 47%|████████████████████▏                      | 15/32 [00:12<00:14,  1.16it/s] 50%|█████████████████████▌                     | 16/32 [00:13<00:13,  1.17it/s] 53%|██████████████████████▊                    | 17/32 [00:14<00:12,  1.17it/s] 56%|████████████████████████▏                  | 18/32 [00:15<00:11,  1.18it/s] 59%|█████████████████████████▌                 | 19/32 [00:16<00:11,  1.18it/s] 62%|██████████████████████████▉                | 20/32 [00:17<00:10,  1.18it/s] 66%|████████████████████████████▏              | 21/32 [00:18<00:09,  1.18it/s] 69%|█████████████████████████████▌             | 22/32 [00:18<00:08,  1.18it/s] 72%|██████████████████████████████▉            | 23/32 [00:19<00:07,  1.18it/s] 75%|████████████████████████████████▎          | 24/32 [00:20<00:06,  1.18it/s] 78%|█████████████████████████████████▌         | 25/32 [00:21<00:05,  1.19it/s] 81%|██████████████████████████████████▉        | 26/32 [00:22<00:05,  1.19it/s] 84%|████████████████████████████████████▎      | 27/32 [00:23<00:04,  1.19it/s] 88%|█████████████████████████████████████▋     | 28/32 [00:23<00:03,  1.18it/s] 91%|██████████████████████████████████████▉    | 29/32 [00:24<00:02,  1.18it/s] 94%|████████████████████████████████████████▎  | 30/32 [00:25<00:01,  1.18it/s] 97%|█████████████████████████████████████████▋ | 31/32 [00:26<00:00,  1.18it/s]100%|███████████████████████████████████████████| 32/32 [00:27<00:00,  1.18it/s]100%|███████████████████████████████████████████| 32/32 [00:27<00:00,  1.17it/s]
Consecutive layer pairs:  torch.Size([32, 708, 708])
 49%|█████████████████████▏                     | 40/81 [40:24<25:33, 37.39s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:00<00:19,  1.59it/s]  6%|██▊                                         | 2/32 [00:01<00:18,  1.59it/s]  9%|████▏                                       | 3/32 [00:01<00:18,  1.57it/s] 12%|█████▌                                      | 4/32 [00:02<00:17,  1.58it/s] 16%|██████▉                                     | 5/32 [00:03<00:17,  1.53it/s] 19%|████████▎                                   | 6/32 [00:03<00:16,  1.55it/s] 22%|█████████▋                                  | 7/32 [00:04<00:16,  1.56it/s] 25%|███████████                                 | 8/32 [00:05<00:15,  1.51it/s] 28%|████████████▍                               | 9/32 [00:05<00:14,  1.54it/s] 31%|█████████████▍                             | 10/32 [00:06<00:14,  1.55it/s] 34%|██████████████▊                            | 11/32 [00:07<00:13,  1.55it/s] 38%|████████████████▏                          | 12/32 [00:07<00:12,  1.57it/s] 41%|█████████████████▍                         | 13/32 [00:08<00:12,  1.57it/s] 44%|██████████████████▊                        | 14/32 [00:08<00:11,  1.58it/s] 47%|████████████████████▏                      | 15/32 [00:09<00:10,  1.58it/s] 50%|█████████████████████▌                     | 16/32 [00:10<00:10,  1.59it/s] 53%|██████████████████████▊                    | 17/32 [00:10<00:09,  1.59it/s] 56%|████████████████████████▏                  | 18/32 [00:11<00:08,  1.59it/s] 59%|█████████████████████████▌                 | 19/32 [00:12<00:08,  1.58it/s] 62%|██████████████████████████▉                | 20/32 [00:12<00:07,  1.59it/s] 66%|████████████████████████████▏              | 21/32 [00:13<00:06,  1.57it/s] 69%|█████████████████████████████▌             | 22/32 [00:14<00:06,  1.56it/s] 72%|██████████████████████████████▉            | 23/32 [00:14<00:05,  1.57it/s] 75%|████████████████████████████████▎          | 24/32 [00:15<00:05,  1.58it/s] 78%|█████████████████████████████████▌         | 25/32 [00:15<00:04,  1.58it/s] 81%|██████████████████████████████████▉        | 26/32 [00:16<00:03,  1.59it/s] 84%|████████████████████████████████████▎      | 27/32 [00:17<00:03,  1.59it/s] 88%|█████████████████████████████████████▋     | 28/32 [00:17<00:02,  1.59it/s] 91%|██████████████████████████████████████▉    | 29/32 [00:18<00:01,  1.59it/s] 94%|████████████████████████████████████████▎  | 30/32 [00:19<00:01,  1.58it/s] 97%|█████████████████████████████████████████▋ | 31/32 [00:19<00:00,  1.58it/s]100%|███████████████████████████████████████████| 32/32 [00:20<00:00,  1.58it/s]100%|███████████████████████████████████████████| 32/32 [00:20<00:00,  1.57it/s]
Consecutive layer pairs:  torch.Size([32, 637, 637])
 51%|█████████████████████▊                     | 41/81 [40:59<24:16, 36.41s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:00<00:18,  1.69it/s]  6%|██▊                                         | 2/32 [00:01<00:17,  1.69it/s]  9%|████▏                                       | 3/32 [00:01<00:17,  1.67it/s] 12%|█████▌                                      | 4/32 [00:02<00:16,  1.67it/s] 16%|██████▉                                     | 5/32 [00:02<00:16,  1.67it/s] 19%|████████▎                                   | 6/32 [00:03<00:15,  1.67it/s] 22%|█████████▋                                  | 7/32 [00:04<00:15,  1.66it/s] 25%|███████████                                 | 8/32 [00:04<00:14,  1.66it/s] 28%|████████████▍                               | 9/32 [00:05<00:13,  1.65it/s] 31%|█████████████▍                             | 10/32 [00:06<00:13,  1.66it/s] 34%|██████████████▊                            | 11/32 [00:06<00:12,  1.66it/s] 38%|████████████████▏                          | 12/32 [00:07<00:12,  1.65it/s] 41%|█████████████████▍                         | 13/32 [00:07<00:11,  1.66it/s] 44%|██████████████████▊                        | 14/32 [00:08<00:10,  1.66it/s] 47%|████████████████████▏                      | 15/32 [00:09<00:10,  1.66it/s] 50%|█████████████████████▌                     | 16/32 [00:09<00:09,  1.66it/s] 53%|██████████████████████▊                    | 17/32 [00:10<00:09,  1.66it/s] 56%|████████████████████████▏                  | 18/32 [00:10<00:08,  1.66it/s] 59%|█████████████████████████▌                 | 19/32 [00:11<00:07,  1.67it/s] 62%|██████████████████████████▉                | 20/32 [00:12<00:07,  1.59it/s] 66%|████████████████████████████▏              | 21/32 [00:12<00:06,  1.60it/s] 69%|█████████████████████████████▌             | 22/32 [00:13<00:06,  1.62it/s] 72%|██████████████████████████████▉            | 23/32 [00:13<00:05,  1.64it/s] 75%|████████████████████████████████▎          | 24/32 [00:14<00:04,  1.65it/s] 78%|█████████████████████████████████▌         | 25/32 [00:15<00:04,  1.66it/s] 81%|██████████████████████████████████▉        | 26/32 [00:15<00:03,  1.66it/s] 84%|████████████████████████████████████▎      | 27/32 [00:16<00:03,  1.66it/s] 88%|█████████████████████████████████████▋     | 28/32 [00:16<00:02,  1.66it/s] 91%|██████████████████████████████████████▉    | 29/32 [00:17<00:01,  1.65it/s] 94%|████████████████████████████████████████▎  | 30/32 [00:18<00:01,  1.66it/s] 97%|█████████████████████████████████████████▋ | 31/32 [00:18<00:00,  1.66it/s]100%|███████████████████████████████████████████| 32/32 [00:19<00:00,  1.66it/s]100%|███████████████████████████████████████████| 32/32 [00:19<00:00,  1.65it/s]
Consecutive layer pairs:  torch.Size([32, 623, 623])
 52%|██████████████████████▎                    | 42/81 [41:31<22:52, 35.19s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:00<00:11,  2.72it/s]  6%|██▊                                         | 2/32 [00:00<00:11,  2.70it/s]  9%|████▏                                       | 3/32 [00:01<00:10,  2.68it/s] 12%|█████▌                                      | 4/32 [00:01<00:10,  2.67it/s] 16%|██████▉                                     | 5/32 [00:01<00:10,  2.67it/s] 19%|████████▎                                   | 6/32 [00:02<00:09,  2.67it/s] 22%|█████████▋                                  | 7/32 [00:02<00:09,  2.67it/s] 25%|███████████                                 | 8/32 [00:02<00:08,  2.67it/s] 28%|████████████▍                               | 9/32 [00:03<00:08,  2.67it/s] 31%|█████████████▍                             | 10/32 [00:03<00:08,  2.68it/s] 34%|██████████████▊                            | 11/32 [00:04<00:07,  2.68it/s] 38%|████████████████▏                          | 12/32 [00:04<00:07,  2.68it/s] 41%|█████████████████▍                         | 13/32 [00:04<00:07,  2.67it/s] 44%|██████████████████▊                        | 14/32 [00:05<00:06,  2.66it/s] 47%|████████████████████▏                      | 15/32 [00:05<00:06,  2.62it/s] 50%|█████████████████████▌                     | 16/32 [00:06<00:06,  2.62it/s] 53%|██████████████████████▊                    | 17/32 [00:06<00:05,  2.64it/s] 56%|████████████████████████▏                  | 18/32 [00:06<00:05,  2.65it/s] 59%|█████████████████████████▌                 | 19/32 [00:07<00:04,  2.66it/s] 62%|██████████████████████████▉                | 20/32 [00:07<00:04,  2.66it/s] 66%|████████████████████████████▏              | 21/32 [00:07<00:04,  2.65it/s] 69%|█████████████████████████████▌             | 22/32 [00:08<00:03,  2.66it/s] 72%|██████████████████████████████▉            | 23/32 [00:08<00:03,  2.66it/s] 75%|████████████████████████████████▎          | 24/32 [00:09<00:03,  2.66it/s] 78%|█████████████████████████████████▌         | 25/32 [00:09<00:02,  2.64it/s] 81%|██████████████████████████████████▉        | 26/32 [00:09<00:02,  2.64it/s] 84%|████████████████████████████████████▎      | 27/32 [00:10<00:01,  2.63it/s] 88%|█████████████████████████████████████▋     | 28/32 [00:10<00:01,  2.64it/s] 91%|██████████████████████████████████████▉    | 29/32 [00:10<00:01,  2.65it/s] 94%|████████████████████████████████████████▎  | 30/32 [00:11<00:00,  2.65it/s] 97%|█████████████████████████████████████████▋ | 31/32 [00:11<00:00,  2.65it/s]100%|███████████████████████████████████████████| 32/32 [00:12<00:00,  2.66it/s]100%|███████████████████████████████████████████| 32/32 [00:12<00:00,  2.66it/s]
Consecutive layer pairs:  torch.Size([32, 526, 526])
 53%|██████████████████████▊                    | 43/81 [41:53<19:42, 31.11s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:00<00:12,  2.57it/s]  6%|██▊                                         | 2/32 [00:00<00:11,  2.53it/s]  9%|████▏                                       | 3/32 [00:01<00:11,  2.52it/s] 12%|█████▌                                      | 4/32 [00:01<00:11,  2.53it/s] 16%|██████▉                                     | 5/32 [00:01<00:10,  2.54it/s] 19%|████████▎                                   | 6/32 [00:02<00:10,  2.54it/s] 22%|█████████▋                                  | 7/32 [00:02<00:09,  2.53it/s] 25%|███████████                                 | 8/32 [00:03<00:09,  2.52it/s] 28%|████████████▍                               | 9/32 [00:03<00:09,  2.53it/s] 31%|█████████████▍                             | 10/32 [00:03<00:08,  2.53it/s] 34%|██████████████▊                            | 11/32 [00:04<00:08,  2.54it/s] 38%|████████████████▏                          | 12/32 [00:04<00:07,  2.55it/s] 41%|█████████████████▍                         | 13/32 [00:05<00:07,  2.53it/s] 44%|██████████████████▊                        | 14/32 [00:05<00:07,  2.53it/s] 47%|████████████████████▏                      | 15/32 [00:05<00:06,  2.54it/s] 50%|█████████████████████▌                     | 16/32 [00:06<00:06,  2.54it/s] 53%|██████████████████████▊                    | 17/32 [00:06<00:05,  2.55it/s] 56%|████████████████████████▏                  | 18/32 [00:07<00:05,  2.55it/s] 59%|█████████████████████████▌                 | 19/32 [00:07<00:05,  2.55it/s] 62%|██████████████████████████▉                | 20/32 [00:07<00:04,  2.55it/s] 66%|████████████████████████████▏              | 21/32 [00:08<00:04,  2.52it/s] 69%|█████████████████████████████▌             | 22/32 [00:08<00:03,  2.51it/s] 72%|██████████████████████████████▉            | 23/32 [00:09<00:03,  2.52it/s] 75%|████████████████████████████████▎          | 24/32 [00:09<00:03,  2.53it/s] 78%|█████████████████████████████████▌         | 25/32 [00:09<00:02,  2.53it/s] 81%|██████████████████████████████████▉        | 26/32 [00:10<00:02,  2.49it/s] 84%|████████████████████████████████████▎      | 27/32 [00:10<00:01,  2.50it/s] 88%|█████████████████████████████████████▋     | 28/32 [00:11<00:01,  2.51it/s] 91%|██████████████████████████████████████▉    | 29/32 [00:11<00:01,  2.51it/s] 94%|████████████████████████████████████████▎  | 30/32 [00:11<00:00,  2.52it/s] 97%|█████████████████████████████████████████▋ | 31/32 [00:12<00:00,  2.51it/s]100%|███████████████████████████████████████████| 32/32 [00:12<00:00,  2.52it/s]100%|███████████████████████████████████████████| 32/32 [00:12<00:00,  2.53it/s]
Consecutive layer pairs:  torch.Size([32, 533, 533])
 54%|███████████████████████▎                   | 44/81 [42:15<17:36, 28.56s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:00<00:12,  2.45it/s]  6%|██▊                                         | 2/32 [00:00<00:12,  2.44it/s]  9%|████▏                                       | 3/32 [00:01<00:12,  2.41it/s] 12%|█████▌                                      | 4/32 [00:01<00:11,  2.41it/s] 16%|██████▉                                     | 5/32 [00:02<00:11,  2.39it/s] 19%|████████▎                                   | 6/32 [00:02<00:11,  2.31it/s] 22%|█████████▋                                  | 7/32 [00:02<00:10,  2.30it/s] 25%|███████████                                 | 8/32 [00:03<00:10,  2.30it/s] 28%|████████████▍                               | 9/32 [00:03<00:09,  2.33it/s] 31%|█████████████▍                             | 10/32 [00:04<00:09,  2.36it/s] 34%|██████████████▊                            | 11/32 [00:04<00:08,  2.38it/s] 38%|████████████████▏                          | 12/32 [00:05<00:08,  2.40it/s] 41%|█████████████████▍                         | 13/32 [00:05<00:07,  2.40it/s] 44%|██████████████████▊                        | 14/32 [00:05<00:07,  2.42it/s] 47%|████████████████████▏                      | 15/32 [00:06<00:06,  2.43it/s] 50%|█████████████████████▌                     | 16/32 [00:06<00:06,  2.44it/s] 53%|██████████████████████▊                    | 17/32 [00:07<00:06,  2.43it/s] 56%|████████████████████████▏                  | 18/32 [00:07<00:05,  2.43it/s] 59%|█████████████████████████▌                 | 19/32 [00:07<00:05,  2.43it/s] 62%|██████████████████████████▉                | 20/32 [00:08<00:04,  2.44it/s] 66%|████████████████████████████▏              | 21/32 [00:08<00:04,  2.43it/s] 69%|█████████████████████████████▌             | 22/32 [00:09<00:04,  2.41it/s] 72%|██████████████████████████████▉            | 23/32 [00:09<00:03,  2.42it/s] 75%|████████████████████████████████▎          | 24/32 [00:09<00:03,  2.43it/s] 78%|█████████████████████████████████▌         | 25/32 [00:10<00:02,  2.42it/s] 81%|██████████████████████████████████▉        | 26/32 [00:10<00:02,  2.42it/s] 84%|████████████████████████████████████▎      | 27/32 [00:11<00:02,  2.39it/s] 88%|█████████████████████████████████████▋     | 28/32 [00:11<00:01,  2.41it/s] 91%|██████████████████████████████████████▉    | 29/32 [00:12<00:01,  2.41it/s] 94%|████████████████████████████████████████▎  | 30/32 [00:12<00:00,  2.41it/s] 97%|█████████████████████████████████████████▋ | 31/32 [00:12<00:00,  2.41it/s]100%|███████████████████████████████████████████| 32/32 [00:13<00:00,  2.40it/s]100%|███████████████████████████████████████████| 32/32 [00:13<00:00,  2.40it/s]
Consecutive layer pairs:  torch.Size([32, 546, 546])
 56%|███████████████████████▉                   | 45/81 [42:42<16:52, 28.12s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:00<00:19,  1.57it/s]  6%|██▊                                         | 2/32 [00:01<00:19,  1.51it/s]  9%|████▏                                       | 3/32 [00:01<00:19,  1.53it/s] 12%|█████▌                                      | 4/32 [00:02<00:18,  1.53it/s] 16%|██████▉                                     | 5/32 [00:03<00:17,  1.54it/s] 19%|████████▎                                   | 6/32 [00:03<00:16,  1.55it/s] 22%|█████████▋                                  | 7/32 [00:04<00:16,  1.55it/s] 25%|███████████                                 | 8/32 [00:05<00:15,  1.55it/s] 28%|████████████▍                               | 9/32 [00:05<00:14,  1.55it/s] 31%|█████████████▍                             | 10/32 [00:06<00:14,  1.55it/s] 34%|██████████████▊                            | 11/32 [00:07<00:13,  1.55it/s] 38%|████████████████▏                          | 12/32 [00:07<00:12,  1.54it/s] 41%|█████████████████▍                         | 13/32 [00:08<00:12,  1.55it/s] 44%|██████████████████▊                        | 14/32 [00:09<00:11,  1.55it/s] 47%|████████████████████▏                      | 15/32 [00:09<00:11,  1.54it/s] 50%|█████████████████████▌                     | 16/32 [00:10<00:10,  1.54it/s] 53%|██████████████████████▊                    | 17/32 [00:11<00:09,  1.54it/s] 56%|████████████████████████▏                  | 18/32 [00:11<00:09,  1.54it/s] 59%|█████████████████████████▌                 | 19/32 [00:12<00:08,  1.53it/s] 62%|██████████████████████████▉                | 20/32 [00:13<00:08,  1.43it/s] 66%|████████████████████████████▏              | 21/32 [00:13<00:07,  1.46it/s] 69%|█████████████████████████████▌             | 22/32 [00:14<00:06,  1.45it/s] 72%|██████████████████████████████▉            | 23/32 [00:15<00:06,  1.48it/s] 75%|████████████████████████████████▎          | 24/32 [00:15<00:05,  1.50it/s] 78%|█████████████████████████████████▌         | 25/32 [00:16<00:04,  1.51it/s] 81%|██████████████████████████████████▉        | 26/32 [00:17<00:03,  1.52it/s] 84%|████████████████████████████████████▎      | 27/32 [00:17<00:03,  1.44it/s] 88%|█████████████████████████████████████▋     | 28/32 [00:18<00:02,  1.47it/s] 91%|██████████████████████████████████████▉    | 29/32 [00:19<00:02,  1.49it/s] 94%|████████████████████████████████████████▎  | 30/32 [00:19<00:01,  1.51it/s] 97%|█████████████████████████████████████████▋ | 31/32 [00:20<00:00,  1.52it/s]100%|███████████████████████████████████████████| 32/32 [00:21<00:00,  1.51it/s]100%|███████████████████████████████████████████| 32/32 [00:21<00:00,  1.52it/s]
Consecutive layer pairs:  torch.Size([32, 642, 642])
 57%|████████████████████████▍                  | 46/81 [43:21<18:13, 31.25s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:00<00:25,  1.19it/s]  6%|██▊                                         | 2/32 [00:01<00:25,  1.19it/s]  9%|████▏                                       | 3/32 [00:02<00:24,  1.17it/s] 12%|█████▌                                      | 4/32 [00:03<00:23,  1.18it/s] 16%|██████▉                                     | 5/32 [00:04<00:22,  1.19it/s] 19%|████████▎                                   | 6/32 [00:05<00:21,  1.19it/s] 22%|█████████▋                                  | 7/32 [00:05<00:21,  1.19it/s] 25%|███████████                                 | 8/32 [00:06<00:20,  1.18it/s] 28%|████████████▍                               | 9/32 [00:07<00:19,  1.18it/s] 31%|█████████████▍                             | 10/32 [00:08<00:18,  1.16it/s] 34%|██████████████▊                            | 11/32 [00:09<00:17,  1.17it/s] 38%|████████████████▏                          | 12/32 [00:10<00:16,  1.18it/s] 41%|█████████████████▍                         | 13/32 [00:11<00:16,  1.19it/s] 44%|██████████████████▊                        | 14/32 [00:11<00:15,  1.18it/s] 47%|████████████████████▏                      | 15/32 [00:12<00:14,  1.19it/s] 50%|█████████████████████▌                     | 16/32 [00:13<00:13,  1.19it/s] 53%|██████████████████████▊                    | 17/32 [00:14<00:12,  1.18it/s] 56%|████████████████████████▏                  | 18/32 [00:15<00:11,  1.18it/s] 59%|█████████████████████████▌                 | 19/32 [00:16<00:10,  1.19it/s] 62%|██████████████████████████▉                | 20/32 [00:16<00:10,  1.19it/s] 66%|████████████████████████████▏              | 21/32 [00:17<00:09,  1.19it/s] 69%|█████████████████████████████▌             | 22/32 [00:18<00:08,  1.20it/s] 72%|██████████████████████████████▉            | 23/32 [00:19<00:07,  1.20it/s] 75%|████████████████████████████████▎          | 24/32 [00:20<00:06,  1.20it/s] 78%|█████████████████████████████████▌         | 25/32 [00:21<00:05,  1.20it/s] 81%|██████████████████████████████████▉        | 26/32 [00:21<00:05,  1.19it/s] 84%|████████████████████████████████████▎      | 27/32 [00:22<00:04,  1.19it/s] 88%|█████████████████████████████████████▋     | 28/32 [00:23<00:03,  1.18it/s] 91%|██████████████████████████████████████▉    | 29/32 [00:24<00:02,  1.19it/s] 94%|████████████████████████████████████████▎  | 30/32 [00:25<00:01,  1.19it/s] 97%|█████████████████████████████████████████▋ | 31/32 [00:26<00:00,  1.19it/s]100%|███████████████████████████████████████████| 32/32 [00:26<00:00,  1.19it/s]100%|███████████████████████████████████████████| 32/32 [00:26<00:00,  1.19it/s]
Consecutive layer pairs:  torch.Size([32, 708, 708])
 58%|████████████████████████▉                  | 47/81 [44:06<20:07, 35.51s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:00<00:25,  1.20it/s]  6%|██▊                                         | 2/32 [00:01<00:24,  1.20it/s]  9%|████▏                                       | 3/32 [00:02<00:24,  1.20it/s] 12%|█████▌                                      | 4/32 [00:03<00:23,  1.20it/s] 16%|██████▉                                     | 5/32 [00:04<00:22,  1.20it/s] 19%|████████▎                                   | 6/32 [00:04<00:21,  1.20it/s] 22%|█████████▋                                  | 7/32 [00:05<00:20,  1.20it/s] 25%|███████████                                 | 8/32 [00:06<00:20,  1.19it/s] 28%|████████████▍                               | 9/32 [00:07<00:19,  1.17it/s] 31%|█████████████▍                             | 10/32 [00:08<00:18,  1.18it/s] 34%|██████████████▊                            | 11/32 [00:09<00:17,  1.18it/s] 38%|████████████████▏                          | 12/32 [00:10<00:16,  1.19it/s] 41%|█████████████████▍                         | 13/32 [00:10<00:15,  1.19it/s] 44%|██████████████████▊                        | 14/32 [00:11<00:15,  1.19it/s] 47%|████████████████████▏                      | 15/32 [00:12<00:14,  1.17it/s] 50%|█████████████████████▌                     | 16/32 [00:13<00:13,  1.17it/s] 53%|██████████████████████▊                    | 17/32 [00:14<00:12,  1.17it/s] 56%|████████████████████████▏                  | 18/32 [00:15<00:11,  1.18it/s] 59%|█████████████████████████▌                 | 19/32 [00:16<00:10,  1.19it/s] 62%|██████████████████████████▉                | 20/32 [00:16<00:10,  1.19it/s] 66%|████████████████████████████▏              | 21/32 [00:17<00:09,  1.19it/s] 69%|█████████████████████████████▌             | 22/32 [00:18<00:08,  1.15it/s] 72%|██████████████████████████████▉            | 23/32 [00:19<00:07,  1.17it/s] 75%|████████████████████████████████▎          | 24/32 [00:20<00:06,  1.17it/s] 78%|█████████████████████████████████▌         | 25/32 [00:21<00:05,  1.18it/s] 81%|██████████████████████████████████▉        | 26/32 [00:21<00:05,  1.18it/s] 84%|████████████████████████████████████▎      | 27/32 [00:22<00:04,  1.19it/s] 88%|█████████████████████████████████████▋     | 28/32 [00:23<00:03,  1.17it/s] 91%|██████████████████████████████████████▉    | 29/32 [00:24<00:02,  1.18it/s] 94%|████████████████████████████████████████▎  | 30/32 [00:25<00:01,  1.15it/s] 97%|█████████████████████████████████████████▋ | 31/32 [00:26<00:00,  1.15it/s]100%|███████████████████████████████████████████| 32/32 [00:27<00:00,  1.16it/s]100%|███████████████████████████████████████████| 32/32 [00:27<00:00,  1.18it/s]
Consecutive layer pairs:  torch.Size([32, 708, 708])
 59%|█████████████████████████▍                 | 48/81 [45:59<32:12, 58.57s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:00<00:26,  1.16it/s]  6%|██▊                                         | 2/32 [00:01<00:25,  1.16it/s]  9%|████▏                                       | 3/32 [00:02<00:25,  1.16it/s] 12%|█████▌                                      | 4/32 [00:03<00:24,  1.16it/s] 16%|██████▉                                     | 5/32 [00:04<00:24,  1.10it/s] 19%|████████▎                                   | 6/32 [00:05<00:23,  1.12it/s] 22%|█████████▋                                  | 7/32 [00:06<00:22,  1.13it/s] 25%|███████████                                 | 8/32 [00:07<00:21,  1.14it/s] 28%|████████████▍                               | 9/32 [00:07<00:20,  1.14it/s] 31%|█████████████▍                             | 10/32 [00:08<00:19,  1.13it/s] 34%|██████████████▊                            | 11/32 [00:09<00:18,  1.14it/s] 38%|████████████████▏                          | 12/32 [00:10<00:17,  1.14it/s] 41%|█████████████████▍                         | 13/32 [00:11<00:16,  1.15it/s] 44%|██████████████████▊                        | 14/32 [00:12<00:15,  1.14it/s] 47%|████████████████████▏                      | 15/32 [00:13<00:15,  1.12it/s] 50%|█████████████████████▌                     | 16/32 [00:14<00:14,  1.12it/s] 53%|██████████████████████▊                    | 17/32 [00:15<00:13,  1.12it/s] 56%|████████████████████████▏                  | 18/32 [00:15<00:12,  1.13it/s] 59%|█████████████████████████▌                 | 19/32 [00:16<00:11,  1.09it/s] 62%|██████████████████████████▉                | 20/32 [00:17<00:10,  1.11it/s] 66%|████████████████████████████▏              | 21/32 [00:18<00:10,  1.10it/s] 69%|█████████████████████████████▌             | 22/32 [00:19<00:08,  1.11it/s] 72%|██████████████████████████████▉            | 23/32 [00:20<00:08,  1.12it/s] 75%|████████████████████████████████▎          | 24/32 [00:21<00:07,  1.13it/s] 78%|█████████████████████████████████▌         | 25/32 [00:22<00:06,  1.14it/s] 81%|██████████████████████████████████▉        | 26/32 [00:23<00:05,  1.13it/s] 84%|████████████████████████████████████▎      | 27/32 [00:23<00:04,  1.14it/s] 88%|█████████████████████████████████████▋     | 28/32 [00:24<00:03,  1.14it/s] 91%|██████████████████████████████████████▉    | 29/32 [00:25<00:02,  1.14it/s] 94%|████████████████████████████████████████▎  | 30/32 [00:26<00:01,  1.15it/s] 97%|█████████████████████████████████████████▋ | 31/32 [00:27<00:00,  1.15it/s]100%|███████████████████████████████████████████| 32/32 [00:28<00:00,  1.15it/s]100%|███████████████████████████████████████████| 32/32 [00:28<00:00,  1.13it/s]
Consecutive layer pairs:  torch.Size([32, 720, 720])
 60%|██████████████████████████                 | 49/81 [47:53<40:08, 75.26s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:00<00:26,  1.17it/s]  6%|██▊                                         | 2/32 [00:01<00:25,  1.19it/s]  9%|████▏                                       | 3/32 [00:02<00:24,  1.19it/s] 12%|█████▌                                      | 4/32 [00:03<00:23,  1.19it/s] 16%|██████▉                                     | 5/32 [00:04<00:22,  1.20it/s] 19%|████████▎                                   | 6/32 [00:05<00:21,  1.20it/s] 22%|█████████▋                                  | 7/32 [00:05<00:20,  1.20it/s] 25%|███████████                                 | 8/32 [00:06<00:20,  1.19it/s] 28%|████████████▍                               | 9/32 [00:07<00:19,  1.19it/s] 31%|█████████████▍                             | 10/32 [00:08<00:18,  1.19it/s] 34%|██████████████▊                            | 11/32 [00:09<00:17,  1.19it/s] 38%|████████████████▏                          | 12/32 [00:10<00:16,  1.18it/s] 41%|█████████████████▍                         | 13/32 [00:10<00:16,  1.18it/s] 44%|██████████████████▊                        | 14/32 [00:11<00:15,  1.18it/s] 47%|████████████████████▏                      | 15/32 [00:12<00:14,  1.18it/s] 50%|█████████████████████▌                     | 16/32 [00:13<00:13,  1.18it/s] 53%|██████████████████████▊                    | 17/32 [00:14<00:12,  1.18it/s] 56%|████████████████████████▏                  | 18/32 [00:15<00:11,  1.19it/s] 59%|█████████████████████████▌                 | 19/32 [00:15<00:10,  1.19it/s] 62%|██████████████████████████▉                | 20/32 [00:16<00:10,  1.19it/s] 66%|████████████████████████████▏              | 21/32 [00:17<00:09,  1.19it/s] 69%|█████████████████████████████▌             | 22/32 [00:18<00:08,  1.19it/s] 72%|██████████████████████████████▉            | 23/32 [00:19<00:07,  1.19it/s] 75%|████████████████████████████████▎          | 24/32 [00:20<00:06,  1.19it/s] 78%|█████████████████████████████████▌         | 25/32 [00:20<00:05,  1.20it/s] 81%|██████████████████████████████████▉        | 26/32 [00:21<00:05,  1.19it/s] 84%|████████████████████████████████████▎      | 27/32 [00:22<00:04,  1.19it/s] 88%|█████████████████████████████████████▋     | 28/32 [00:23<00:03,  1.19it/s] 91%|██████████████████████████████████████▉    | 29/32 [00:24<00:02,  1.19it/s] 94%|████████████████████████████████████████▎  | 30/32 [00:25<00:01,  1.18it/s] 97%|█████████████████████████████████████████▋ | 31/32 [00:26<00:00,  1.19it/s]100%|███████████████████████████████████████████| 32/32 [00:26<00:00,  1.20it/s]100%|███████████████████████████████████████████| 32/32 [00:26<00:00,  1.19it/s]
Consecutive layer pairs:  torch.Size([32, 708, 708])
 62%|██████████████████████████▌                | 50/81 [48:38<34:17, 66.37s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:00<00:26,  1.17it/s]  6%|██▊                                         | 2/32 [00:01<00:25,  1.16it/s]  9%|████▏                                       | 3/32 [00:02<00:24,  1.17it/s] 12%|█████▌                                      | 4/32 [00:03<00:24,  1.16it/s] 16%|██████▉                                     | 5/32 [00:04<00:23,  1.16it/s] 19%|████████▎                                   | 6/32 [00:05<00:22,  1.16it/s] 22%|█████████▋                                  | 7/32 [00:06<00:21,  1.15it/s] 25%|███████████                                 | 8/32 [00:06<00:20,  1.16it/s] 28%|████████████▍                               | 9/32 [00:07<00:19,  1.16it/s] 31%|█████████████▍                             | 10/32 [00:08<00:18,  1.16it/s] 34%|██████████████▊                            | 11/32 [00:09<00:18,  1.16it/s] 38%|████████████████▏                          | 12/32 [00:10<00:17,  1.15it/s] 41%|█████████████████▍                         | 13/32 [00:11<00:17,  1.10it/s] 44%|██████████████████▊                        | 14/32 [00:12<00:16,  1.11it/s] 47%|████████████████████▏                      | 15/32 [00:13<00:15,  1.12it/s] 50%|█████████████████████▌                     | 16/32 [00:13<00:14,  1.13it/s] 53%|██████████████████████▊                    | 17/32 [00:14<00:13,  1.14it/s] 56%|████████████████████████▏                  | 18/32 [00:15<00:12,  1.15it/s] 59%|█████████████████████████▌                 | 19/32 [00:16<00:11,  1.15it/s] 62%|██████████████████████████▉                | 20/32 [00:17<00:10,  1.15it/s] 66%|████████████████████████████▏              | 21/32 [00:18<00:09,  1.15it/s] 69%|█████████████████████████████▌             | 22/32 [00:19<00:08,  1.15it/s] 72%|██████████████████████████████▉            | 23/32 [00:20<00:07,  1.15it/s] 75%|████████████████████████████████▎          | 24/32 [00:20<00:06,  1.15it/s] 78%|█████████████████████████████████▌         | 25/32 [00:21<00:06,  1.15it/s] 81%|██████████████████████████████████▉        | 26/32 [00:22<00:05,  1.15it/s] 84%|████████████████████████████████████▎      | 27/32 [00:23<00:04,  1.15it/s] 88%|█████████████████████████████████████▋     | 28/32 [00:24<00:03,  1.15it/s] 91%|██████████████████████████████████████▉    | 29/32 [00:25<00:02,  1.15it/s] 94%|████████████████████████████████████████▎  | 30/32 [00:26<00:01,  1.15it/s] 97%|█████████████████████████████████████████▋ | 31/32 [00:26<00:00,  1.16it/s]100%|███████████████████████████████████████████| 32/32 [00:27<00:00,  1.16it/s]100%|███████████████████████████████████████████| 32/32 [00:27<00:00,  1.15it/s]
Consecutive layer pairs:  torch.Size([32, 720, 720])
 63%|███████████████████████████                | 51/81 [49:24<30:02, 60.07s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:00<00:12,  2.46it/s]  6%|██▊                                         | 2/32 [00:00<00:12,  2.46it/s]  9%|████▏                                       | 3/32 [00:01<00:11,  2.46it/s] 12%|█████▌                                      | 4/32 [00:01<00:11,  2.45it/s] 16%|██████▉                                     | 5/32 [00:02<00:11,  2.44it/s] 19%|████████▎                                   | 6/32 [00:02<00:10,  2.43it/s] 22%|█████████▋                                  | 7/32 [00:02<00:10,  2.43it/s] 25%|███████████                                 | 8/32 [00:03<00:09,  2.44it/s] 28%|████████████▍                               | 9/32 [00:03<00:09,  2.45it/s] 31%|█████████████▍                             | 10/32 [00:04<00:08,  2.44it/s] 34%|██████████████▊                            | 11/32 [00:04<00:08,  2.44it/s] 38%|████████████████▏                          | 12/32 [00:04<00:08,  2.43it/s] 41%|█████████████████▍                         | 13/32 [00:05<00:07,  2.43it/s] 44%|██████████████████▊                        | 14/32 [00:05<00:07,  2.43it/s] 47%|████████████████████▏                      | 15/32 [00:06<00:06,  2.43it/s] 50%|█████████████████████▌                     | 16/32 [00:06<00:06,  2.44it/s] 53%|██████████████████████▊                    | 17/32 [00:06<00:06,  2.43it/s] 56%|████████████████████████▏                  | 18/32 [00:07<00:05,  2.43it/s] 59%|█████████████████████████▌                 | 19/32 [00:07<00:05,  2.44it/s] 62%|██████████████████████████▉                | 20/32 [00:08<00:04,  2.44it/s] 66%|████████████████████████████▏              | 21/32 [00:08<00:04,  2.44it/s] 69%|█████████████████████████████▌             | 22/32 [00:09<00:04,  2.43it/s] 72%|██████████████████████████████▉            | 23/32 [00:09<00:03,  2.43it/s] 75%|████████████████████████████████▎          | 24/32 [00:09<00:03,  2.43it/s] 78%|█████████████████████████████████▌         | 25/32 [00:10<00:02,  2.44it/s] 81%|██████████████████████████████████▉        | 26/32 [00:10<00:02,  2.44it/s] 84%|████████████████████████████████████▎      | 27/32 [00:11<00:02,  2.43it/s] 88%|█████████████████████████████████████▋     | 28/32 [00:11<00:01,  2.42it/s] 91%|██████████████████████████████████████▉    | 29/32 [00:11<00:01,  2.43it/s] 94%|████████████████████████████████████████▎  | 30/32 [00:12<00:00,  2.44it/s] 97%|█████████████████████████████████████████▋ | 31/32 [00:12<00:00,  2.42it/s]100%|███████████████████████████████████████████| 32/32 [00:13<00:00,  2.38it/s]100%|███████████████████████████████████████████| 32/32 [00:13<00:00,  2.43it/s]
Consecutive layer pairs:  torch.Size([32, 543, 543])
 64%|███████████████████████████▌               | 52/81 [49:57<25:12, 52.16s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:00<00:12,  2.47it/s]  6%|██▊                                         | 2/32 [00:00<00:12,  2.39it/s]  9%|████▏                                       | 3/32 [00:01<00:12,  2.39it/s] 12%|█████▌                                      | 4/32 [00:01<00:11,  2.38it/s] 16%|██████▉                                     | 5/32 [00:02<00:11,  2.39it/s] 19%|████████▎                                   | 6/32 [00:02<00:10,  2.40it/s] 22%|█████████▋                                  | 7/32 [00:02<00:10,  2.40it/s] 25%|███████████                                 | 8/32 [00:03<00:10,  2.37it/s] 28%|████████████▍                               | 9/32 [00:03<00:09,  2.38it/s] 31%|█████████████▍                             | 10/32 [00:04<00:09,  2.39it/s] 34%|██████████████▊                            | 11/32 [00:04<00:08,  2.40it/s] 38%|████████████████▏                          | 12/32 [00:05<00:08,  2.40it/s] 41%|█████████████████▍                         | 13/32 [00:05<00:07,  2.38it/s] 44%|██████████████████▊                        | 14/32 [00:05<00:07,  2.39it/s] 47%|████████████████████▏                      | 15/32 [00:06<00:07,  2.38it/s] 50%|█████████████████████▌                     | 16/32 [00:06<00:06,  2.40it/s] 53%|██████████████████████▊                    | 17/32 [00:07<00:06,  2.41it/s] 56%|████████████████████████▏                  | 18/32 [00:07<00:05,  2.42it/s] 59%|█████████████████████████▌                 | 19/32 [00:07<00:05,  2.42it/s] 62%|██████████████████████████▉                | 20/32 [00:08<00:04,  2.42it/s] 66%|████████████████████████████▏              | 21/32 [00:08<00:04,  2.42it/s] 69%|█████████████████████████████▌             | 22/32 [00:09<00:04,  2.42it/s] 72%|██████████████████████████████▉            | 23/32 [00:09<00:03,  2.42it/s] 75%|████████████████████████████████▎          | 24/32 [00:09<00:03,  2.42it/s] 78%|█████████████████████████████████▌         | 25/32 [00:10<00:02,  2.42it/s] 81%|██████████████████████████████████▉        | 26/32 [00:10<00:02,  2.43it/s] 84%|████████████████████████████████████▎      | 27/32 [00:11<00:02,  2.43it/s] 88%|█████████████████████████████████████▋     | 28/32 [00:11<00:01,  2.43it/s] 91%|██████████████████████████████████████▉    | 29/32 [00:12<00:01,  2.42it/s] 94%|████████████████████████████████████████▎  | 30/32 [00:12<00:00,  2.42it/s] 97%|█████████████████████████████████████████▋ | 31/32 [00:12<00:00,  2.42it/s]100%|███████████████████████████████████████████| 32/32 [00:13<00:00,  2.42it/s]100%|███████████████████████████████████████████| 32/32 [00:13<00:00,  2.41it/s]
Consecutive layer pairs:  torch.Size([32, 543, 543])
 65%|████████████████████████████▏              | 53/81 [50:24<20:41, 44.35s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:00<00:18,  1.69it/s]  6%|██▊                                         | 2/32 [00:01<00:17,  1.69it/s]  9%|████▏                                       | 3/32 [00:01<00:17,  1.69it/s] 12%|█████▌                                      | 4/32 [00:02<00:16,  1.69it/s] 16%|██████▉                                     | 5/32 [00:02<00:15,  1.71it/s] 19%|████████▎                                   | 6/32 [00:03<00:15,  1.72it/s] 22%|█████████▋                                  | 7/32 [00:04<00:14,  1.73it/s] 25%|███████████                                 | 8/32 [00:04<00:13,  1.73it/s] 28%|████████████▍                               | 9/32 [00:05<00:14,  1.61it/s] 31%|█████████████▍                             | 10/32 [00:05<00:13,  1.62it/s] 34%|██████████████▊                            | 11/32 [00:06<00:12,  1.65it/s] 38%|████████████████▏                          | 12/32 [00:07<00:11,  1.67it/s] 41%|█████████████████▍                         | 13/32 [00:07<00:11,  1.69it/s] 44%|██████████████████▊                        | 14/32 [00:08<00:10,  1.68it/s] 47%|████████████████████▏                      | 15/32 [00:08<00:10,  1.70it/s] 50%|█████████████████████▌                     | 16/32 [00:09<00:09,  1.71it/s] 53%|██████████████████████▊                    | 17/32 [00:10<00:08,  1.71it/s] 56%|████████████████████████▏                  | 18/32 [00:10<00:08,  1.70it/s] 59%|█████████████████████████▌                 | 19/32 [00:11<00:07,  1.71it/s] 62%|██████████████████████████▉                | 20/32 [00:11<00:07,  1.70it/s] 66%|████████████████████████████▏              | 21/32 [00:12<00:06,  1.72it/s] 69%|█████████████████████████████▌             | 22/32 [00:12<00:05,  1.72it/s] 72%|██████████████████████████████▉            | 23/32 [00:13<00:05,  1.73it/s] 75%|████████████████████████████████▎          | 24/32 [00:14<00:04,  1.73it/s] 78%|█████████████████████████████████▌         | 25/32 [00:14<00:04,  1.72it/s] 81%|██████████████████████████████████▉        | 26/32 [00:15<00:03,  1.72it/s] 84%|████████████████████████████████████▎      | 27/32 [00:15<00:02,  1.73it/s] 88%|█████████████████████████████████████▋     | 28/32 [00:16<00:02,  1.70it/s] 91%|██████████████████████████████████████▉    | 29/32 [00:17<00:01,  1.71it/s] 94%|████████████████████████████████████████▎  | 30/32 [00:17<00:01,  1.71it/s] 97%|█████████████████████████████████████████▋ | 31/32 [00:18<00:00,  1.72it/s]100%|███████████████████████████████████████████| 32/32 [00:18<00:00,  1.73it/s]100%|███████████████████████████████████████████| 32/32 [00:18<00:00,  1.70it/s]
Consecutive layer pairs:  torch.Size([32, 618, 618])
 67%|████████████████████████████▋              | 54/81 [50:56<18:18, 40.69s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:01<00:35,  1.16s/it]  6%|██▊                                         | 2/32 [00:02<00:35,  1.17s/it]  9%|████▏                                       | 3/32 [00:03<00:33,  1.17s/it] 12%|█████▌                                      | 4/32 [00:04<00:32,  1.17s/it] 16%|██████▉                                     | 5/32 [00:05<00:31,  1.17s/it] 19%|████████▎                                   | 6/32 [00:06<00:30,  1.17s/it] 22%|█████████▋                                  | 7/32 [00:08<00:29,  1.17s/it] 25%|███████████                                 | 8/32 [00:09<00:27,  1.17s/it] 28%|████████████▍                               | 9/32 [00:10<00:27,  1.18s/it] 31%|█████████████▍                             | 10/32 [00:11<00:25,  1.17s/it] 34%|██████████████▊                            | 11/32 [00:12<00:24,  1.18s/it] 38%|████████████████▏                          | 12/32 [00:14<00:23,  1.18s/it] 41%|█████████████████▍                         | 13/32 [00:15<00:22,  1.19s/it] 44%|██████████████████▊                        | 14/32 [00:16<00:21,  1.19s/it] 47%|████████████████████▏                      | 15/32 [00:17<00:20,  1.21s/it] 50%|█████████████████████▌                     | 16/32 [00:18<00:19,  1.19s/it] 53%|██████████████████████▊                    | 17/32 [00:20<00:17,  1.18s/it] 56%|████████████████████████▏                  | 18/32 [00:21<00:16,  1.19s/it] 59%|█████████████████████████▌                 | 19/32 [00:22<00:15,  1.19s/it] 62%|██████████████████████████▉                | 20/32 [00:23<00:14,  1.18s/it] 66%|████████████████████████████▏              | 21/32 [00:24<00:12,  1.18s/it] 69%|█████████████████████████████▌             | 22/32 [00:25<00:11,  1.18s/it] 72%|██████████████████████████████▉            | 23/32 [00:27<00:10,  1.17s/it] 75%|████████████████████████████████▎          | 24/32 [00:28<00:09,  1.18s/it] 78%|█████████████████████████████████▌         | 25/32 [00:29<00:08,  1.17s/it] 81%|██████████████████████████████████▉        | 26/32 [00:30<00:07,  1.17s/it] 84%|████████████████████████████████████▎      | 27/32 [00:31<00:05,  1.16s/it] 88%|█████████████████████████████████████▋     | 28/32 [00:32<00:04,  1.17s/it] 91%|██████████████████████████████████████▉    | 29/32 [00:34<00:03,  1.17s/it] 94%|████████████████████████████████████████▎  | 30/32 [00:35<00:02,  1.17s/it] 97%|█████████████████████████████████████████▋ | 31/32 [00:36<00:01,  1.17s/it]100%|███████████████████████████████████████████| 32/32 [00:37<00:00,  1.17s/it]100%|███████████████████████████████████████████| 32/32 [00:37<00:00,  1.18s/it]
Consecutive layer pairs:  torch.Size([32, 790, 790])
 68%|█████████████████████████████▏             | 55/81 [52:02<20:56, 48.32s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:01<00:36,  1.19s/it]  6%|██▊                                         | 2/32 [00:02<00:36,  1.20s/it]  9%|████▏                                       | 3/32 [00:03<00:34,  1.20s/it] 12%|█████▌                                      | 4/32 [00:04<00:33,  1.19s/it] 16%|██████▉                                     | 5/32 [00:05<00:31,  1.18s/it] 19%|████████▎                                   | 6/32 [00:07<00:30,  1.18s/it] 22%|█████████▋                                  | 7/32 [00:08<00:29,  1.18s/it] 25%|███████████                                 | 8/32 [00:09<00:28,  1.18s/it] 28%|████████████▍                               | 9/32 [00:10<00:27,  1.18s/it] 31%|█████████████▍                             | 10/32 [00:11<00:26,  1.19s/it] 34%|██████████████▊                            | 11/32 [00:13<00:24,  1.19s/it] 38%|████████████████▏                          | 12/32 [00:14<00:23,  1.18s/it] 41%|█████████████████▍                         | 13/32 [00:15<00:22,  1.18s/it] 44%|██████████████████▊                        | 14/32 [00:16<00:21,  1.19s/it] 47%|████████████████████▏                      | 15/32 [00:17<00:20,  1.19s/it] 50%|█████████████████████▌                     | 16/32 [00:18<00:18,  1.18s/it] 53%|██████████████████████▊                    | 17/32 [00:20<00:17,  1.18s/it] 56%|████████████████████████▏                  | 18/32 [00:21<00:16,  1.20s/it] 59%|█████████████████████████▌                 | 19/32 [00:22<00:15,  1.20s/it] 62%|██████████████████████████▉                | 20/32 [00:23<00:14,  1.19s/it] 66%|████████████████████████████▏              | 21/32 [00:24<00:13,  1.19s/it] 69%|█████████████████████████████▌             | 22/32 [00:26<00:11,  1.18s/it] 72%|██████████████████████████████▉            | 23/32 [00:27<00:10,  1.19s/it] 75%|████████████████████████████████▎          | 24/32 [00:28<00:09,  1.18s/it] 78%|█████████████████████████████████▌         | 25/32 [00:29<00:08,  1.18s/it] 81%|██████████████████████████████████▉        | 26/32 [00:30<00:07,  1.18s/it] 84%|████████████████████████████████████▎      | 27/32 [00:31<00:05,  1.17s/it] 88%|█████████████████████████████████████▋     | 28/32 [00:33<00:04,  1.18s/it] 91%|██████████████████████████████████████▉    | 29/32 [00:34<00:03,  1.17s/it] 94%|████████████████████████████████████████▎  | 30/32 [00:35<00:02,  1.17s/it] 97%|█████████████████████████████████████████▋ | 31/32 [00:36<00:01,  1.17s/it]100%|███████████████████████████████████████████| 32/32 [00:37<00:00,  1.17s/it]100%|███████████████████████████████████████████| 32/32 [00:37<00:00,  1.18s/it]
Consecutive layer pairs:  torch.Size([32, 790, 790])
 69%|█████████████████████████████▋             | 56/81 [53:03<21:40, 52.03s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:01<00:36,  1.19s/it]  6%|██▊                                         | 2/32 [00:02<00:35,  1.18s/it]  9%|████▏                                       | 3/32 [00:03<00:34,  1.20s/it] 12%|█████▌                                      | 4/32 [00:04<00:33,  1.19s/it] 16%|██████▉                                     | 5/32 [00:05<00:31,  1.18s/it] 19%|████████▎                                   | 6/32 [00:07<00:31,  1.21s/it] 22%|█████████▋                                  | 7/32 [00:08<00:30,  1.20s/it] 25%|███████████                                 | 8/32 [00:09<00:28,  1.19s/it] 28%|████████████▍                               | 9/32 [00:10<00:27,  1.20s/it] 31%|█████████████▍                             | 10/32 [00:11<00:26,  1.20s/it] 34%|██████████████▊                            | 11/32 [00:13<00:25,  1.19s/it] 38%|████████████████▏                          | 12/32 [00:14<00:23,  1.19s/it] 41%|█████████████████▍                         | 13/32 [00:15<00:23,  1.21s/it] 44%|██████████████████▊                        | 14/32 [00:16<00:21,  1.19s/it] 47%|████████████████████▏                      | 15/32 [00:17<00:20,  1.19s/it] 50%|█████████████████████▌                     | 16/32 [00:19<00:18,  1.18s/it] 53%|██████████████████████▊                    | 17/32 [00:20<00:17,  1.18s/it] 56%|████████████████████████▏                  | 18/32 [00:21<00:16,  1.18s/it] 59%|█████████████████████████▌                 | 19/32 [00:22<00:15,  1.18s/it] 62%|██████████████████████████▉                | 20/32 [00:23<00:14,  1.17s/it] 66%|████████████████████████████▏              | 21/32 [00:24<00:12,  1.17s/it] 69%|█████████████████████████████▌             | 22/32 [00:26<00:11,  1.18s/it] 72%|██████████████████████████████▉            | 23/32 [00:27<00:10,  1.18s/it] 75%|████████████████████████████████▎          | 24/32 [00:28<00:09,  1.18s/it] 78%|█████████████████████████████████▌         | 25/32 [00:29<00:08,  1.18s/it] 81%|██████████████████████████████████▉        | 26/32 [00:30<00:07,  1.19s/it] 84%|████████████████████████████████████▎      | 27/32 [00:32<00:05,  1.18s/it] 88%|█████████████████████████████████████▋     | 28/32 [00:33<00:04,  1.19s/it] 91%|██████████████████████████████████████▉    | 29/32 [00:34<00:03,  1.18s/it] 94%|████████████████████████████████████████▎  | 30/32 [00:35<00:02,  1.18s/it] 97%|█████████████████████████████████████████▋ | 31/32 [00:36<00:01,  1.18s/it]100%|███████████████████████████████████████████| 32/32 [00:37<00:00,  1.19s/it]100%|███████████████████████████████████████████| 32/32 [00:37<00:00,  1.19s/it]
Consecutive layer pairs:  torch.Size([32, 790, 790])
 70%|██████████████████████████████▎            | 57/81 [54:10<22:37, 56.57s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:01<00:40,  1.31s/it]  6%|██▊                                         | 2/32 [00:02<00:39,  1.31s/it]  9%|████▏                                       | 3/32 [00:03<00:38,  1.33s/it] 12%|█████▌                                      | 4/32 [00:05<00:36,  1.32s/it] 16%|██████▉                                     | 5/32 [00:06<00:35,  1.31s/it] 19%|████████▎                                   | 6/32 [00:07<00:34,  1.31s/it] 22%|█████████▋                                  | 7/32 [00:09<00:32,  1.31s/it] 25%|███████████                                 | 8/32 [00:10<00:31,  1.31s/it] 28%|████████████▍                               | 9/32 [00:11<00:30,  1.30s/it] 31%|█████████████▍                             | 10/32 [00:13<00:28,  1.31s/it] 34%|██████████████▊                            | 11/32 [00:14<00:27,  1.31s/it] 38%|████████████████▏                          | 12/32 [00:15<00:26,  1.30s/it] 41%|█████████████████▍                         | 13/32 [00:17<00:24,  1.31s/it] 44%|██████████████████▊                        | 14/32 [00:18<00:23,  1.31s/it] 47%|████████████████████▏                      | 15/32 [00:19<00:22,  1.32s/it] 50%|█████████████████████▌                     | 16/32 [00:21<00:21,  1.32s/it] 53%|██████████████████████▊                    | 17/32 [00:22<00:19,  1.32s/it] 56%|████████████████████████▏                  | 18/32 [00:23<00:18,  1.32s/it] 59%|█████████████████████████▌                 | 19/32 [00:24<00:17,  1.31s/it] 62%|██████████████████████████▉                | 20/32 [00:26<00:15,  1.31s/it] 66%|████████████████████████████▏              | 21/32 [00:27<00:14,  1.31s/it] 69%|█████████████████████████████▌             | 22/32 [00:28<00:13,  1.31s/it] 72%|██████████████████████████████▉            | 23/32 [00:30<00:11,  1.31s/it] 75%|████████████████████████████████▎          | 24/32 [00:31<00:10,  1.31s/it] 78%|█████████████████████████████████▌         | 25/32 [00:32<00:09,  1.30s/it] 81%|██████████████████████████████████▉        | 26/32 [00:34<00:07,  1.30s/it] 84%|████████████████████████████████████▎      | 27/32 [00:35<00:06,  1.30s/it] 88%|█████████████████████████████████████▋     | 28/32 [00:36<00:05,  1.30s/it] 91%|██████████████████████████████████████▉    | 29/32 [00:37<00:03,  1.30s/it] 94%|████████████████████████████████████████▎  | 30/32 [00:39<00:02,  1.30s/it] 97%|█████████████████████████████████████████▋ | 31/32 [00:40<00:01,  1.30s/it]100%|███████████████████████████████████████████| 32/32 [00:41<00:00,  1.30s/it]100%|███████████████████████████████████████████| 32/32 [00:41<00:00,  1.31s/it]
Consecutive layer pairs:  torch.Size([32, 818, 818])
 72%|██████████████████████████████▊            | 58/81 [55:16<22:45, 59.35s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:01<00:39,  1.29s/it]  6%|██▊                                         | 2/32 [00:02<00:38,  1.30s/it]  9%|████▏                                       | 3/32 [00:03<00:37,  1.30s/it] 12%|█████▌                                      | 4/32 [00:05<00:36,  1.31s/it] 16%|██████▉                                     | 5/32 [00:06<00:35,  1.30s/it] 19%|████████▎                                   | 6/32 [00:07<00:33,  1.30s/it] 22%|█████████▋                                  | 7/32 [00:09<00:32,  1.30s/it] 25%|███████████                                 | 8/32 [00:10<00:31,  1.30s/it] 28%|████████████▍                               | 9/32 [00:11<00:30,  1.31s/it] 31%|█████████████▍                             | 10/32 [00:13<00:28,  1.30s/it] 34%|██████████████▊                            | 11/32 [00:14<00:27,  1.31s/it] 38%|████████████████▏                          | 12/32 [00:15<00:26,  1.32s/it] 41%|█████████████████▍                         | 13/32 [00:17<00:25,  1.33s/it] 44%|██████████████████▊                        | 14/32 [00:18<00:23,  1.32s/it] 47%|████████████████████▏                      | 15/32 [00:19<00:22,  1.33s/it] 50%|█████████████████████▌                     | 16/32 [00:21<00:21,  1.33s/it] 53%|██████████████████████▊                    | 17/32 [00:22<00:19,  1.32s/it] 56%|████████████████████████▏                  | 18/32 [00:23<00:18,  1.32s/it] 59%|█████████████████████████▌                 | 19/32 [00:24<00:17,  1.31s/it] 62%|██████████████████████████▉                | 20/32 [00:26<00:15,  1.31s/it] 66%|████████████████████████████▏              | 21/32 [00:27<00:14,  1.31s/it] 69%|█████████████████████████████▌             | 22/32 [00:28<00:13,  1.31s/it] 72%|██████████████████████████████▉            | 23/32 [00:30<00:11,  1.31s/it] 75%|████████████████████████████████▎          | 24/32 [00:31<00:10,  1.31s/it] 78%|█████████████████████████████████▌         | 25/32 [00:32<00:09,  1.31s/it] 81%|██████████████████████████████████▉        | 26/32 [00:34<00:07,  1.32s/it] 84%|████████████████████████████████████▎      | 27/32 [00:35<00:06,  1.31s/it] 88%|█████████████████████████████████████▋     | 28/32 [00:36<00:05,  1.31s/it] 91%|██████████████████████████████████████▉    | 29/32 [00:38<00:03,  1.30s/it] 94%|████████████████████████████████████████▎  | 30/32 [00:39<00:02,  1.30s/it] 97%|█████████████████████████████████████████▋ | 31/32 [00:40<00:01,  1.32s/it]100%|███████████████████████████████████████████| 32/32 [00:41<00:00,  1.31s/it]100%|███████████████████████████████████████████| 32/32 [00:41<00:00,  1.31s/it]
Consecutive layer pairs:  torch.Size([32, 818, 818])
 73%|███████████████████████████████▎           | 59/81 [56:27<23:04, 62.93s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:01<00:41,  1.33s/it]  6%|██▊                                         | 2/32 [00:02<00:39,  1.31s/it]  9%|████▏                                       | 3/32 [00:03<00:38,  1.31s/it] 12%|█████▌                                      | 4/32 [00:05<00:36,  1.31s/it] 16%|██████▉                                     | 5/32 [00:06<00:35,  1.30s/it] 19%|████████▎                                   | 6/32 [00:07<00:34,  1.32s/it] 22%|█████████▋                                  | 7/32 [00:09<00:32,  1.31s/it] 25%|███████████                                 | 8/32 [00:10<00:31,  1.33s/it] 28%|████████████▍                               | 9/32 [00:11<00:30,  1.32s/it] 31%|█████████████▍                             | 10/32 [00:13<00:28,  1.31s/it] 34%|██████████████▊                            | 11/32 [00:14<00:27,  1.31s/it] 38%|████████████████▏                          | 12/32 [00:15<00:26,  1.31s/it] 41%|█████████████████▍                         | 13/32 [00:17<00:24,  1.31s/it] 44%|██████████████████▊                        | 14/32 [00:18<00:23,  1.31s/it] 47%|████████████████████▏                      | 15/32 [00:19<00:22,  1.31s/it] 50%|█████████████████████▌                     | 16/32 [00:20<00:20,  1.31s/it] 53%|██████████████████████▊                    | 17/32 [00:22<00:19,  1.30s/it] 56%|████████████████████████▏                  | 18/32 [00:23<00:18,  1.30s/it] 59%|█████████████████████████▌                 | 19/32 [00:24<00:16,  1.30s/it] 62%|██████████████████████████▉                | 20/32 [00:26<00:15,  1.30s/it] 66%|████████████████████████████▏              | 21/32 [00:27<00:14,  1.30s/it] 69%|█████████████████████████████▌             | 22/32 [00:28<00:13,  1.30s/it] 72%|██████████████████████████████▉            | 23/32 [00:30<00:11,  1.31s/it] 75%|████████████████████████████████▎          | 24/32 [00:31<00:10,  1.32s/it] 78%|█████████████████████████████████▌         | 25/32 [00:32<00:09,  1.31s/it] 81%|██████████████████████████████████▉        | 26/32 [00:34<00:07,  1.30s/it] 84%|████████████████████████████████████▎      | 27/32 [00:35<00:06,  1.30s/it] 88%|█████████████████████████████████████▋     | 28/32 [00:36<00:05,  1.30s/it] 91%|██████████████████████████████████████▉    | 29/32 [00:37<00:03,  1.30s/it] 94%|████████████████████████████████████████▎  | 30/32 [00:39<00:02,  1.30s/it] 97%|█████████████████████████████████████████▋ | 31/32 [00:40<00:01,  1.30s/it]100%|███████████████████████████████████████████| 32/32 [00:41<00:00,  1.30s/it]100%|███████████████████████████████████████████| 32/32 [00:41<00:00,  1.31s/it]
Consecutive layer pairs:  torch.Size([32, 818, 818])
 74%|███████████████████████████████▊           | 60/81 [57:37<22:49, 65.20s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:00<00:18,  1.69it/s]  6%|██▊                                         | 2/32 [00:01<00:18,  1.65it/s]  9%|████▏                                       | 3/32 [00:01<00:17,  1.69it/s] 12%|█████▌                                      | 4/32 [00:02<00:16,  1.70it/s] 16%|██████▉                                     | 5/32 [00:02<00:15,  1.71it/s] 19%|████████▎                                   | 6/32 [00:03<00:15,  1.71it/s] 22%|█████████▋                                  | 7/32 [00:04<00:14,  1.71it/s] 25%|███████████                                 | 8/32 [00:04<00:14,  1.70it/s] 28%|████████████▍                               | 9/32 [00:05<00:13,  1.71it/s] 31%|█████████████▍                             | 10/32 [00:05<00:12,  1.71it/s] 34%|██████████████▊                            | 11/32 [00:06<00:12,  1.72it/s] 38%|████████████████▏                          | 12/32 [00:07<00:11,  1.72it/s] 41%|█████████████████▍                         | 13/32 [00:07<00:11,  1.72it/s] 44%|██████████████████▊                        | 14/32 [00:08<00:10,  1.72it/s] 47%|████████████████████▏                      | 15/32 [00:08<00:09,  1.71it/s] 50%|█████████████████████▌                     | 16/32 [00:09<00:09,  1.71it/s] 53%|██████████████████████▊                    | 17/32 [00:09<00:08,  1.72it/s] 56%|████████████████████████▏                  | 18/32 [00:10<00:08,  1.73it/s] 59%|█████████████████████████▌                 | 19/32 [00:11<00:07,  1.67it/s] 62%|██████████████████████████▉                | 20/32 [00:11<00:07,  1.69it/s] 66%|████████████████████████████▏              | 21/32 [00:12<00:06,  1.70it/s] 69%|█████████████████████████████▌             | 22/32 [00:12<00:05,  1.72it/s] 72%|██████████████████████████████▉            | 23/32 [00:13<00:05,  1.70it/s] 75%|████████████████████████████████▎          | 24/32 [00:14<00:04,  1.71it/s] 78%|█████████████████████████████████▌         | 25/32 [00:14<00:04,  1.72it/s] 81%|██████████████████████████████████▉        | 26/32 [00:15<00:03,  1.72it/s] 84%|████████████████████████████████████▎      | 27/32 [00:15<00:02,  1.72it/s] 88%|█████████████████████████████████████▋     | 28/32 [00:16<00:02,  1.73it/s] 91%|██████████████████████████████████████▉    | 29/32 [00:16<00:01,  1.71it/s] 94%|████████████████████████████████████████▎  | 30/32 [00:17<00:01,  1.71it/s] 97%|█████████████████████████████████████████▋ | 31/32 [00:18<00:00,  1.71it/s]100%|███████████████████████████████████████████| 32/32 [00:18<00:00,  1.70it/s]100%|███████████████████████████████████████████| 32/32 [00:18<00:00,  1.71it/s]
Consecutive layer pairs:  torch.Size([32, 618, 618])
 75%|████████████████████████████████▍          | 61/81 [58:11<18:32, 55.62s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:00<00:18,  1.72it/s]  6%|██▊                                         | 2/32 [00:01<00:17,  1.72it/s]  9%|████▏                                       | 3/32 [00:01<00:16,  1.74it/s] 12%|█████▌                                      | 4/32 [00:02<00:16,  1.73it/s] 16%|██████▉                                     | 5/32 [00:02<00:15,  1.71it/s] 19%|████████▎                                   | 6/32 [00:03<00:15,  1.72it/s] 22%|█████████▋                                  | 7/32 [00:04<00:14,  1.71it/s] 25%|███████████                                 | 8/32 [00:04<00:14,  1.71it/s] 28%|████████████▍                               | 9/32 [00:05<00:13,  1.71it/s] 31%|█████████████▍                             | 10/32 [00:05<00:12,  1.70it/s] 34%|██████████████▊                            | 11/32 [00:06<00:12,  1.71it/s] 38%|████████████████▏                          | 12/32 [00:06<00:11,  1.72it/s] 41%|█████████████████▍                         | 13/32 [00:07<00:11,  1.72it/s] 44%|██████████████████▊                        | 14/32 [00:08<00:10,  1.72it/s] 47%|████████████████████▏                      | 15/32 [00:08<00:09,  1.70it/s] 50%|█████████████████████▌                     | 16/32 [00:09<00:09,  1.70it/s] 53%|██████████████████████▊                    | 17/32 [00:09<00:08,  1.71it/s] 56%|████████████████████████▏                  | 18/32 [00:10<00:08,  1.72it/s] 59%|█████████████████████████▌                 | 19/32 [00:11<00:07,  1.72it/s] 62%|██████████████████████████▉                | 20/32 [00:11<00:06,  1.73it/s] 66%|████████████████████████████▏              | 21/32 [00:12<00:06,  1.73it/s] 69%|█████████████████████████████▌             | 22/32 [00:12<00:05,  1.73it/s] 72%|██████████████████████████████▉            | 23/32 [00:13<00:05,  1.73it/s] 75%|████████████████████████████████▎          | 24/32 [00:13<00:04,  1.73it/s] 78%|█████████████████████████████████▌         | 25/32 [00:14<00:04,  1.73it/s] 81%|██████████████████████████████████▉        | 26/32 [00:15<00:03,  1.73it/s] 84%|████████████████████████████████████▎      | 27/32 [00:15<00:02,  1.72it/s] 88%|█████████████████████████████████████▋     | 28/32 [00:16<00:02,  1.72it/s] 91%|██████████████████████████████████████▉    | 29/32 [00:16<00:01,  1.73it/s] 94%|████████████████████████████████████████▎  | 30/32 [00:17<00:01,  1.73it/s] 97%|█████████████████████████████████████████▋ | 31/32 [00:18<00:00,  1.72it/s]100%|███████████████████████████████████████████| 32/32 [00:18<00:00,  1.72it/s]100%|███████████████████████████████████████████| 32/32 [00:18<00:00,  1.72it/s]
Consecutive layer pairs:  torch.Size([32, 618, 618])
 77%|████████████████████████████████▉          | 62/81 [58:46<15:43, 49.66s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:00<00:17,  1.75it/s]  6%|██▊                                         | 2/32 [00:01<00:17,  1.71it/s]  9%|████▏                                       | 3/32 [00:01<00:16,  1.71it/s] 12%|█████▌                                      | 4/32 [00:02<00:16,  1.71it/s] 16%|██████▉                                     | 5/32 [00:02<00:15,  1.71it/s] 19%|████████▎                                   | 6/32 [00:03<00:15,  1.72it/s] 22%|█████████▋                                  | 7/32 [00:04<00:14,  1.72it/s] 25%|███████████                                 | 8/32 [00:04<00:13,  1.72it/s] 28%|████████████▍                               | 9/32 [00:05<00:14,  1.61it/s] 31%|█████████████▍                             | 10/32 [00:05<00:13,  1.64it/s] 34%|██████████████▊                            | 11/32 [00:06<00:12,  1.66it/s] 38%|████████████████▏                          | 12/32 [00:07<00:11,  1.67it/s] 41%|█████████████████▍                         | 13/32 [00:07<00:11,  1.67it/s] 44%|██████████████████▊                        | 14/32 [00:08<00:10,  1.68it/s] 47%|████████████████████▏                      | 15/32 [00:08<00:10,  1.69it/s] 50%|█████████████████████▌                     | 16/32 [00:09<00:09,  1.69it/s] 53%|██████████████████████▊                    | 17/32 [00:10<00:08,  1.70it/s] 56%|████████████████████████▏                  | 18/32 [00:10<00:08,  1.71it/s] 59%|█████████████████████████▌                 | 19/32 [00:11<00:07,  1.72it/s] 62%|██████████████████████████▉                | 20/32 [00:11<00:06,  1.72it/s] 66%|████████████████████████████▏              | 21/32 [00:12<00:06,  1.73it/s] 69%|█████████████████████████████▌             | 22/32 [00:12<00:05,  1.72it/s] 72%|██████████████████████████████▉            | 23/32 [00:13<00:05,  1.72it/s] 75%|████████████████████████████████▎          | 24/32 [00:14<00:04,  1.72it/s] 78%|█████████████████████████████████▌         | 25/32 [00:14<00:04,  1.72it/s] 81%|██████████████████████████████████▉        | 26/32 [00:15<00:03,  1.72it/s] 84%|████████████████████████████████████▎      | 27/32 [00:15<00:02,  1.72it/s] 88%|█████████████████████████████████████▋     | 28/32 [00:16<00:02,  1.72it/s] 91%|██████████████████████████████████████▉    | 29/32 [00:17<00:01,  1.72it/s] 94%|████████████████████████████████████████▎  | 30/32 [00:17<00:01,  1.69it/s] 97%|█████████████████████████████████████████▋ | 31/32 [00:18<00:00,  1.70it/s]100%|███████████████████████████████████████████| 32/32 [00:18<00:00,  1.70it/s]100%|███████████████████████████████████████████| 32/32 [00:18<00:00,  1.70it/s]
Consecutive layer pairs:  torch.Size([32, 618, 618])
 78%|█████████████████████████████████▍         | 63/81 [59:19<13:20, 44.48s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:01<00:37,  1.20s/it]  6%|██▊                                         | 2/32 [00:02<00:35,  1.18s/it]  9%|████▏                                       | 3/32 [00:03<00:35,  1.23s/it] 12%|█████▌                                      | 4/32 [00:04<00:33,  1.21s/it] 16%|██████▉                                     | 5/32 [00:06<00:32,  1.20s/it] 19%|████████▎                                   | 6/32 [00:07<00:31,  1.19s/it] 22%|█████████▋                                  | 7/32 [00:08<00:29,  1.19s/it] 25%|███████████                                 | 8/32 [00:09<00:28,  1.20s/it] 28%|████████████▍                               | 9/32 [00:10<00:27,  1.19s/it] 31%|█████████████▍                             | 10/32 [00:11<00:26,  1.19s/it] 34%|██████████████▊                            | 11/32 [00:13<00:24,  1.18s/it] 38%|████████████████▏                          | 12/32 [00:14<00:23,  1.19s/it] 41%|█████████████████▍                         | 13/32 [00:15<00:22,  1.19s/it] 44%|██████████████████▊                        | 14/32 [00:16<00:21,  1.18s/it] 47%|████████████████████▏                      | 15/32 [00:17<00:20,  1.18s/it] 50%|█████████████████████▌                     | 16/32 [00:19<00:18,  1.18s/it] 53%|██████████████████████▊                    | 17/32 [00:20<00:17,  1.18s/it] 56%|████████████████████████▏                  | 18/32 [00:21<00:16,  1.18s/it] 59%|█████████████████████████▌                 | 19/32 [00:22<00:15,  1.18s/it] 62%|██████████████████████████▉                | 20/32 [00:23<00:14,  1.19s/it] 66%|████████████████████████████▏              | 21/32 [00:24<00:13,  1.19s/it] 69%|█████████████████████████████▌             | 22/32 [00:26<00:11,  1.19s/it] 72%|██████████████████████████████▉            | 23/32 [00:27<00:10,  1.19s/it] 75%|████████████████████████████████▎          | 24/32 [00:28<00:09,  1.19s/it] 78%|█████████████████████████████████▌         | 25/32 [00:29<00:08,  1.19s/it] 81%|██████████████████████████████████▉        | 26/32 [00:30<00:07,  1.19s/it] 84%|████████████████████████████████████▎      | 27/32 [00:32<00:05,  1.19s/it] 88%|█████████████████████████████████████▋     | 28/32 [00:33<00:04,  1.18s/it] 91%|██████████████████████████████████████▉    | 29/32 [00:34<00:03,  1.18s/it] 94%|████████████████████████████████████████▎  | 30/32 [00:35<00:02,  1.23s/it] 97%|█████████████████████████████████████████▋ | 31/32 [00:37<00:01,  1.22s/it]100%|███████████████████████████████████████████| 32/32 [00:38<00:00,  1.21s/it]100%|███████████████████████████████████████████| 32/32 [00:38<00:00,  1.19s/it]
Consecutive layer pairs:  torch.Size([32, 794, 794])
 79%|████████████████████████████████▍        | 64/81 [1:00:31<14:58, 52.87s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:01<00:36,  1.18s/it]  6%|██▊                                         | 2/32 [00:02<00:35,  1.18s/it]  9%|████▏                                       | 3/32 [00:03<00:34,  1.19s/it] 12%|█████▌                                      | 4/32 [00:04<00:33,  1.18s/it] 16%|██████▉                                     | 5/32 [00:05<00:31,  1.18s/it] 19%|████████▎                                   | 6/32 [00:07<00:30,  1.19s/it] 22%|█████████▋                                  | 7/32 [00:08<00:29,  1.18s/it] 25%|███████████                                 | 8/32 [00:09<00:28,  1.19s/it] 28%|████████████▍                               | 9/32 [00:10<00:27,  1.19s/it] 31%|█████████████▍                             | 10/32 [00:11<00:26,  1.19s/it] 34%|██████████████▊                            | 11/32 [00:13<00:24,  1.19s/it] 38%|████████████████▏                          | 12/32 [00:14<00:23,  1.19s/it] 41%|█████████████████▍                         | 13/32 [00:15<00:22,  1.19s/it] 44%|██████████████████▊                        | 14/32 [00:16<00:21,  1.18s/it] 47%|████████████████████▏                      | 15/32 [00:17<00:20,  1.18s/it] 50%|█████████████████████▌                     | 16/32 [00:19<00:19,  1.25s/it] 53%|██████████████████████▊                    | 17/32 [00:20<00:18,  1.23s/it] 56%|████████████████████████▏                  | 18/32 [00:21<00:16,  1.21s/it] 59%|█████████████████████████▌                 | 19/32 [00:22<00:15,  1.23s/it] 62%|██████████████████████████▉                | 20/32 [00:23<00:14,  1.22s/it] 66%|████████████████████████████▏              | 21/32 [00:25<00:13,  1.21s/it] 69%|█████████████████████████████▌             | 22/32 [00:26<00:11,  1.20s/it] 72%|██████████████████████████████▉            | 23/32 [00:27<00:10,  1.19s/it] 75%|████████████████████████████████▎          | 24/32 [00:28<00:09,  1.24s/it] 78%|█████████████████████████████████▌         | 25/32 [00:30<00:08,  1.22s/it] 81%|██████████████████████████████████▉        | 26/32 [00:31<00:07,  1.21s/it] 84%|████████████████████████████████████▎      | 27/32 [00:32<00:05,  1.20s/it] 88%|█████████████████████████████████████▋     | 28/32 [00:33<00:04,  1.20s/it] 91%|██████████████████████████████████████▉    | 29/32 [00:34<00:03,  1.22s/it] 94%|████████████████████████████████████████▎  | 30/32 [00:36<00:02,  1.21s/it] 97%|█████████████████████████████████████████▋ | 31/32 [00:37<00:01,  1.21s/it]100%|███████████████████████████████████████████| 32/32 [00:38<00:00,  1.21s/it]100%|███████████████████████████████████████████| 32/32 [00:38<00:00,  1.20s/it]
Consecutive layer pairs:  torch.Size([32, 794, 794])
 80%|████████████████████████████████▉        | 65/81 [1:01:37<15:09, 56.86s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:01<00:36,  1.17s/it]  6%|██▊                                         | 2/32 [00:02<00:36,  1.20s/it]  9%|████▏                                       | 3/32 [00:03<00:34,  1.19s/it] 12%|█████▌                                      | 4/32 [00:04<00:33,  1.19s/it] 16%|██████▉                                     | 5/32 [00:05<00:32,  1.19s/it] 19%|████████▎                                   | 6/32 [00:07<00:30,  1.19s/it] 22%|█████████▋                                  | 7/32 [00:08<00:29,  1.18s/it] 25%|███████████                                 | 8/32 [00:09<00:28,  1.20s/it] 28%|████████████▍                               | 9/32 [00:10<00:27,  1.19s/it] 31%|█████████████▍                             | 10/32 [00:11<00:26,  1.19s/it] 34%|██████████████▊                            | 11/32 [00:13<00:24,  1.19s/it] 38%|████████████████▏                          | 12/32 [00:14<00:23,  1.19s/it] 41%|█████████████████▍                         | 13/32 [00:15<00:22,  1.19s/it] 44%|██████████████████▊                        | 14/32 [00:16<00:21,  1.20s/it] 47%|████████████████████▏                      | 15/32 [00:17<00:20,  1.20s/it] 50%|█████████████████████▌                     | 16/32 [00:19<00:19,  1.20s/it] 53%|██████████████████████▊                    | 17/32 [00:20<00:17,  1.20s/it] 56%|████████████████████████▏                  | 18/32 [00:21<00:16,  1.20s/it] 59%|█████████████████████████▌                 | 19/32 [00:22<00:15,  1.19s/it] 62%|██████████████████████████▉                | 20/32 [00:23<00:14,  1.19s/it] 66%|████████████████████████████▏              | 21/32 [00:25<00:13,  1.19s/it] 69%|█████████████████████████████▌             | 22/32 [00:26<00:12,  1.20s/it] 72%|██████████████████████████████▉            | 23/32 [00:27<00:10,  1.20s/it] 75%|████████████████████████████████▎          | 24/32 [00:28<00:09,  1.19s/it] 78%|█████████████████████████████████▌         | 25/32 [00:29<00:08,  1.19s/it] 81%|██████████████████████████████████▉        | 26/32 [00:31<00:07,  1.18s/it] 84%|████████████████████████████████████▎      | 27/32 [00:32<00:06,  1.24s/it] 88%|█████████████████████████████████████▋     | 28/32 [00:33<00:05,  1.31s/it] 91%|██████████████████████████████████████▉    | 29/32 [00:35<00:03,  1.29s/it] 94%|████████████████████████████████████████▎  | 30/32 [00:36<00:02,  1.28s/it] 97%|█████████████████████████████████████████▋ | 31/32 [00:37<00:01,  1.25s/it]100%|███████████████████████████████████████████| 32/32 [00:38<00:00,  1.23s/it]100%|███████████████████████████████████████████| 32/32 [00:38<00:00,  1.21s/it]
Consecutive layer pairs:  torch.Size([32, 794, 794])
 81%|█████████████████████████████████▍       | 66/81 [1:02:44<14:55, 59.71s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:01<00:40,  1.31s/it]  6%|██▊                                         | 2/32 [00:02<00:39,  1.31s/it]  9%|████▏                                       | 3/32 [00:03<00:37,  1.31s/it] 12%|█████▌                                      | 4/32 [00:05<00:36,  1.31s/it] 16%|██████▉                                     | 5/32 [00:06<00:35,  1.32s/it] 19%|████████▎                                   | 6/32 [00:07<00:34,  1.34s/it] 22%|█████████▋                                  | 7/32 [00:09<00:33,  1.35s/it] 25%|███████████                                 | 8/32 [00:10<00:32,  1.34s/it] 28%|████████████▍                               | 9/32 [00:11<00:30,  1.33s/it] 31%|█████████████▍                             | 10/32 [00:13<00:29,  1.33s/it] 34%|██████████████▊                            | 11/32 [00:14<00:27,  1.33s/it] 38%|████████████████▏                          | 12/32 [00:15<00:26,  1.33s/it] 41%|█████████████████▍                         | 13/32 [00:17<00:25,  1.33s/it] 44%|██████████████████▊                        | 14/32 [00:18<00:23,  1.33s/it] 47%|████████████████████▏                      | 15/32 [00:19<00:22,  1.33s/it] 50%|█████████████████████▌                     | 16/32 [00:21<00:21,  1.33s/it] 53%|██████████████████████▊                    | 17/32 [00:22<00:20,  1.35s/it] 56%|████████████████████████▏                  | 18/32 [00:23<00:18,  1.34s/it] 59%|█████████████████████████▌                 | 19/32 [00:25<00:17,  1.34s/it] 62%|██████████████████████████▉                | 20/32 [00:26<00:16,  1.34s/it] 66%|████████████████████████████▏              | 21/32 [00:28<00:14,  1.35s/it] 69%|█████████████████████████████▌             | 22/32 [00:29<00:13,  1.34s/it] 72%|██████████████████████████████▉            | 23/32 [00:30<00:12,  1.34s/it] 75%|████████████████████████████████▎          | 24/32 [00:32<00:10,  1.33s/it] 78%|█████████████████████████████████▌         | 25/32 [00:33<00:09,  1.34s/it] 81%|██████████████████████████████████▉        | 26/32 [00:34<00:08,  1.36s/it] 84%|████████████████████████████████████▎      | 27/32 [00:36<00:06,  1.34s/it] 88%|█████████████████████████████████████▋     | 28/32 [00:37<00:05,  1.33s/it] 91%|██████████████████████████████████████▉    | 29/32 [00:38<00:03,  1.33s/it] 94%|████████████████████████████████████████▎  | 30/32 [00:40<00:02,  1.32s/it] 97%|█████████████████████████████████████████▋ | 31/32 [00:41<00:01,  1.32s/it]100%|███████████████████████████████████████████| 32/32 [00:42<00:00,  1.32s/it]100%|███████████████████████████████████████████| 32/32 [00:42<00:00,  1.33s/it]
Consecutive layer pairs:  torch.Size([32, 822, 822])
 83%|█████████████████████████████████▉       | 67/81 [1:03:51<14:27, 61.94s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:01<00:40,  1.30s/it]  6%|██▊                                         | 2/32 [00:02<00:40,  1.35s/it]  9%|████▏                                       | 3/32 [00:04<00:38,  1.34s/it] 12%|█████▌                                      | 4/32 [00:05<00:37,  1.34s/it] 16%|██████▉                                     | 5/32 [00:06<00:35,  1.33s/it] 19%|████████▎                                   | 6/32 [00:08<00:34,  1.33s/it] 22%|█████████▋                                  | 7/32 [00:09<00:33,  1.33s/it] 25%|███████████                                 | 8/32 [00:10<00:31,  1.32s/it] 28%|████████████▍                               | 9/32 [00:11<00:30,  1.33s/it] 31%|█████████████▍                             | 10/32 [00:13<00:29,  1.33s/it] 34%|██████████████▊                            | 11/32 [00:14<00:27,  1.32s/it] 38%|████████████████▏                          | 12/32 [00:15<00:26,  1.32s/it] 41%|█████████████████▍                         | 13/32 [00:17<00:25,  1.32s/it] 44%|██████████████████▊                        | 14/32 [00:18<00:23,  1.32s/it] 47%|████████████████████▏                      | 15/32 [00:19<00:22,  1.33s/it] 50%|█████████████████████▌                     | 16/32 [00:21<00:21,  1.33s/it] 53%|██████████████████████▊                    | 17/32 [00:22<00:19,  1.32s/it] 56%|████████████████████████▏                  | 18/32 [00:23<00:18,  1.32s/it] 59%|█████████████████████████▌                 | 19/32 [00:25<00:17,  1.32s/it] 62%|██████████████████████████▉                | 20/32 [00:26<00:15,  1.32s/it] 66%|████████████████████████████▏              | 21/32 [00:27<00:14,  1.33s/it] 69%|█████████████████████████████▌             | 22/32 [00:29<00:13,  1.33s/it] 72%|██████████████████████████████▉            | 23/32 [00:30<00:11,  1.33s/it] 75%|████████████████████████████████▎          | 24/32 [00:31<00:10,  1.33s/it] 78%|█████████████████████████████████▌         | 25/32 [00:33<00:09,  1.33s/it] 81%|██████████████████████████████████▉        | 26/32 [00:34<00:07,  1.32s/it] 84%|████████████████████████████████████▎      | 27/32 [00:35<00:06,  1.32s/it] 88%|█████████████████████████████████████▋     | 28/32 [00:37<00:05,  1.32s/it] 91%|██████████████████████████████████████▉    | 29/32 [00:38<00:03,  1.32s/it] 94%|████████████████████████████████████████▎  | 30/32 [00:39<00:02,  1.32s/it] 97%|█████████████████████████████████████████▋ | 31/32 [00:41<00:01,  1.32s/it]100%|███████████████████████████████████████████| 32/32 [00:42<00:00,  1.32s/it]100%|███████████████████████████████████████████| 32/32 [00:42<00:00,  1.32s/it]
Consecutive layer pairs:  torch.Size([32, 822, 822])
 84%|██████████████████████████████████▍      | 68/81 [1:04:58<13:45, 63.48s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:01<00:42,  1.37s/it]  6%|██▊                                         | 2/32 [00:02<00:40,  1.34s/it]  9%|████▏                                       | 3/32 [00:04<00:38,  1.33s/it] 12%|█████▌                                      | 4/32 [00:05<00:37,  1.33s/it] 16%|██████▉                                     | 5/32 [00:06<00:35,  1.32s/it] 19%|████████▎                                   | 6/32 [00:07<00:34,  1.32s/it] 22%|█████████▋                                  | 7/32 [00:09<00:33,  1.34s/it] 25%|███████████                                 | 8/32 [00:10<00:32,  1.33s/it] 28%|████████████▍                               | 9/32 [00:11<00:30,  1.33s/it] 31%|█████████████▍                             | 10/32 [00:13<00:29,  1.36s/it] 34%|██████████████▊                            | 11/32 [00:14<00:28,  1.35s/it] 38%|████████████████▏                          | 12/32 [00:16<00:26,  1.34s/it] 41%|█████████████████▍                         | 13/32 [00:17<00:26,  1.37s/it] 44%|██████████████████▊                        | 14/32 [00:18<00:24,  1.36s/it] 47%|████████████████████▏                      | 15/32 [00:20<00:22,  1.35s/it] 50%|█████████████████████▌                     | 16/32 [00:21<00:21,  1.35s/it] 53%|██████████████████████▊                    | 17/32 [00:22<00:20,  1.34s/it] 56%|████████████████████████▏                  | 18/32 [00:24<00:18,  1.33s/it] 59%|█████████████████████████▌                 | 19/32 [00:25<00:17,  1.33s/it] 62%|██████████████████████████▉                | 20/32 [00:26<00:15,  1.33s/it] 66%|████████████████████████████▏              | 21/32 [00:28<00:14,  1.34s/it] 69%|█████████████████████████████▌             | 22/32 [00:29<00:13,  1.33s/it] 72%|██████████████████████████████▉            | 23/32 [00:30<00:11,  1.33s/it] 75%|████████████████████████████████▎          | 24/32 [00:32<00:10,  1.33s/it] 78%|█████████████████████████████████▌         | 25/32 [00:33<00:09,  1.33s/it] 81%|██████████████████████████████████▉        | 26/32 [00:34<00:07,  1.32s/it] 84%|████████████████████████████████████▎      | 27/32 [00:36<00:06,  1.32s/it] 88%|█████████████████████████████████████▋     | 28/32 [00:37<00:05,  1.32s/it] 91%|██████████████████████████████████████▉    | 29/32 [00:38<00:03,  1.33s/it] 94%|████████████████████████████████████████▎  | 30/32 [00:40<00:02,  1.33s/it] 97%|█████████████████████████████████████████▋ | 31/32 [00:41<00:01,  1.32s/it]100%|███████████████████████████████████████████| 32/32 [00:42<00:00,  1.32s/it]100%|███████████████████████████████████████████| 32/32 [00:42<00:00,  1.33s/it]
Consecutive layer pairs:  torch.Size([32, 822, 822])
 85%|██████████████████████████████████▉      | 69/81 [1:07:03<16:21, 81.81s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:00<00:18,  1.67it/s]  6%|██▊                                         | 2/32 [00:01<00:18,  1.64it/s]  9%|████▏                                       | 3/32 [00:01<00:17,  1.66it/s] 12%|█████▌                                      | 4/32 [00:02<00:16,  1.67it/s] 16%|██████▉                                     | 5/32 [00:02<00:16,  1.68it/s] 19%|████████▎                                   | 6/32 [00:03<00:15,  1.64it/s] 22%|█████████▋                                  | 7/32 [00:04<00:15,  1.65it/s] 25%|███████████                                 | 8/32 [00:04<00:14,  1.66it/s] 28%|████████████▍                               | 9/32 [00:05<00:13,  1.66it/s] 31%|█████████████▍                             | 10/32 [00:06<00:13,  1.67it/s] 34%|██████████████▊                            | 11/32 [00:06<00:12,  1.67it/s] 38%|████████████████▏                          | 12/32 [00:07<00:11,  1.68it/s] 41%|█████████████████▍                         | 13/32 [00:07<00:11,  1.69it/s] 44%|██████████████████▊                        | 14/32 [00:08<00:10,  1.67it/s] 47%|████████████████████▏                      | 15/32 [00:08<00:10,  1.68it/s] 50%|█████████████████████▌                     | 16/32 [00:09<00:09,  1.67it/s] 53%|██████████████████████▊                    | 17/32 [00:10<00:08,  1.67it/s] 56%|████████████████████████▏                  | 18/32 [00:10<00:08,  1.68it/s] 59%|█████████████████████████▌                 | 19/32 [00:11<00:07,  1.68it/s] 62%|██████████████████████████▉                | 20/32 [00:12<00:07,  1.64it/s] 66%|████████████████████████████▏              | 21/32 [00:12<00:06,  1.66it/s] 69%|█████████████████████████████▌             | 22/32 [00:13<00:05,  1.67it/s] 72%|██████████████████████████████▉            | 23/32 [00:13<00:05,  1.65it/s] 75%|████████████████████████████████▎          | 24/32 [00:14<00:04,  1.67it/s] 78%|█████████████████████████████████▌         | 25/32 [00:14<00:04,  1.68it/s] 81%|██████████████████████████████████▉        | 26/32 [00:15<00:03,  1.68it/s] 84%|████████████████████████████████████▎      | 27/32 [00:16<00:02,  1.69it/s] 88%|█████████████████████████████████████▋     | 28/32 [00:16<00:02,  1.69it/s] 91%|██████████████████████████████████████▉    | 29/32 [00:17<00:01,  1.67it/s] 94%|████████████████████████████████████████▎  | 30/32 [00:17<00:01,  1.67it/s] 97%|█████████████████████████████████████████▋ | 31/32 [00:18<00:00,  1.68it/s]100%|███████████████████████████████████████████| 32/32 [00:19<00:00,  1.68it/s]100%|███████████████████████████████████████████| 32/32 [00:19<00:00,  1.67it/s]
Consecutive layer pairs:  torch.Size([32, 622, 622])
 86%|███████████████████████████████████▍     | 70/81 [1:07:37<12:23, 67.55s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:00<00:18,  1.69it/s]  6%|██▊                                         | 2/32 [00:01<00:18,  1.65it/s]  9%|████▏                                       | 3/32 [00:01<00:17,  1.65it/s] 12%|█████▌                                      | 4/32 [00:02<00:16,  1.66it/s] 16%|██████▉                                     | 5/32 [00:03<00:16,  1.66it/s] 19%|████████▎                                   | 6/32 [00:03<00:15,  1.66it/s] 22%|█████████▋                                  | 7/32 [00:04<00:15,  1.66it/s] 25%|███████████                                 | 8/32 [00:04<00:14,  1.66it/s] 28%|████████████▍                               | 9/32 [00:05<00:13,  1.67it/s] 31%|█████████████▍                             | 10/32 [00:05<00:13,  1.67it/s] 34%|██████████████▊                            | 11/32 [00:06<00:12,  1.68it/s] 38%|████████████████▏                          | 12/32 [00:07<00:11,  1.68it/s] 41%|█████████████████▍                         | 13/32 [00:07<00:11,  1.68it/s] 44%|██████████████████▊                        | 14/32 [00:08<00:10,  1.69it/s] 47%|████████████████████▏                      | 15/32 [00:08<00:10,  1.68it/s] 50%|█████████████████████▌                     | 16/32 [00:09<00:09,  1.68it/s] 53%|██████████████████████▊                    | 17/32 [00:10<00:08,  1.69it/s] 56%|████████████████████████▏                  | 18/32 [00:10<00:08,  1.69it/s] 59%|█████████████████████████▌                 | 19/32 [00:11<00:07,  1.69it/s] 62%|██████████████████████████▉                | 20/32 [00:11<00:07,  1.69it/s] 66%|████████████████████████████▏              | 21/32 [00:12<00:06,  1.69it/s] 69%|█████████████████████████████▌             | 22/32 [00:13<00:06,  1.64it/s] 72%|██████████████████████████████▉            | 23/32 [00:13<00:05,  1.66it/s] 75%|████████████████████████████████▎          | 24/32 [00:14<00:04,  1.67it/s] 78%|█████████████████████████████████▌         | 25/32 [00:14<00:04,  1.67it/s] 81%|██████████████████████████████████▉        | 26/32 [00:15<00:03,  1.68it/s] 84%|████████████████████████████████████▎      | 27/32 [00:16<00:02,  1.69it/s] 88%|█████████████████████████████████████▋     | 28/32 [00:16<00:02,  1.68it/s] 91%|██████████████████████████████████████▉    | 29/32 [00:17<00:01,  1.69it/s] 94%|████████████████████████████████████████▎  | 30/32 [00:17<00:01,  1.69it/s] 97%|█████████████████████████████████████████▋ | 31/32 [00:18<00:00,  1.67it/s]100%|███████████████████████████████████████████| 32/32 [00:19<00:00,  1.68it/s]100%|███████████████████████████████████████████| 32/32 [00:19<00:00,  1.68it/s]
Consecutive layer pairs:  torch.Size([32, 622, 622])
 88%|███████████████████████████████████▉     | 71/81 [1:08:09<09:28, 56.83s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:00<00:18,  1.69it/s]  6%|██▊                                         | 2/32 [00:01<00:17,  1.70it/s]  9%|████▏                                       | 3/32 [00:01<00:17,  1.71it/s] 12%|█████▌                                      | 4/32 [00:02<00:16,  1.71it/s] 16%|██████▉                                     | 5/32 [00:02<00:15,  1.71it/s] 19%|████████▎                                   | 6/32 [00:03<00:15,  1.70it/s] 22%|█████████▋                                  | 7/32 [00:04<00:14,  1.70it/s] 25%|███████████                                 | 8/32 [00:04<00:14,  1.70it/s] 28%|████████████▍                               | 9/32 [00:05<00:13,  1.70it/s] 31%|█████████████▍                             | 10/32 [00:05<00:12,  1.71it/s] 34%|██████████████▊                            | 11/32 [00:06<00:12,  1.70it/s] 38%|████████████████▏                          | 12/32 [00:07<00:11,  1.71it/s] 41%|█████████████████▍                         | 13/32 [00:07<00:11,  1.71it/s] 44%|██████████████████▊                        | 14/32 [00:08<00:10,  1.71it/s] 47%|████████████████████▏                      | 15/32 [00:08<00:10,  1.68it/s] 50%|█████████████████████▌                     | 16/32 [00:09<00:09,  1.68it/s] 53%|██████████████████████▊                    | 17/32 [00:10<00:08,  1.69it/s] 56%|████████████████████████▏                  | 18/32 [00:10<00:08,  1.70it/s] 59%|█████████████████████████▌                 | 19/32 [00:11<00:07,  1.69it/s] 62%|██████████████████████████▉                | 20/32 [00:11<00:07,  1.70it/s] 66%|████████████████████████████▏              | 21/32 [00:12<00:06,  1.70it/s] 69%|█████████████████████████████▌             | 22/32 [00:12<00:05,  1.71it/s] 72%|██████████████████████████████▉            | 23/32 [00:13<00:05,  1.71it/s] 75%|████████████████████████████████▎          | 24/32 [00:14<00:04,  1.71it/s] 78%|█████████████████████████████████▌         | 25/32 [00:14<00:04,  1.70it/s] 81%|██████████████████████████████████▉        | 26/32 [00:15<00:03,  1.68it/s] 84%|████████████████████████████████████▎      | 27/32 [00:15<00:02,  1.69it/s] 88%|█████████████████████████████████████▋     | 28/32 [00:16<00:02,  1.69it/s] 91%|██████████████████████████████████████▉    | 29/32 [00:17<00:01,  1.69it/s] 94%|████████████████████████████████████████▎  | 30/32 [00:17<00:01,  1.69it/s] 97%|█████████████████████████████████████████▋ | 31/32 [00:18<00:00,  1.69it/s]100%|███████████████████████████████████████████| 32/32 [00:18<00:00,  1.69it/s]100%|███████████████████████████████████████████| 32/32 [00:18<00:00,  1.70it/s]
Consecutive layer pairs:  torch.Size([32, 622, 622])
 89%|████████████████████████████████████▍    | 72/81 [1:08:44<07:33, 50.39s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:01<00:35,  1.16s/it]  6%|██▊                                         | 2/32 [00:02<00:35,  1.18s/it]  9%|████▏                                       | 3/32 [00:03<00:33,  1.17s/it] 12%|█████▌                                      | 4/32 [00:04<00:32,  1.17s/it] 16%|██████▉                                     | 5/32 [00:05<00:31,  1.17s/it] 19%|████████▎                                   | 6/32 [00:07<00:30,  1.17s/it] 22%|█████████▋                                  | 7/32 [00:08<00:29,  1.17s/it] 25%|███████████                                 | 8/32 [00:09<00:28,  1.17s/it] 28%|████████████▍                               | 9/32 [00:10<00:27,  1.18s/it] 31%|█████████████▍                             | 10/32 [00:11<00:26,  1.21s/it] 34%|██████████████▊                            | 11/32 [00:13<00:25,  1.20s/it] 38%|████████████████▏                          | 12/32 [00:14<00:23,  1.19s/it] 41%|█████████████████▍                         | 13/32 [00:15<00:22,  1.18s/it] 44%|██████████████████▊                        | 14/32 [00:16<00:21,  1.19s/it] 47%|████████████████████▏                      | 15/32 [00:17<00:20,  1.19s/it] 50%|█████████████████████▌                     | 16/32 [00:18<00:19,  1.19s/it] 53%|██████████████████████▊                    | 17/32 [00:20<00:17,  1.18s/it] 56%|████████████████████████▏                  | 18/32 [00:21<00:17,  1.22s/it] 59%|█████████████████████████▌                 | 19/32 [00:22<00:15,  1.20s/it] 62%|██████████████████████████▉                | 20/32 [00:23<00:14,  1.19s/it] 66%|████████████████████████████▏              | 21/32 [00:24<00:13,  1.18s/it] 69%|█████████████████████████████▌             | 22/32 [00:26<00:11,  1.18s/it] 72%|██████████████████████████████▉            | 23/32 [00:27<00:10,  1.18s/it] 75%|████████████████████████████████▎          | 24/32 [00:28<00:09,  1.19s/it] 78%|█████████████████████████████████▌         | 25/32 [00:29<00:08,  1.19s/it] 81%|██████████████████████████████████▉        | 26/32 [00:30<00:07,  1.19s/it] 84%|████████████████████████████████████▎      | 27/32 [00:32<00:05,  1.19s/it] 88%|█████████████████████████████████████▋     | 28/32 [00:33<00:04,  1.18s/it] 91%|██████████████████████████████████████▉    | 29/32 [00:34<00:03,  1.18s/it] 94%|████████████████████████████████████████▎  | 30/32 [00:35<00:02,  1.18s/it] 97%|█████████████████████████████████████████▋ | 31/32 [00:36<00:01,  1.20s/it]100%|███████████████████████████████████████████| 32/32 [00:37<00:00,  1.19s/it]100%|███████████████████████████████████████████| 32/32 [00:37<00:00,  1.19s/it]
Consecutive layer pairs:  torch.Size([32, 789, 789])
 90%|████████████████████████████████████▉    | 73/81 [1:09:44<07:06, 53.34s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:01<00:36,  1.16s/it]  6%|██▊                                         | 2/32 [00:02<00:35,  1.17s/it]  9%|████▏                                       | 3/32 [00:03<00:34,  1.17s/it] 12%|█████▌                                      | 4/32 [00:04<00:34,  1.23s/it] 16%|██████▉                                     | 5/32 [00:06<00:32,  1.21s/it] 19%|████████▎                                   | 6/32 [00:07<00:31,  1.20s/it] 22%|█████████▋                                  | 7/32 [00:08<00:30,  1.22s/it] 25%|███████████                                 | 8/32 [00:09<00:29,  1.21s/it] 28%|████████████▍                               | 9/32 [00:10<00:27,  1.20s/it] 31%|█████████████▍                             | 10/32 [00:12<00:26,  1.20s/it] 34%|██████████████▊                            | 11/32 [00:13<00:25,  1.20s/it] 38%|████████████████▏                          | 12/32 [00:14<00:24,  1.23s/it] 41%|█████████████████▍                         | 13/32 [00:15<00:23,  1.21s/it] 44%|██████████████████▊                        | 14/32 [00:16<00:21,  1.20s/it] 47%|████████████████████▏                      | 15/32 [00:18<00:20,  1.21s/it] 50%|█████████████████████▌                     | 16/32 [00:19<00:19,  1.21s/it] 53%|██████████████████████▊                    | 17/32 [00:20<00:17,  1.20s/it] 56%|████████████████████████▏                  | 18/32 [00:21<00:16,  1.19s/it] 59%|█████████████████████████▌                 | 19/32 [00:22<00:15,  1.18s/it] 62%|██████████████████████████▉                | 20/32 [00:23<00:14,  1.18s/it] 66%|████████████████████████████▏              | 21/32 [00:25<00:12,  1.18s/it] 69%|█████████████████████████████▌             | 22/32 [00:26<00:11,  1.19s/it] 72%|██████████████████████████████▉            | 23/32 [00:27<00:10,  1.20s/it] 75%|████████████████████████████████▎          | 24/32 [00:28<00:09,  1.19s/it] 78%|█████████████████████████████████▌         | 25/32 [00:29<00:08,  1.19s/it] 81%|██████████████████████████████████▉        | 26/32 [00:31<00:07,  1.18s/it] 84%|████████████████████████████████████▎      | 27/32 [00:32<00:05,  1.18s/it] 88%|█████████████████████████████████████▋     | 28/32 [00:33<00:04,  1.18s/it] 91%|██████████████████████████████████████▉    | 29/32 [00:34<00:03,  1.18s/it] 94%|████████████████████████████████████████▎  | 30/32 [00:35<00:02,  1.18s/it] 97%|█████████████████████████████████████████▋ | 31/32 [00:37<00:01,  1.19s/it]100%|███████████████████████████████████████████| 32/32 [00:38<00:00,  1.18s/it]100%|███████████████████████████████████████████| 32/32 [00:38<00:00,  1.19s/it]
Consecutive layer pairs:  torch.Size([32, 789, 789])
 91%|█████████████████████████████████████▍   | 74/81 [1:10:45<06:29, 55.62s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:01<00:36,  1.19s/it]  6%|██▊                                         | 2/32 [00:02<00:35,  1.19s/it]  9%|████▏                                       | 3/32 [00:03<00:34,  1.19s/it] 12%|█████▌                                      | 4/32 [00:04<00:33,  1.19s/it] 16%|██████▉                                     | 5/32 [00:05<00:32,  1.19s/it] 19%|████████▎                                   | 6/32 [00:07<00:30,  1.18s/it] 22%|█████████▋                                  | 7/32 [00:08<00:30,  1.22s/it] 25%|███████████                                 | 8/32 [00:09<00:29,  1.23s/it] 28%|████████████▍                               | 9/32 [00:10<00:27,  1.22s/it] 31%|█████████████▍                             | 10/32 [00:12<00:26,  1.20s/it] 34%|██████████████▊                            | 11/32 [00:13<00:25,  1.20s/it] 38%|████████████████▏                          | 12/32 [00:14<00:23,  1.19s/it] 41%|█████████████████▍                         | 13/32 [00:15<00:22,  1.19s/it] 44%|██████████████████▊                        | 14/32 [00:16<00:21,  1.19s/it] 47%|████████████████████▏                      | 15/32 [00:17<00:20,  1.18s/it] 50%|█████████████████████▌                     | 16/32 [00:19<00:18,  1.18s/it] 53%|██████████████████████▊                    | 17/32 [00:20<00:17,  1.18s/it] 56%|████████████████████████▏                  | 18/32 [00:21<00:16,  1.19s/it] 59%|█████████████████████████▌                 | 19/32 [00:22<00:15,  1.21s/it] 62%|██████████████████████████▉                | 20/32 [00:23<00:14,  1.20s/it] 66%|████████████████████████████▏              | 21/32 [00:25<00:13,  1.21s/it] 69%|█████████████████████████████▌             | 22/32 [00:26<00:12,  1.20s/it] 72%|██████████████████████████████▉            | 23/32 [00:27<00:10,  1.21s/it] 75%|████████████████████████████████▎          | 24/32 [00:28<00:09,  1.20s/it] 78%|█████████████████████████████████▌         | 25/32 [00:29<00:08,  1.20s/it] 81%|██████████████████████████████████▉        | 26/32 [00:31<00:07,  1.20s/it] 84%|████████████████████████████████████▎      | 27/32 [00:32<00:06,  1.20s/it] 88%|█████████████████████████████████████▋     | 28/32 [00:33<00:04,  1.19s/it] 91%|██████████████████████████████████████▉    | 29/32 [00:34<00:03,  1.19s/it] 94%|████████████████████████████████████████▎  | 30/32 [00:35<00:02,  1.19s/it] 97%|█████████████████████████████████████████▋ | 31/32 [00:37<00:01,  1.18s/it]100%|███████████████████████████████████████████| 32/32 [00:38<00:00,  1.18s/it]100%|███████████████████████████████████████████| 32/32 [00:38<00:00,  1.20s/it]
Consecutive layer pairs:  torch.Size([32, 789, 789])
 93%|█████████████████████████████████████▉   | 75/81 [1:11:49<05:48, 58.15s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:00<00:28,  1.07it/s]  6%|██▊                                         | 2/32 [00:01<00:27,  1.07it/s]  9%|████▏                                       | 3/32 [00:02<00:26,  1.08it/s] 12%|█████▌                                      | 4/32 [00:03<00:26,  1.07it/s] 16%|██████▉                                     | 5/32 [00:04<00:25,  1.07it/s] 19%|████████▎                                   | 6/32 [00:05<00:24,  1.07it/s] 22%|█████████▋                                  | 7/32 [00:06<00:23,  1.07it/s] 25%|███████████                                 | 8/32 [00:07<00:22,  1.07it/s] 28%|████████████▍                               | 9/32 [00:08<00:21,  1.07it/s] 31%|█████████████▍                             | 10/32 [00:09<00:21,  1.02it/s] 34%|██████████████▊                            | 11/32 [00:10<00:20,  1.02it/s] 38%|████████████████▏                          | 12/32 [00:11<00:19,  1.03it/s] 41%|█████████████████▍                         | 13/32 [00:12<00:18,  1.04it/s] 44%|██████████████████▊                        | 14/32 [00:13<00:17,  1.04it/s] 47%|████████████████████▏                      | 15/32 [00:14<00:16,  1.03it/s] 50%|█████████████████████▌                     | 16/32 [00:15<00:15,  1.04it/s] 53%|██████████████████████▊                    | 17/32 [00:16<00:14,  1.05it/s] 56%|████████████████████████▏                  | 18/32 [00:17<00:13,  1.06it/s] 59%|█████████████████████████▌                 | 19/32 [00:18<00:12,  1.06it/s] 62%|██████████████████████████▉                | 20/32 [00:18<00:11,  1.07it/s] 66%|████████████████████████████▏              | 21/32 [00:19<00:10,  1.07it/s] 69%|█████████████████████████████▌             | 22/32 [00:20<00:09,  1.07it/s] 72%|██████████████████████████████▉            | 23/32 [00:21<00:08,  1.07it/s] 75%|████████████████████████████████▎          | 24/32 [00:22<00:07,  1.07it/s] 78%|█████████████████████████████████▌         | 25/32 [00:23<00:06,  1.07it/s] 81%|██████████████████████████████████▉        | 26/32 [00:24<00:05,  1.07it/s] 84%|████████████████████████████████████▎      | 27/32 [00:25<00:04,  1.06it/s] 88%|█████████████████████████████████████▋     | 28/32 [00:26<00:03,  1.03it/s] 91%|██████████████████████████████████████▉    | 29/32 [00:27<00:03,  1.00s/it] 94%|████████████████████████████████████████▎  | 30/32 [00:28<00:01,  1.01it/s] 97%|█████████████████████████████████████████▋ | 31/32 [00:29<00:00,  1.03it/s]100%|███████████████████████████████████████████| 32/32 [00:30<00:00,  1.03it/s]100%|███████████████████████████████████████████| 32/32 [00:30<00:00,  1.05it/s]
Consecutive layer pairs:  torch.Size([32, 730, 730])
 94%|██████████████████████████████████████▍  | 76/81 [1:13:36<06:04, 72.85s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:00<00:28,  1.09it/s]  6%|██▊                                         | 2/32 [00:01<00:27,  1.08it/s]  9%|████▏                                       | 3/32 [00:02<00:26,  1.08it/s] 12%|█████▌                                      | 4/32 [00:03<00:25,  1.09it/s] 16%|██████▉                                     | 5/32 [00:04<00:24,  1.09it/s] 19%|████████▎                                   | 6/32 [00:05<00:23,  1.09it/s] 22%|█████████▋                                  | 7/32 [00:06<00:22,  1.09it/s] 25%|███████████                                 | 8/32 [00:07<00:22,  1.09it/s] 28%|████████████▍                               | 9/32 [00:08<00:21,  1.09it/s] 31%|█████████████▍                             | 10/32 [00:09<00:20,  1.09it/s] 34%|██████████████▊                            | 11/32 [00:10<00:19,  1.09it/s] 38%|████████████████▏                          | 12/32 [00:11<00:18,  1.08it/s] 41%|█████████████████▍                         | 13/32 [00:11<00:17,  1.09it/s] 44%|██████████████████▊                        | 14/32 [00:12<00:16,  1.09it/s] 47%|████████████████████▏                      | 15/32 [00:13<00:15,  1.09it/s] 50%|█████████████████████▌                     | 16/32 [00:14<00:14,  1.09it/s] 53%|██████████████████████▊                    | 17/32 [00:15<00:13,  1.08it/s] 56%|████████████████████████▏                  | 18/32 [00:16<00:13,  1.04it/s] 59%|█████████████████████████▌                 | 19/32 [00:17<00:12,  1.03it/s] 62%|██████████████████████████▉                | 20/32 [00:18<00:11,  1.05it/s] 66%|████████████████████████████▏              | 21/32 [00:19<00:10,  1.06it/s] 69%|█████████████████████████████▌             | 22/32 [00:20<00:09,  1.07it/s] 72%|██████████████████████████████▉            | 23/32 [00:21<00:08,  1.07it/s] 75%|████████████████████████████████▎          | 24/32 [00:22<00:07,  1.08it/s] 78%|█████████████████████████████████▌         | 25/32 [00:23<00:06,  1.08it/s] 81%|██████████████████████████████████▉        | 26/32 [00:24<00:05,  1.09it/s] 84%|████████████████████████████████████▎      | 27/32 [00:25<00:04,  1.08it/s] 88%|█████████████████████████████████████▋     | 28/32 [00:25<00:03,  1.06it/s] 91%|██████████████████████████████████████▉    | 29/32 [00:26<00:02,  1.07it/s] 94%|████████████████████████████████████████▎  | 30/32 [00:27<00:01,  1.07it/s] 97%|█████████████████████████████████████████▋ | 31/32 [00:28<00:00,  1.07it/s]100%|███████████████████████████████████████████| 32/32 [00:29<00:00,  1.07it/s]100%|███████████████████████████████████████████| 32/32 [00:29<00:00,  1.08it/s]
Consecutive layer pairs:  torch.Size([32, 726, 726])
 95%|██████████████████████████████████████▉  | 77/81 [1:14:23<04:19, 64.91s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:00<00:29,  1.07it/s]  6%|██▊                                         | 2/32 [00:01<00:28,  1.07it/s]  9%|████▏                                       | 3/32 [00:02<00:27,  1.07it/s] 12%|█████▌                                      | 4/32 [00:03<00:26,  1.07it/s] 16%|██████▉                                     | 5/32 [00:04<00:25,  1.06it/s] 19%|████████▎                                   | 6/32 [00:05<00:24,  1.07it/s] 22%|█████████▋                                  | 7/32 [00:06<00:23,  1.07it/s] 25%|███████████                                 | 8/32 [00:07<00:22,  1.08it/s] 28%|████████████▍                               | 9/32 [00:08<00:21,  1.08it/s] 31%|█████████████▍                             | 10/32 [00:09<00:20,  1.08it/s] 34%|██████████████▊                            | 11/32 [00:10<00:19,  1.07it/s] 38%|████████████████▏                          | 12/32 [00:11<00:18,  1.08it/s] 41%|█████████████████▍                         | 13/32 [00:12<00:17,  1.08it/s] 44%|██████████████████▊                        | 14/32 [00:13<00:16,  1.08it/s] 47%|████████████████████▏                      | 15/32 [00:14<00:16,  1.05it/s] 50%|█████████████████████▌                     | 16/32 [00:15<00:15,  1.02it/s] 53%|██████████████████████▊                    | 17/32 [00:16<00:14,  1.02it/s] 56%|████████████████████████▏                  | 18/32 [00:17<00:13,  1.04it/s] 59%|█████████████████████████▌                 | 19/32 [00:17<00:12,  1.05it/s] 62%|██████████████████████████▉                | 20/32 [00:18<00:11,  1.06it/s] 66%|████████████████████████████▏              | 21/32 [00:19<00:10,  1.07it/s] 69%|█████████████████████████████▌             | 22/32 [00:20<00:09,  1.07it/s] 72%|██████████████████████████████▉            | 23/32 [00:21<00:08,  1.07it/s] 75%|████████████████████████████████▎          | 24/32 [00:22<00:07,  1.06it/s] 78%|█████████████████████████████████▌         | 25/32 [00:23<00:06,  1.06it/s] 81%|██████████████████████████████████▉        | 26/32 [00:24<00:05,  1.05it/s] 84%|████████████████████████████████████▎      | 27/32 [00:25<00:04,  1.06it/s] 88%|█████████████████████████████████████▋     | 28/32 [00:26<00:03,  1.05it/s] 91%|██████████████████████████████████████▉    | 29/32 [00:27<00:02,  1.06it/s] 94%|████████████████████████████████████████▎  | 30/32 [00:28<00:01,  1.07it/s] 97%|█████████████████████████████████████████▋ | 31/32 [00:29<00:00,  1.07it/s]100%|███████████████████████████████████████████| 32/32 [00:30<00:00,  1.07it/s]100%|███████████████████████████████████████████| 32/32 [00:30<00:00,  1.06it/s]
Consecutive layer pairs:  torch.Size([32, 732, 732])
 96%|███████████████████████████████████████▍ | 78/81 [1:15:13<03:01, 60.46s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:00<00:17,  1.74it/s]  6%|██▊                                         | 2/32 [00:01<00:17,  1.73it/s]  9%|████▏                                       | 3/32 [00:01<00:16,  1.73it/s] 12%|█████▌                                      | 4/32 [00:02<00:16,  1.72it/s] 16%|██████▉                                     | 5/32 [00:02<00:16,  1.68it/s] 19%|████████▎                                   | 6/32 [00:03<00:15,  1.70it/s] 22%|█████████▋                                  | 7/32 [00:04<00:15,  1.65it/s] 25%|███████████                                 | 8/32 [00:04<00:14,  1.67it/s] 28%|████████████▍                               | 9/32 [00:05<00:13,  1.68it/s] 31%|█████████████▍                             | 10/32 [00:05<00:13,  1.69it/s] 34%|██████████████▊                            | 11/32 [00:06<00:12,  1.70it/s] 38%|████████████████▏                          | 12/32 [00:07<00:11,  1.70it/s] 41%|█████████████████▍                         | 13/32 [00:07<00:11,  1.70it/s] 44%|██████████████████▊                        | 14/32 [00:08<00:10,  1.69it/s] 47%|████████████████████▏                      | 15/32 [00:08<00:10,  1.69it/s] 50%|█████████████████████▌                     | 16/32 [00:09<00:09,  1.70it/s] 53%|██████████████████████▊                    | 17/32 [00:10<00:08,  1.70it/s] 56%|████████████████████████▏                  | 18/32 [00:10<00:08,  1.69it/s] 59%|█████████████████████████▌                 | 19/32 [00:11<00:07,  1.70it/s] 62%|██████████████████████████▉                | 20/32 [00:11<00:07,  1.68it/s] 66%|████████████████████████████▏              | 21/32 [00:12<00:06,  1.69it/s] 69%|█████████████████████████████▌             | 22/32 [00:12<00:05,  1.70it/s] 72%|██████████████████████████████▉            | 23/32 [00:13<00:05,  1.71it/s] 75%|████████████████████████████████▎          | 24/32 [00:14<00:04,  1.71it/s] 78%|█████████████████████████████████▌         | 25/32 [00:14<00:04,  1.72it/s] 81%|██████████████████████████████████▉        | 26/32 [00:15<00:03,  1.69it/s] 84%|████████████████████████████████████▎      | 27/32 [00:15<00:02,  1.69it/s] 88%|█████████████████████████████████████▋     | 28/32 [00:16<00:02,  1.69it/s] 91%|██████████████████████████████████████▉    | 29/32 [00:17<00:01,  1.69it/s] 94%|████████████████████████████████████████▎  | 30/32 [00:17<00:01,  1.69it/s] 97%|█████████████████████████████████████████▋ | 31/32 [00:18<00:00,  1.70it/s]100%|███████████████████████████████████████████| 32/32 [00:18<00:00,  1.65it/s]100%|███████████████████████████████████████████| 32/32 [00:18<00:00,  1.69it/s]
Consecutive layer pairs:  torch.Size([32, 617, 617])
 98%|███████████████████████████████████████▉ | 79/81 [1:15:47<01:45, 52.54s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:00<00:18,  1.72it/s]  6%|██▊                                         | 2/32 [00:01<00:17,  1.69it/s]  9%|████▏                                       | 3/32 [00:01<00:17,  1.70it/s] 12%|█████▌                                      | 4/32 [00:02<00:16,  1.71it/s] 16%|██████▉                                     | 5/32 [00:02<00:15,  1.72it/s] 19%|████████▎                                   | 6/32 [00:03<00:15,  1.72it/s] 22%|█████████▋                                  | 7/32 [00:04<00:14,  1.72it/s] 25%|███████████                                 | 8/32 [00:04<00:13,  1.72it/s] 28%|████████████▍                               | 9/32 [00:05<00:13,  1.72it/s] 31%|█████████████▍                             | 10/32 [00:05<00:12,  1.70it/s] 34%|██████████████▊                            | 11/32 [00:06<00:12,  1.70it/s] 38%|████████████████▏                          | 12/32 [00:07<00:11,  1.71it/s] 41%|█████████████████▍                         | 13/32 [00:07<00:11,  1.69it/s] 44%|██████████████████▊                        | 14/32 [00:08<00:10,  1.69it/s] 47%|████████████████████▏                      | 15/32 [00:08<00:10,  1.69it/s] 50%|█████████████████████▌                     | 16/32 [00:09<00:09,  1.70it/s] 53%|██████████████████████▊                    | 17/32 [00:10<00:09,  1.65it/s] 56%|████████████████████████▏                  | 18/32 [00:10<00:08,  1.67it/s] 59%|█████████████████████████▌                 | 19/32 [00:11<00:08,  1.59it/s] 62%|██████████████████████████▉                | 20/32 [00:11<00:07,  1.59it/s] 66%|████████████████████████████▏              | 21/32 [00:12<00:06,  1.63it/s] 69%|█████████████████████████████▌             | 22/32 [00:13<00:06,  1.65it/s] 72%|██████████████████████████████▉            | 23/32 [00:13<00:05,  1.67it/s] 75%|████████████████████████████████▎          | 24/32 [00:14<00:05,  1.58it/s] 78%|█████████████████████████████████▌         | 25/32 [00:15<00:04,  1.55it/s] 81%|██████████████████████████████████▉        | 26/32 [00:15<00:03,  1.59it/s] 84%|████████████████████████████████████▎      | 27/32 [00:16<00:03,  1.63it/s] 88%|█████████████████████████████████████▋     | 28/32 [00:16<00:02,  1.65it/s] 91%|██████████████████████████████████████▉    | 29/32 [00:17<00:01,  1.67it/s] 94%|████████████████████████████████████████▎  | 30/32 [00:18<00:01,  1.68it/s] 97%|█████████████████████████████████████████▋ | 31/32 [00:18<00:00,  1.66it/s]100%|███████████████████████████████████████████| 32/32 [00:19<00:00,  1.66it/s]100%|███████████████████████████████████████████| 32/32 [00:19<00:00,  1.66it/s]
Consecutive layer pairs:  torch.Size([32, 617, 617])
 99%|████████████████████████████████████████▍| 80/81 [1:16:19<00:46, 46.44s/it]  0%|                                                    | 0/32 [00:00<?, ?it/s]  3%|█▍                                          | 1/32 [00:00<00:18,  1.72it/s]  6%|██▊                                         | 2/32 [00:01<00:17,  1.71it/s]  9%|████▏                                       | 3/32 [00:01<00:16,  1.71it/s] 12%|█████▌                                      | 4/32 [00:02<00:16,  1.70it/s] 16%|██████▉                                     | 5/32 [00:02<00:15,  1.70it/s] 19%|████████▎                                   | 6/32 [00:03<00:15,  1.69it/s] 22%|█████████▋                                  | 7/32 [00:04<00:14,  1.70it/s] 25%|███████████                                 | 8/32 [00:04<00:14,  1.65it/s] 28%|████████████▍                               | 9/32 [00:05<00:13,  1.67it/s] 31%|█████████████▍                             | 10/32 [00:05<00:13,  1.66it/s] 34%|██████████████▊                            | 11/32 [00:06<00:12,  1.68it/s] 38%|████████████████▏                          | 12/32 [00:07<00:11,  1.69it/s] 41%|█████████████████▍                         | 13/32 [00:07<00:11,  1.69it/s] 44%|██████████████████▊                        | 14/32 [00:08<00:10,  1.68it/s] 47%|████████████████████▏                      | 15/32 [00:08<00:10,  1.69it/s] 50%|█████████████████████▌                     | 16/32 [00:09<00:09,  1.68it/s] 53%|██████████████████████▊                    | 17/32 [00:10<00:09,  1.66it/s] 56%|████████████████████████▏                  | 18/32 [00:10<00:08,  1.59it/s] 59%|█████████████████████████▌                 | 19/32 [00:11<00:08,  1.62it/s] 62%|██████████████████████████▉                | 20/32 [00:11<00:07,  1.64it/s] 66%|████████████████████████████▏              | 21/32 [00:12<00:06,  1.66it/s] 69%|█████████████████████████████▌             | 22/32 [00:13<00:05,  1.67it/s] 72%|██████████████████████████████▉            | 23/32 [00:13<00:05,  1.64it/s] 75%|████████████████████████████████▎          | 24/32 [00:14<00:04,  1.66it/s] 78%|█████████████████████████████████▌         | 25/32 [00:15<00:04,  1.63it/s] 81%|██████████████████████████████████▉        | 26/32 [00:15<00:03,  1.62it/s] 84%|████████████████████████████████████▎      | 27/32 [00:16<00:03,  1.65it/s] 88%|█████████████████████████████████████▋     | 28/32 [00:16<00:02,  1.66it/s] 91%|██████████████████████████████████████▉    | 29/32 [00:17<00:01,  1.67it/s] 94%|████████████████████████████████████████▎  | 30/32 [00:18<00:01,  1.63it/s] 97%|█████████████████████████████████████████▋ | 31/32 [00:18<00:00,  1.64it/s]100%|███████████████████████████████████████████| 32/32 [00:19<00:00,  1.66it/s]100%|███████████████████████████████████████████| 32/32 [00:19<00:00,  1.66it/s]
Consecutive layer pairs:  torch.Size([32, 617, 617])
100%|█████████████████████████████████████████| 81/81 [1:16:55<00:00, 43.37s/it]100%|█████████████████████████████████████████| 81/81 [1:16:55<00:00, 56.99s/it]
n of data transformed:  81
Processing analysis pass: naive_max
Found 135 files to process.
Found 54 files already processed. Skippign them.
Removing Nqueens_Q1.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Processing 81 files.
Starting to derive attention for 81 files...
Args: [('multithread_Q1.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('multithread_Q1.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('multithread_Q1.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('multithread_Q1.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('multithread_Q1.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('multithread_Q1.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('multithread_Q1.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('multithread_Q1.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('multithread_Q1.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('multithread_Q2.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('multithread_Q2.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('multithread_Q2.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('multithread_Q2.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('multithread_Q2.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('multithread_Q2.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('multithread_Q2.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('multithread_Q2.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('multithread_Q2.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('multithread_Q3.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('multithread_Q3.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('multithread_Q3.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('multithread_Q3.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('multithread_Q3.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('multithread_Q3.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('multithread_Q3.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('multithread_Q3.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('multithread_Q3.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('tree_Q1.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('tree_Q1.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('tree_Q1.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('tree_Q1.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('tree_Q1.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('tree_Q1.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('tree_Q1.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('tree_Q1.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('tree_Q1.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('tree_Q2.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('tree_Q2.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('tree_Q2.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('tree_Q2.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('tree_Q2.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('tree_Q2.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('tree_Q2.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('tree_Q2.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('tree_Q2.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('tree_Q3.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('tree_Q3.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('tree_Q3.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('tree_Q3.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('tree_Q3.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('tree_Q3.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('tree_Q3.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('tree_Q3.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('tree_Q3.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('triangle_Q1.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('triangle_Q1.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('triangle_Q1.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('triangle_Q1.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('triangle_Q1.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('triangle_Q1.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('triangle_Q1.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('triangle_Q1.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('triangle_Q1.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('triangle_Q2.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('triangle_Q2.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('triangle_Q2.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('triangle_Q2.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('triangle_Q2.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('triangle_Q2.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('triangle_Q2.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('triangle_Q2.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('triangle_Q2.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('triangle_Q3.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('triangle_Q3.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('triangle_Q3.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('triangle_Q3.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('triangle_Q3.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('triangle_Q3.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('triangle_Q3.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('triangle_Q3.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>), ('triangle_Q3.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max', {}, <function compute_naive_max_aggregation at 0x7ff996674430>)]
  0%|                                                    | 0/81 [00:00<?, ?it/s]  1%|▌                                           | 1/81 [00:24<32:34, 24.43s/it]  2%|█                                           | 2/81 [01:03<43:17, 32.88s/it]  4%|█▌                                        | 3/81 [02:26<1:12:28, 55.74s/it]  5%|██▏                                         | 4/81 [02:53<56:59, 44.41s/it]  6%|██▋                                         | 5/81 [03:22<49:19, 38.95s/it]  7%|███▎                                        | 6/81 [03:49<43:40, 34.94s/it]  9%|███▊                                        | 7/81 [04:10<37:35, 30.48s/it] 10%|████▎                                       | 8/81 [04:44<38:26, 31.60s/it] 11%|████▉                                       | 9/81 [05:10<35:49, 29.85s/it] 12%|█████▎                                     | 10/81 [05:40<35:12, 29.75s/it] 14%|█████▊                                     | 11/81 [06:08<34:00, 29.15s/it] 15%|██████▎                                    | 12/81 [06:40<34:39, 30.14s/it] 16%|██████▉                                    | 13/81 [07:08<33:29, 29.55s/it] 17%|███████▍                                   | 14/81 [07:35<32:07, 28.76s/it] 19%|███████▉                                   | 15/81 [08:24<38:12, 34.74s/it] 20%|████████▍                                  | 16/81 [08:48<34:10, 31.55s/it] 21%|█████████                                  | 17/81 [09:18<33:06, 31.03s/it] 22%|█████████▌                                 | 18/81 [09:48<32:27, 30.91s/it] 23%|██████████                                 | 19/81 [10:23<33:09, 32.09s/it] 25%|██████████▌                                | 20/81 [11:01<34:28, 33.92s/it] 26%|███████████▏                               | 21/81 [11:34<33:21, 33.36s/it] 27%|███████████▋                               | 22/81 [12:05<32:07, 32.67s/it] 28%|████████████▏                              | 23/81 [12:30<29:22, 30.38s/it] 30%|████████████▋                              | 24/81 [13:01<29:11, 30.72s/it] 31%|█████████████▎                             | 25/81 [13:33<28:58, 31.05s/it] 32%|█████████████▊                             | 26/81 [13:58<26:50, 29.27s/it] 33%|██████████████▎                            | 27/81 [14:26<25:56, 28.82s/it] 35%|██████████████▊                            | 28/81 [14:48<23:45, 26.89s/it] 36%|███████████████▍                           | 29/81 [15:07<21:14, 24.51s/it] 37%|███████████████▉                           | 30/81 [15:25<19:08, 22.51s/it] 38%|████████████████▍                          | 31/81 [15:42<17:14, 20.70s/it] 40%|████████████████▉                          | 32/81 [16:01<16:38, 20.38s/it] 41%|█████████████████▌                         | 33/81 [16:28<17:46, 22.22s/it] 42%|██████████████████                         | 34/81 [16:41<15:21, 19.60s/it] 43%|██████████████████▌                        | 35/81 [16:53<13:15, 17.30s/it] 44%|███████████████████                        | 36/81 [17:05<11:45, 15.68s/it] 46%|███████████████████▋                       | 37/81 [17:27<12:59, 17.72s/it] 47%|████████████████████▏                      | 38/81 [17:45<12:33, 17.53s/it] 48%|████████████████████▋                      | 39/81 [18:03<12:33, 17.95s/it] 49%|█████████████████████▏                     | 40/81 [18:27<13:20, 19.53s/it] 51%|█████████████████████▊                     | 41/81 [18:42<12:13, 18.33s/it] 52%|██████████████████████▎                    | 42/81 [19:00<11:45, 18.08s/it] 53%|██████████████████████▊                    | 43/81 [19:20<11:54, 18.81s/it] 54%|███████████████████████▎                   | 44/81 [19:35<10:46, 17.46s/it] 56%|███████████████████████▉                   | 45/81 [19:46<09:18, 15.52s/it] 57%|████████████████████████▍                  | 46/81 [20:05<09:46, 16.75s/it] 58%|████████████████████████▉                  | 47/81 [20:35<11:45, 20.75s/it] 59%|█████████████████████████▍                 | 48/81 [20:55<11:18, 20.56s/it] 60%|██████████████████████████                 | 49/81 [21:20<11:36, 21.76s/it] 62%|██████████████████████████▌                | 50/81 [21:43<11:22, 22.03s/it] 63%|███████████████████████████                | 51/81 [22:08<11:32, 23.08s/it] 64%|███████████████████████████▌               | 52/81 [22:23<09:53, 20.47s/it] 65%|████████████████████████████▏              | 53/81 [22:37<08:39, 18.55s/it] 67%|████████████████████████████▋              | 54/81 [22:53<08:03, 17.91s/it] 68%|█████████████████████████████▏             | 55/81 [23:25<09:34, 22.11s/it] 69%|█████████████████████████████▋             | 56/81 [23:53<09:59, 24.00s/it] 70%|██████████████████████████████▎            | 57/81 [24:19<09:51, 24.63s/it] 72%|██████████████████████████████▊            | 58/81 [25:03<11:39, 30.40s/it] 73%|███████████████████████████████▎           | 59/81 [25:28<10:29, 28.62s/it] 74%|███████████████████████████████▊           | 60/81 [25:58<10:10, 29.07s/it] 75%|████████████████████████████████▍          | 61/81 [26:16<08:38, 25.91s/it] 77%|████████████████████████████████▉          | 62/81 [26:32<07:15, 22.93s/it] 78%|█████████████████████████████████▍         | 63/81 [26:53<06:42, 22.34s/it] 79%|█████████████████████████████████▉         | 64/81 [27:20<06:39, 23.51s/it] 80%|██████████████████████████████████▌        | 65/81 [27:53<07:05, 26.59s/it] 81%|███████████████████████████████████        | 66/81 [28:24<06:55, 27.73s/it] 83%|███████████████████████████████████▌       | 67/81 [28:51<06:27, 27.66s/it] 84%|████████████████████████████████████       | 68/81 [29:24<06:19, 29.16s/it] 85%|████████████████████████████████████▋      | 69/81 [29:56<06:00, 30.01s/it] 86%|█████████████████████████████████████▏     | 70/81 [30:09<04:35, 25.07s/it] 88%|█████████████████████████████████████▋     | 71/81 [30:25<03:43, 22.30s/it] 89%|██████████████████████████████████████▏    | 72/81 [30:42<03:06, 20.69s/it] 90%|██████████████████████████████████████▊    | 73/81 [31:12<03:07, 23.40s/it] 91%|███████████████████████████████████████▎   | 74/81 [31:37<02:46, 23.76s/it] 93%|███████████████████████████████████████▊   | 75/81 [32:03<02:27, 24.58s/it] 94%|████████████████████████████████████████▎  | 76/81 [32:24<01:57, 23.54s/it] 95%|████████████████████████████████████████▉  | 77/81 [32:52<01:39, 24.96s/it] 96%|█████████████████████████████████████████▍ | 78/81 [33:15<01:12, 24.16s/it] 98%|█████████████████████████████████████████▉ | 79/81 [33:30<00:43, 21.52s/it] 99%|██████████████████████████████████████████▍| 80/81 [33:46<00:19, 19.96s/it]100%|███████████████████████████████████████████| 81/81 [34:06<00:00, 19.91s/it]100%|███████████████████████████████████████████| 81/81 [34:06<00:00, 25.27s/it]
n of data transformed:  81
Processing analysis pass: naive_mean
Found 135 files to process.
Found 54 files already processed. Skippign them.
Removing Nqueens_Q1.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Processing 81 files.
Starting to derive attention for 81 files...
Args: [('multithread_Q1.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('multithread_Q1.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('multithread_Q1.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('multithread_Q1.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('multithread_Q1.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('multithread_Q1.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('multithread_Q1.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('multithread_Q1.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('multithread_Q1.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('multithread_Q2.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('multithread_Q2.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('multithread_Q2.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('multithread_Q2.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('multithread_Q2.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('multithread_Q2.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('multithread_Q2.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('multithread_Q2.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('multithread_Q2.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('multithread_Q3.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('multithread_Q3.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('multithread_Q3.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('multithread_Q3.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('multithread_Q3.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('multithread_Q3.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('multithread_Q3.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('multithread_Q3.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('multithread_Q3.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('tree_Q1.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('tree_Q1.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('tree_Q1.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('tree_Q1.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('tree_Q1.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('tree_Q1.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('tree_Q1.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('tree_Q1.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('tree_Q1.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('tree_Q2.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('tree_Q2.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('tree_Q2.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('tree_Q2.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('tree_Q2.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('tree_Q2.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('tree_Q2.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('tree_Q2.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('tree_Q2.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('tree_Q3.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('tree_Q3.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('tree_Q3.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('tree_Q3.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('tree_Q3.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('tree_Q3.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('tree_Q3.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('tree_Q3.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('tree_Q3.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('triangle_Q1.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('triangle_Q1.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('triangle_Q1.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('triangle_Q1.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('triangle_Q1.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('triangle_Q1.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('triangle_Q1.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('triangle_Q1.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('triangle_Q1.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('triangle_Q2.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('triangle_Q2.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('triangle_Q2.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('triangle_Q2.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('triangle_Q2.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('triangle_Q2.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('triangle_Q2.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('triangle_Q2.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('triangle_Q2.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('triangle_Q3.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('triangle_Q3.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('triangle_Q3.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('triangle_Q3.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('triangle_Q3.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('triangle_Q3.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('triangle_Q3.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('triangle_Q3.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>), ('triangle_Q3.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', {}, <function compute_naive_mean_aggregation at 0x7ff9966744c0>)]
  0%|                                                    | 0/81 [00:00<?, ?it/s]  1%|▌                                           | 1/81 [00:27<36:28, 27.36s/it]  2%|█                                           | 2/81 [00:56<37:10, 28.23s/it]  4%|█▋                                          | 3/81 [01:41<47:02, 36.18s/it]  5%|██▏                                         | 4/81 [01:56<35:37, 27.76s/it]  6%|██▋                                         | 5/81 [02:26<36:17, 28.65s/it]  7%|███▎                                        | 6/81 [02:53<34:54, 27.93s/it]  9%|███▊                                        | 7/81 [03:20<34:00, 27.57s/it] 10%|████▎                                       | 8/81 [03:46<33:05, 27.19s/it] 11%|████▉                                       | 9/81 [04:13<32:34, 27.15s/it] 12%|█████▎                                     | 10/81 [04:46<34:18, 29.00s/it] 14%|█████▊                                     | 11/81 [05:16<34:10, 29.29s/it] 15%|██████▎                                    | 12/81 [05:51<35:34, 30.93s/it] 16%|██████▉                                    | 13/81 [06:16<33:09, 29.25s/it] 17%|███████▍                                   | 14/81 [06:49<33:42, 30.19s/it] 19%|███████▉                                   | 15/81 [07:13<31:12, 28.37s/it] 20%|████████▍                                  | 16/81 [07:38<29:32, 27.27s/it] 21%|█████████                                  | 17/81 [08:09<30:29, 28.59s/it] 22%|█████████▌                                 | 18/81 [08:43<31:38, 30.14s/it] 23%|██████████                                 | 19/81 [09:22<33:58, 32.88s/it] 25%|██████████▌                                | 20/81 [09:56<33:39, 33.11s/it] 26%|███████████▏                               | 21/81 [10:24<31:38, 31.64s/it] 27%|███████████▋                               | 22/81 [11:48<46:39, 47.45s/it] 28%|████████████▏                              | 23/81 [12:13<39:21, 40.71s/it] 30%|████████████▋                              | 24/81 [12:45<36:10, 38.08s/it] 31%|█████████████▎                             | 25/81 [13:16<33:19, 35.70s/it] 32%|█████████████▊                             | 26/81 [13:38<29:06, 31.75s/it] 33%|██████████████▎                            | 27/81 [14:09<28:28, 31.64s/it] 35%|██████████████▊                            | 28/81 [14:40<27:40, 31.34s/it] 36%|███████████████▍                           | 29/81 [14:57<23:17, 26.87s/it] 37%|███████████████▉                           | 30/81 [15:21<22:08, 26.05s/it] 38%|████████████████▍                          | 31/81 [15:40<19:59, 23.99s/it] 40%|████████████████▉                          | 32/81 [16:02<19:12, 23.53s/it] 41%|█████████████████▌                         | 33/81 [16:27<19:05, 23.86s/it] 42%|██████████████████                         | 34/81 [16:41<16:20, 20.85s/it] 43%|██████████████████▌                        | 35/81 [16:53<14:02, 18.32s/it] 44%|███████████████████                        | 36/81 [17:08<13:02, 17.40s/it] 46%|███████████████████▋                       | 37/81 [17:24<12:15, 16.72s/it] 47%|████████████████████▏                      | 38/81 [17:40<11:56, 16.66s/it] 48%|████████████████████▋                      | 39/81 [18:00<12:19, 17.60s/it] 49%|█████████████████████▏                     | 40/81 [18:14<11:17, 16.53s/it] 51%|█████████████████████▊                     | 41/81 [18:32<11:14, 16.85s/it] 52%|██████████████████████▎                    | 42/81 [18:55<12:12, 18.79s/it] 53%|██████████████████████▊                    | 43/81 [19:04<10:07, 15.99s/it] 54%|███████████████████████▎                   | 44/81 [19:19<09:32, 15.48s/it] 56%|███████████████████████▉                   | 45/81 [19:34<09:12, 15.35s/it] 57%|████████████████████████▍                  | 46/81 [19:51<09:18, 15.95s/it] 58%|████████████████████████▉                  | 47/81 [20:08<09:13, 16.27s/it] 59%|█████████████████████████▍                 | 48/81 [20:28<09:33, 17.39s/it] 60%|██████████████████████████                 | 49/81 [20:50<10:03, 18.85s/it] 62%|██████████████████████████▌                | 50/81 [21:08<09:32, 18.46s/it] 63%|███████████████████████████                | 51/81 [21:25<09:01, 18.07s/it] 64%|███████████████████████████▌               | 52/81 [21:37<07:52, 16.30s/it] 65%|████████████████████████████▏              | 53/81 [21:50<07:06, 15.25s/it] 67%|████████████████████████████▋              | 54/81 [22:06<06:54, 15.35s/it] 68%|█████████████████████████████▏             | 55/81 [22:32<08:06, 18.72s/it] 69%|█████████████████████████████▋             | 56/81 [23:07<09:49, 23.57s/it] 70%|██████████████████████████████▎            | 57/81 [23:27<09:03, 22.63s/it] 72%|██████████████████████████████▊            | 58/81 [23:53<09:03, 23.61s/it] 73%|███████████████████████████████▎           | 59/81 [24:15<08:25, 22.97s/it] 74%|███████████████████████████████▊           | 60/81 [24:45<08:49, 25.22s/it] 75%|████████████████████████████████▍          | 61/81 [25:03<07:40, 23.03s/it] 77%|████████████████████████████████▉          | 62/81 [25:20<06:40, 21.09s/it] 78%|█████████████████████████████████▍         | 63/81 [25:39<06:09, 20.54s/it] 79%|█████████████████████████████████▉         | 64/81 [26:04<06:11, 21.83s/it] 80%|██████████████████████████████████▌        | 65/81 [26:34<06:29, 24.33s/it] 81%|███████████████████████████████████        | 66/81 [27:02<06:22, 25.49s/it] 83%|███████████████████████████████████▌       | 67/81 [27:36<06:30, 27.91s/it] 84%|████████████████████████████████████       | 68/81 [28:13<06:37, 30.61s/it] 85%|████████████████████████████████████▋      | 69/81 [28:39<05:53, 29.43s/it] 86%|█████████████████████████████████████▏     | 70/81 [29:00<04:55, 26.85s/it] 88%|█████████████████████████████████████▋     | 71/81 [29:17<03:58, 23.81s/it] 89%|██████████████████████████████████████▏    | 72/81 [29:34<03:16, 21.79s/it] 90%|██████████████████████████████████████▊    | 73/81 [30:05<03:17, 24.65s/it] 91%|███████████████████████████████████████▎   | 74/81 [30:28<02:49, 24.21s/it] 93%|███████████████████████████████████████▊   | 75/81 [30:58<02:34, 25.71s/it] 94%|████████████████████████████████████████▎  | 76/81 [31:17<01:59, 23.87s/it] 95%|████████████████████████████████████████▉  | 77/81 [31:44<01:38, 24.70s/it] 96%|█████████████████████████████████████████▍ | 78/81 [32:02<01:08, 22.87s/it] 98%|█████████████████████████████████████████▉ | 79/81 [32:25<00:45, 22.85s/it] 99%|██████████████████████████████████████████▍| 80/81 [32:46<00:22, 22.24s/it]100%|███████████████████████████████████████████| 81/81 [33:08<00:00, 22.18s/it]100%|███████████████████████████████████████████| 81/81 [33:08<00:00, 24.55s/it]
n of data transformed:  81
Processing analysis pass: naive_max_sym
Found 135 files to process.
Found 54 files already processed. Skippign them.
Removing Nqueens_Q1.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Processing 81 files.
Starting to derive attention for 81 files...
Args: [('multithread_Q1.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q1.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q1.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q1.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q1.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q1.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q1.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q1.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q1.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q2.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q2.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q2.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q2.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q2.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q2.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q2.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q2.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q2.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q3.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q3.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q3.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q3.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q3.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q3.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q3.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q3.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q3.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q1.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q1.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q1.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q1.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q1.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q1.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q1.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q1.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q1.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q2.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q2.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q2.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q2.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q2.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q2.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q2.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q2.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q2.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q3.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q3.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q3.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q3.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q3.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q3.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q3.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q3.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q3.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q1.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q1.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q1.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q1.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q1.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q1.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q1.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q1.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q1.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q2.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q2.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q2.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q2.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q2.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q2.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q2.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q2.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q2.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q3.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q3.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q3.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q3.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q3.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q3.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q3.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q3.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q3.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_max_sym', {}, <function make_symmetric at 0x7ff996674670>)]
  0%|                                                    | 0/81 [00:00<?, ?it/s]  1%|▌                                           | 1/81 [00:12<16:04, 12.06s/it]  2%|█                                           | 2/81 [00:25<17:03, 12.95s/it]  4%|█▋                                          | 3/81 [00:42<18:58, 14.59s/it]  5%|██▏                                         | 4/81 [00:53<16:59, 13.24s/it]  6%|██▋                                         | 5/81 [01:01<14:34, 11.50s/it]  7%|███▎                                        | 6/81 [01:11<13:34, 10.86s/it]  9%|███▊                                        | 7/81 [01:21<13:05, 10.62s/it] 10%|████▎                                       | 8/81 [01:28<11:30,  9.46s/it] 11%|████▉                                       | 9/81 [01:39<11:57,  9.96s/it] 12%|█████▎                                     | 10/81 [01:52<13:01, 11.01s/it] 14%|█████▊                                     | 11/81 [01:58<10:50,  9.30s/it] 15%|██████▎                                    | 12/81 [02:08<11:01,  9.59s/it] 16%|██████▉                                    | 13/81 [02:20<11:33, 10.20s/it] 17%|███████▍                                   | 14/81 [02:25<09:41,  8.68s/it] 19%|███████▉                                   | 15/81 [02:35<09:54,  9.01s/it] 20%|████████▍                                  | 16/81 [02:47<10:43,  9.90s/it] 21%|█████████                                  | 17/81 [02:53<09:22,  8.78s/it] 22%|█████████▌                                 | 18/81 [03:05<10:21,  9.87s/it] 23%|██████████                                 | 19/81 [03:18<11:11, 10.82s/it] 25%|██████████▌                                | 20/81 [03:26<10:13, 10.05s/it] 26%|███████████▏                               | 21/81 [03:40<11:13, 11.22s/it] 27%|███████████▋                               | 22/81 [03:48<09:50, 10.00s/it] 28%|████████████▏                              | 23/81 [03:56<09:05,  9.40s/it] 30%|████████████▋                              | 24/81 [04:08<09:53, 10.41s/it] 31%|█████████████▎                             | 25/81 [04:14<08:23,  8.99s/it] 32%|█████████████▊                             | 26/81 [04:25<08:49,  9.62s/it] 33%|██████████████▎                            | 27/81 [04:32<08:00,  8.89s/it] 35%|██████████████▊                            | 28/81 [04:40<07:36,  8.62s/it] 36%|███████████████▍                           | 29/81 [04:49<07:22,  8.51s/it] 37%|███████████████▉                           | 30/81 [04:53<06:10,  7.27s/it] 38%|████████████████▍                          | 31/81 [04:58<05:37,  6.75s/it] 40%|████████████████▉                          | 32/81 [05:03<04:57,  6.08s/it] 41%|█████████████████▌                         | 33/81 [05:10<04:59,  6.24s/it] 42%|██████████████████                         | 34/81 [05:14<04:33,  5.81s/it] 43%|██████████████████▌                        | 35/81 [05:19<04:04,  5.32s/it] 44%|███████████████████                        | 36/81 [05:23<03:41,  4.93s/it] 46%|███████████████████▋                       | 37/81 [05:27<03:25,  4.68s/it] 47%|████████████████████▏                      | 38/81 [05:31<03:22,  4.71s/it] 48%|████████████████████▋                      | 39/81 [05:37<03:23,  4.85s/it] 49%|█████████████████████▏                     | 40/81 [05:43<03:37,  5.31s/it] 51%|█████████████████████▊                     | 41/81 [05:48<03:32,  5.32s/it] 52%|██████████████████████▎                    | 42/81 [05:52<03:07,  4.82s/it] 53%|██████████████████████▊                    | 43/81 [05:56<02:53,  4.56s/it] 54%|███████████████████████▎                   | 44/81 [06:00<02:43,  4.41s/it] 56%|███████████████████████▉                   | 45/81 [06:04<02:32,  4.24s/it] 57%|████████████████████████▍                  | 46/81 [06:12<03:06,  5.34s/it] 58%|████████████████████████▉                  | 47/81 [06:19<03:20,  5.90s/it] 59%|█████████████████████████▍                 | 48/81 [06:26<03:27,  6.28s/it] 60%|██████████████████████████                 | 49/81 [06:33<03:31,  6.61s/it] 62%|██████████████████████████▌                | 50/81 [06:39<03:18,  6.41s/it] 63%|███████████████████████████                | 51/81 [06:48<03:32,  7.07s/it] 64%|███████████████████████████▌               | 52/81 [06:52<02:54,  6.02s/it] 65%|████████████████████████████▏              | 53/81 [06:58<02:50,  6.09s/it] 67%|████████████████████████████▋              | 54/81 [07:02<02:27,  5.46s/it] 68%|█████████████████████████████▏             | 55/81 [07:10<02:39,  6.14s/it] 69%|█████████████████████████████▋             | 56/81 [07:18<02:47,  6.69s/it] 70%|██████████████████████████████▎            | 57/81 [07:26<02:52,  7.19s/it] 72%|██████████████████████████████▊            | 58/81 [07:35<02:59,  7.82s/it] 73%|███████████████████████████████▎           | 59/81 [07:44<02:55,  8.00s/it] 74%|███████████████████████████████▊           | 60/81 [07:57<03:21,  9.59s/it] 75%|████████████████████████████████▍          | 61/81 [08:01<02:35,  7.79s/it] 77%|████████████████████████████████▉          | 62/81 [08:05<02:11,  6.94s/it] 78%|█████████████████████████████████▍         | 63/81 [08:11<01:54,  6.38s/it] 79%|█████████████████████████████████▉         | 64/81 [08:19<01:57,  6.92s/it] 80%|██████████████████████████████████▌        | 65/81 [08:27<01:56,  7.31s/it] 81%|███████████████████████████████████        | 66/81 [08:32<01:37,  6.50s/it] 83%|███████████████████████████████████▌       | 67/81 [08:41<01:41,  7.25s/it] 84%|████████████████████████████████████       | 68/81 [08:48<01:33,  7.23s/it] 85%|████████████████████████████████████▋      | 69/81 [08:57<01:33,  7.76s/it] 86%|█████████████████████████████████████▏     | 70/81 [09:03<01:19,  7.22s/it] 88%|█████████████████████████████████████▋     | 71/81 [09:08<01:07,  6.76s/it] 89%|██████████████████████████████████████▏    | 72/81 [09:14<00:57,  6.39s/it] 90%|██████████████████████████████████████▊    | 73/81 [09:19<00:48,  6.06s/it] 91%|███████████████████████████████████████▎   | 74/81 [09:30<00:52,  7.52s/it] 93%|███████████████████████████████████████▊   | 75/81 [09:36<00:43,  7.17s/it] 94%|████████████████████████████████████████▎  | 76/81 [09:44<00:36,  7.35s/it] 95%|████████████████████████████████████████▉  | 77/81 [09:52<00:30,  7.56s/it] 96%|█████████████████████████████████████████▍ | 78/81 [09:59<00:21,  7.25s/it] 98%|█████████████████████████████████████████▉ | 79/81 [10:03<00:12,  6.33s/it] 99%|██████████████████████████████████████████▍| 80/81 [10:08<00:05,  5.92s/it]100%|███████████████████████████████████████████| 81/81 [10:16<00:00,  6.44s/it]100%|███████████████████████████████████████████| 81/81 [10:16<00:00,  7.61s/it]
n of data transformed:  81
Processing analysis pass: naive_mean_sym
Found 135 files to process.
Found 54 files already processed. Skippign them.
Removing Nqueens_Q1.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Processing 81 files.
Starting to derive attention for 81 files...
Args: [('multithread_Q1.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q1.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q1.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q1.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q1.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q1.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q1.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q1.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q1.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q2.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q2.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q2.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q2.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q2.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q2.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q2.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q2.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q2.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q3.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q3.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q3.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q3.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q3.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q3.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q3.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q3.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q3.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q1.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q1.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q1.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q1.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q1.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q1.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q1.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q1.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q1.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q2.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q2.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q2.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q2.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q2.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q2.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q2.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q2.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q2.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q3.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q3.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q3.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q3.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q3.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q3.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q3.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q3.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q3.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q1.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q1.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q1.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q1.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q1.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q1.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q1.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q1.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q1.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q2.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q2.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q2.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q2.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q2.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q2.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q2.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q2.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q2.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q3.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q3.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q3.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q3.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q3.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q3.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q3.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q3.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q3.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/naive_mean_sym', {}, <function make_symmetric at 0x7ff996674670>)]
  0%|                                                    | 0/81 [00:00<?, ?it/s]  1%|▌                                           | 1/81 [00:10<14:12, 10.66s/it]  2%|█                                           | 2/81 [00:17<11:17,  8.58s/it]  4%|█▋                                          | 3/81 [00:25<10:22,  7.98s/it]  5%|██▏                                         | 4/81 [00:36<12:07,  9.45s/it]  6%|██▋                                         | 5/81 [00:42<10:08,  8.01s/it]  7%|███▎                                        | 6/81 [00:48<09:29,  7.59s/it]  9%|███▊                                        | 7/81 [00:58<10:13,  8.29s/it] 10%|████▎                                       | 8/81 [01:09<10:59,  9.04s/it] 11%|████▉                                       | 9/81 [01:18<11:03,  9.21s/it] 12%|█████▎                                     | 10/81 [01:31<11:58, 10.12s/it] 14%|█████▊                                     | 11/81 [01:41<12:05, 10.36s/it] 15%|██████▎                                    | 12/81 [01:51<11:40, 10.16s/it] 16%|██████▉                                    | 13/81 [02:05<12:54, 11.40s/it] 17%|███████▍                                   | 14/81 [02:13<11:20, 10.15s/it] 19%|███████▉                                   | 15/81 [02:21<10:29,  9.53s/it] 20%|████████▍                                  | 16/81 [02:29<09:46,  9.02s/it] 21%|█████████                                  | 17/81 [02:35<08:37,  8.09s/it] 22%|█████████▌                                 | 18/81 [02:43<08:36,  8.20s/it] 23%|██████████                                 | 19/81 [02:50<08:10,  7.91s/it] 25%|██████████▌                                | 20/81 [03:01<08:47,  8.64s/it] 26%|███████████▏                               | 21/81 [03:10<08:48,  8.81s/it] 27%|███████████▋                               | 22/81 [03:16<07:57,  8.09s/it] 28%|████████████▏                              | 23/81 [03:21<06:55,  7.17s/it] 30%|████████████▋                              | 24/81 [03:27<06:31,  6.87s/it] 31%|█████████████▎                             | 25/81 [03:35<06:36,  7.08s/it] 32%|█████████████▊                             | 26/81 [03:44<06:53,  7.52s/it] 33%|██████████████▎                            | 27/81 [03:52<07:08,  7.94s/it] 35%|██████████████▊                            | 28/81 [03:58<06:29,  7.35s/it] 36%|███████████████▍                           | 29/81 [04:03<05:40,  6.55s/it] 37%|███████████████▉                           | 30/81 [04:07<04:59,  5.88s/it] 38%|████████████████▍                          | 31/81 [04:13<04:47,  5.75s/it] 40%|████████████████▉                          | 32/81 [04:18<04:38,  5.69s/it] 41%|█████████████████▌                         | 33/81 [04:25<04:40,  5.84s/it] 42%|██████████████████                         | 34/81 [04:27<03:50,  4.90s/it] 43%|██████████████████▌                        | 35/81 [04:30<03:20,  4.35s/it] 44%|███████████████████                        | 36/81 [04:34<03:08,  4.20s/it] 46%|███████████████████▋                       | 37/81 [04:41<03:35,  4.89s/it] 47%|████████████████████▏                      | 38/81 [04:47<03:41,  5.16s/it] 48%|████████████████████▋                      | 39/81 [04:51<03:23,  4.86s/it] 49%|█████████████████████▏                     | 40/81 [04:58<03:48,  5.57s/it] 51%|█████████████████████▊                     | 41/81 [05:02<03:19,  4.98s/it] 52%|██████████████████████▎                    | 42/81 [05:05<02:53,  4.46s/it] 53%|██████████████████████▊                    | 43/81 [05:09<02:49,  4.45s/it] 54%|███████████████████████▎                   | 44/81 [05:13<02:42,  4.38s/it] 56%|███████████████████████▉                   | 45/81 [05:17<02:24,  4.01s/it] 57%|████████████████████████▍                  | 46/81 [05:20<02:13,  3.82s/it] 58%|████████████████████████▉                  | 47/81 [05:27<02:46,  4.90s/it] 59%|█████████████████████████▍                 | 48/81 [05:37<03:33,  6.47s/it] 60%|██████████████████████████                 | 49/81 [05:45<03:37,  6.81s/it] 62%|██████████████████████████▌                | 50/81 [05:52<03:33,  6.88s/it] 63%|███████████████████████████                | 51/81 [06:00<03:39,  7.31s/it] 64%|███████████████████████████▌               | 52/81 [06:05<03:07,  6.46s/it] 65%|████████████████████████████▏              | 53/81 [06:09<02:37,  5.61s/it] 67%|████████████████████████████▋              | 54/81 [06:12<02:13,  4.95s/it] 68%|█████████████████████████████▏             | 55/81 [06:25<03:15,  7.51s/it] 69%|█████████████████████████████▋             | 56/81 [06:37<03:34,  8.59s/it] 70%|██████████████████████████████▎            | 57/81 [06:43<03:08,  7.84s/it] 72%|██████████████████████████████▊            | 58/81 [06:49<02:52,  7.51s/it] 73%|███████████████████████████████▎           | 59/81 [07:01<03:11,  8.70s/it] 74%|███████████████████████████████▊           | 60/81 [07:15<03:37, 10.33s/it] 75%|████████████████████████████████▍          | 61/81 [07:21<02:59,  8.97s/it] 77%|████████████████████████████████▉          | 62/81 [07:28<02:38,  8.35s/it] 78%|█████████████████████████████████▍         | 63/81 [07:34<02:21,  7.89s/it] 79%|█████████████████████████████████▉         | 64/81 [07:43<02:14,  7.93s/it] 80%|██████████████████████████████████▌        | 65/81 [07:51<02:07,  7.99s/it] 81%|███████████████████████████████████        | 66/81 [07:56<01:48,  7.26s/it] 83%|███████████████████████████████████▌       | 67/81 [08:08<01:59,  8.52s/it] 84%|████████████████████████████████████       | 68/81 [08:20<02:04,  9.56s/it] 85%|████████████████████████████████████▋      | 69/81 [08:31<01:59, 10.00s/it] 86%|█████████████████████████████████████▏     | 70/81 [08:38<01:40,  9.12s/it] 88%|█████████████████████████████████████▋     | 71/81 [08:40<01:11,  7.17s/it] 89%|██████████████████████████████████████▏    | 72/81 [08:46<01:00,  6.68s/it] 90%|██████████████████████████████████████▊    | 73/81 [08:56<01:02,  7.78s/it] 91%|███████████████████████████████████████▎   | 74/81 [09:07<01:00,  8.59s/it] 93%|███████████████████████████████████████▊   | 75/81 [09:19<00:58,  9.75s/it] 94%|████████████████████████████████████████▎  | 76/81 [09:27<00:45,  9.08s/it] 95%|████████████████████████████████████████▉  | 77/81 [09:32<00:31,  7.86s/it] 96%|█████████████████████████████████████████▍ | 78/81 [09:39<00:22,  7.60s/it] 98%|█████████████████████████████████████████▉ | 79/81 [09:44<00:13,  6.84s/it] 99%|██████████████████████████████████████████▍| 80/81 [09:49<00:06,  6.37s/it]100%|███████████████████████████████████████████| 81/81 [09:54<00:00,  6.08s/it]100%|███████████████████████████████████████████| 81/81 [09:54<00:00,  7.35s/it]
n of data transformed:  81
Processing analysis pass: vector_naive_max_plus_mean_of_followers
Found 135 files to process.
Found 54 files already processed. Skippign them.
Removing Nqueens_Q1.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Processing 81 files.
Starting to derive attention for 81 files...
Args: [('multithread_Q1.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q1.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q1.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q1.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q1.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q1.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q1.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q1.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q1.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q2.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q2.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q2.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q2.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q2.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q2.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q2.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q2.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q2.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q3.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q3.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q3.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q3.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q3.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q3.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q3.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q3.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q3.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q1.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q1.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q1.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q1.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q1.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q1.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q1.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q1.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q1.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q2.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q2.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q2.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q2.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q2.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q2.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q2.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q2.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q2.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q3.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q3.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q3.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q3.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q3.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q3.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q3.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q3.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q3.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q1.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q1.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q1.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q1.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q1.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q1.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q1.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q1.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q1.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q2.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q2.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q2.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q2.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q2.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q2.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q2.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q2.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q2.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q3.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q3.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q3.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q3.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q3.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q3.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q3.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q3.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q3.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_max', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_max_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>)]
  0%|                                                    | 0/81 [00:00<?, ?it/s]  1%|▌                                           | 1/81 [00:01<01:47,  1.35s/it]  2%|█                                           | 2/81 [00:01<01:10,  1.12it/s]  4%|█▋                                          | 3/81 [00:02<00:58,  1.33it/s]  5%|██▏                                         | 4/81 [00:03<00:52,  1.48it/s]  6%|██▋                                         | 5/81 [00:03<00:45,  1.66it/s]  7%|███▎                                        | 6/81 [00:03<00:41,  1.81it/s]  9%|███▊                                        | 7/81 [00:04<00:42,  1.74it/s] 10%|████▎                                       | 8/81 [00:05<00:39,  1.83it/s] 11%|████▉                                       | 9/81 [00:05<00:37,  1.91it/s] 12%|█████▎                                     | 10/81 [00:06<00:38,  1.86it/s] 14%|█████▊                                     | 11/81 [00:06<00:36,  1.90it/s] 15%|██████▎                                    | 12/81 [00:07<00:38,  1.77it/s] 16%|██████▉                                    | 13/81 [00:07<00:36,  1.87it/s] 17%|███████▍                                   | 14/81 [00:08<00:34,  1.92it/s] 19%|███████▉                                   | 15/81 [00:08<00:37,  1.77it/s] 20%|████████▍                                  | 16/81 [00:09<00:34,  1.88it/s] 21%|█████████                                  | 17/81 [00:09<00:32,  1.95it/s] 22%|█████████▌                                 | 18/81 [00:10<00:34,  1.80it/s] 23%|██████████                                 | 19/81 [00:11<00:35,  1.77it/s] 25%|██████████▌                                | 20/81 [00:11<00:37,  1.64it/s] 26%|███████████▏                               | 21/81 [00:12<00:39,  1.53it/s] 27%|███████████▋                               | 22/81 [00:13<00:38,  1.55it/s] 28%|████████████▏                              | 23/81 [00:13<00:37,  1.55it/s] 30%|████████████▋                              | 24/81 [00:14<00:39,  1.46it/s] 31%|█████████████▎                             | 25/81 [00:15<00:37,  1.51it/s] 32%|█████████████▊                             | 26/81 [00:15<00:34,  1.58it/s] 33%|██████████████▎                            | 27/81 [00:16<00:36,  1.50it/s] 35%|██████████████▊                            | 28/81 [00:17<00:33,  1.58it/s] 36%|███████████████▍                           | 29/81 [00:17<00:30,  1.70it/s] 37%|███████████████▉                           | 30/81 [00:18<00:31,  1.64it/s] 38%|████████████████▍                          | 31/81 [00:18<00:28,  1.77it/s] 40%|████████████████▉                          | 32/81 [00:19<00:25,  1.89it/s] 41%|█████████████████▌                         | 33/81 [00:19<00:27,  1.75it/s] 42%|██████████████████                         | 34/81 [00:20<00:25,  1.88it/s] 43%|██████████████████▌                        | 35/81 [00:20<00:23,  1.97it/s] 44%|███████████████████                        | 36/81 [00:21<00:23,  1.90it/s] 46%|███████████████████▋                       | 37/81 [00:21<00:23,  1.84it/s] 47%|████████████████████▏                      | 38/81 [00:22<00:22,  1.89it/s] 48%|████████████████████▋                      | 39/81 [00:22<00:22,  1.85it/s] 49%|█████████████████████▏                     | 40/81 [00:23<00:23,  1.74it/s] 51%|█████████████████████▊                     | 41/81 [00:24<00:21,  1.85it/s] 52%|██████████████████████▎                    | 42/81 [00:24<00:21,  1.82it/s] 53%|██████████████████████▊                    | 43/81 [00:25<00:19,  1.91it/s] 54%|███████████████████████▎                   | 44/81 [00:25<00:18,  1.95it/s] 56%|███████████████████████▉                   | 45/81 [00:26<00:19,  1.87it/s] 57%|████████████████████████▍                  | 46/81 [00:26<00:19,  1.84it/s] 58%|████████████████████████▉                  | 47/81 [00:27<00:17,  1.89it/s] 59%|█████████████████████████▍                 | 48/81 [00:27<00:18,  1.76it/s] 60%|██████████████████████████                 | 49/81 [00:28<00:18,  1.77it/s] 62%|██████████████████████████▌                | 50/81 [00:28<00:16,  1.87it/s] 63%|███████████████████████████                | 51/81 [00:29<00:17,  1.70it/s] 64%|███████████████████████████▌               | 52/81 [00:30<00:16,  1.81it/s] 65%|████████████████████████████▏              | 53/81 [00:30<00:16,  1.74it/s] 67%|████████████████████████████▋              | 54/81 [00:31<00:15,  1.78it/s] 68%|█████████████████████████████▏             | 55/81 [00:31<00:14,  1.78it/s] 69%|█████████████████████████████▋             | 56/81 [00:32<00:14,  1.75it/s] 70%|██████████████████████████████▎            | 57/81 [00:33<00:16,  1.47it/s] 72%|██████████████████████████████▊            | 58/81 [00:33<00:15,  1.48it/s] 73%|███████████████████████████████▎           | 59/81 [00:34<00:14,  1.50it/s] 74%|███████████████████████████████▊           | 60/81 [00:35<00:15,  1.34it/s] 75%|████████████████████████████████▍          | 61/81 [00:36<00:13,  1.45it/s] 77%|████████████████████████████████▉          | 62/81 [00:36<00:12,  1.50it/s] 78%|█████████████████████████████████▍         | 63/81 [00:37<00:12,  1.45it/s] 79%|█████████████████████████████████▉         | 64/81 [00:38<00:11,  1.43it/s] 80%|██████████████████████████████████▌        | 65/81 [00:38<00:11,  1.45it/s] 81%|███████████████████████████████████        | 66/81 [00:39<00:11,  1.30it/s] 83%|███████████████████████████████████▌       | 67/81 [00:40<00:10,  1.29it/s] 84%|████████████████████████████████████       | 68/81 [00:41<00:09,  1.35it/s] 85%|████████████████████████████████████▋      | 69/81 [00:42<00:10,  1.18it/s] 86%|█████████████████████████████████████▏     | 70/81 [00:43<00:08,  1.25it/s] 88%|█████████████████████████████████████▋     | 71/81 [00:43<00:07,  1.38it/s] 89%|██████████████████████████████████████▏    | 72/81 [00:44<00:06,  1.37it/s] 90%|██████████████████████████████████████▊    | 73/81 [00:44<00:05,  1.41it/s] 91%|███████████████████████████████████████▎   | 74/81 [00:45<00:04,  1.42it/s] 93%|███████████████████████████████████████▊   | 75/81 [00:46<00:04,  1.34it/s] 94%|████████████████████████████████████████▎  | 76/81 [00:47<00:03,  1.38it/s] 95%|████████████████████████████████████████▉  | 77/81 [00:47<00:02,  1.38it/s] 96%|█████████████████████████████████████████▍ | 78/81 [00:48<00:02,  1.37it/s] 98%|█████████████████████████████████████████▉ | 79/81 [00:49<00:01,  1.45it/s] 99%|██████████████████████████████████████████▍| 80/81 [00:49<00:00,  1.54it/s]100%|███████████████████████████████████████████| 81/81 [00:50<00:00,  1.56it/s]100%|███████████████████████████████████████████| 81/81 [00:50<00:00,  1.61it/s]
n of data transformed:  81
Processing analysis pass: vector_naive_mean_plus_mean_of_followers
Found 135 files to process.
Found 54 files already processed. Skippign them.
Removing Nqueens_Q1.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Processing 81 files.
Starting to derive attention for 81 files...
Args: [('multithread_Q1.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q1.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q1.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q1.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q1.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q1.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q1.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q1.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q1.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q2.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q2.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q2.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q2.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q2.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q2.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q2.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q2.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q2.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q3.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q3.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q3.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q3.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q3.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q3.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q3.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q3.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('multithread_Q3.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q1.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q1.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q1.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q1.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q1.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q1.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q1.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q1.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q1.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q2.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q2.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q2.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q2.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q2.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q2.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q2.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q2.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q2.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q3.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q3.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q3.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q3.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q3.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q3.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q3.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q3.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('tree_Q3.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q1.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q1.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q1.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q1.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q1.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q1.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q1.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q1.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q1.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q2.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q2.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q2.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q2.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q2.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q2.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q2.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q2.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q2.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q3.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q3.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q3.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q3.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q3.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q3.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q3.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q3.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>), ('triangle_Q3.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/naive_mean', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/vector_naive_mean_plus_mean_of_followers', {}, <function compute_mean_of_followers at 0x7ff996674550>)]
  0%|                                                    | 0/81 [00:00<?, ?it/s]  1%|▌                                           | 1/81 [00:00<00:37,  2.13it/s]  2%|█                                           | 2/81 [00:01<00:46,  1.70it/s]  4%|█▋                                          | 3/81 [00:01<00:46,  1.69it/s]  5%|██▏                                         | 4/81 [00:02<00:41,  1.86it/s]  6%|██▋                                         | 5/81 [00:02<00:42,  1.80it/s]  7%|███▎                                        | 6/81 [00:03<00:39,  1.89it/s]  9%|███▊                                        | 7/81 [00:03<00:37,  1.97it/s] 10%|████▎                                       | 8/81 [00:04<00:38,  1.87it/s] 11%|████▉                                       | 9/81 [00:04<00:39,  1.82it/s] 12%|█████▎                                     | 10/81 [00:05<00:39,  1.80it/s] 14%|█████▊                                     | 11/81 [00:06<00:39,  1.77it/s] 15%|██████▎                                    | 12/81 [00:06<00:39,  1.73it/s] 16%|██████▉                                    | 13/81 [00:07<00:36,  1.85it/s] 17%|███████▍                                   | 14/81 [00:07<00:37,  1.81it/s] 19%|███████▉                                   | 15/81 [00:08<00:36,  1.81it/s] 20%|████████▍                                  | 16/81 [00:08<00:34,  1.89it/s] 21%|█████████                                  | 17/81 [00:09<00:34,  1.84it/s] 22%|█████████▌                                 | 18/81 [00:09<00:36,  1.74it/s] 23%|██████████                                 | 19/81 [00:10<00:35,  1.74it/s] 25%|██████████▌                                | 20/81 [00:11<00:36,  1.65it/s] 26%|███████████▏                               | 21/81 [00:11<00:35,  1.68it/s] 27%|███████████▋                               | 22/81 [00:12<00:32,  1.79it/s] 28%|████████████▏                              | 23/81 [00:12<00:32,  1.77it/s] 30%|████████████▋                              | 24/81 [00:13<00:32,  1.77it/s] 31%|█████████████▎                             | 25/81 [00:13<00:29,  1.88it/s] 32%|█████████████▊                             | 26/81 [00:14<00:30,  1.83it/s] 33%|██████████████▎                            | 27/81 [00:14<00:29,  1.80it/s] 35%|██████████████▊                            | 28/81 [00:15<00:27,  1.91it/s] 36%|███████████████▍                           | 29/81 [00:15<00:26,  1.97it/s] 37%|███████████████▉                           | 30/81 [00:16<00:25,  2.01it/s] 38%|████████████████▍                          | 31/81 [00:16<00:24,  2.04it/s] 40%|████████████████▉                          | 32/81 [00:17<00:24,  2.03it/s] 41%|█████████████████▌                         | 33/81 [00:17<00:25,  1.88it/s] 42%|██████████████████                         | 34/81 [00:18<00:23,  2.02it/s] 43%|██████████████████▌                        | 35/81 [00:18<00:22,  2.05it/s] 44%|███████████████████                        | 36/81 [00:19<00:21,  2.09it/s] 46%|███████████████████▋                       | 37/81 [00:19<00:22,  1.97it/s] 47%|████████████████████▏                      | 38/81 [00:20<00:21,  2.01it/s] 48%|████████████████████▋                      | 39/81 [00:20<00:21,  1.96it/s] 49%|█████████████████████▏                     | 40/81 [00:21<00:20,  2.01it/s] 51%|█████████████████████▊                     | 41/81 [00:21<00:19,  2.01it/s] 52%|██████████████████████▎                    | 42/81 [00:22<00:19,  2.03it/s] 53%|██████████████████████▊                    | 43/81 [00:22<00:18,  2.09it/s] 54%|███████████████████████▎                   | 44/81 [00:23<00:17,  2.11it/s] 56%|███████████████████████▉                   | 45/81 [00:23<00:17,  2.08it/s] 57%|████████████████████████▍                  | 46/81 [00:24<00:17,  2.02it/s] 58%|████████████████████████▉                  | 47/81 [00:24<00:16,  2.06it/s] 59%|█████████████████████████▍                 | 48/81 [00:25<00:16,  1.96it/s] 60%|██████████████████████████                 | 49/81 [00:25<00:15,  2.03it/s] 62%|██████████████████████████▌                | 50/81 [00:26<00:15,  2.01it/s] 63%|███████████████████████████                | 51/81 [00:26<00:15,  1.92it/s] 64%|███████████████████████████▌               | 52/81 [00:27<00:14,  2.01it/s] 65%|████████████████████████████▏              | 53/81 [00:27<00:14,  1.99it/s] 67%|████████████████████████████▋              | 54/81 [00:28<00:14,  1.85it/s] 68%|█████████████████████████████▏             | 55/81 [00:28<00:14,  1.85it/s] 69%|█████████████████████████████▋             | 56/81 [00:29<00:13,  1.89it/s] 70%|██████████████████████████████▎            | 57/81 [00:30<00:13,  1.83it/s] 72%|██████████████████████████████▊            | 58/81 [00:30<00:12,  1.79it/s] 73%|███████████████████████████████▎           | 59/81 [00:31<00:11,  1.86it/s] 74%|███████████████████████████████▊           | 60/81 [00:31<00:11,  1.85it/s] 75%|████████████████████████████████▍          | 61/81 [00:32<00:10,  1.84it/s] 77%|████████████████████████████████▉          | 62/81 [00:32<00:10,  1.81it/s] 78%|█████████████████████████████████▍         | 63/81 [00:33<00:12,  1.43it/s] 79%|█████████████████████████████████▉         | 64/81 [00:34<00:11,  1.51it/s] 80%|██████████████████████████████████▌        | 65/81 [00:35<00:10,  1.50it/s] 81%|███████████████████████████████████        | 66/81 [00:35<00:09,  1.63it/s] 83%|███████████████████████████████████▌       | 67/81 [00:36<00:08,  1.64it/s] 84%|████████████████████████████████████       | 68/81 [00:36<00:07,  1.75it/s] 85%|████████████████████████████████████▋      | 69/81 [00:37<00:06,  1.86it/s] 86%|█████████████████████████████████████▏     | 70/81 [00:37<00:05,  1.95it/s] 88%|█████████████████████████████████████▋     | 71/81 [00:38<00:05,  2.00it/s] 89%|██████████████████████████████████████▏    | 72/81 [00:38<00:04,  2.06it/s] 90%|██████████████████████████████████████▊    | 73/81 [00:39<00:03,  2.07it/s] 91%|███████████████████████████████████████▎   | 74/81 [00:39<00:03,  2.10it/s] 93%|███████████████████████████████████████▊   | 75/81 [00:39<00:02,  2.13it/s] 94%|████████████████████████████████████████▎  | 76/81 [00:40<00:02,  2.14it/s] 95%|████████████████████████████████████████▉  | 77/81 [00:40<00:01,  2.10it/s] 96%|█████████████████████████████████████████▍ | 78/81 [00:41<00:01,  2.16it/s] 98%|█████████████████████████████████████████▉ | 79/81 [00:41<00:00,  2.17it/s] 99%|██████████████████████████████████████████▍| 80/81 [00:42<00:00,  2.17it/s]100%|███████████████████████████████████████████| 81/81 [00:42<00:00,  2.05it/s]100%|███████████████████████████████████████████| 81/81 [00:42<00:00,  1.89it/s]
n of data transformed:  81
Processing analysis pass: raw_weights_last_layer
Found 135 files to process.
Found 54 files already processed. Skippign them.
Removing Nqueens_Q1.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Processing 81 files.
Starting to derive attention for 81 files...
Args: [('multithread_Q1.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('multithread_Q1.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('multithread_Q1.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('multithread_Q1.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('multithread_Q1.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('multithread_Q1.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('multithread_Q1.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('multithread_Q1.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('multithread_Q1.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('multithread_Q2.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('multithread_Q2.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('multithread_Q2.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('multithread_Q2.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('multithread_Q2.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('multithread_Q2.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('multithread_Q2.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('multithread_Q2.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('multithread_Q2.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('multithread_Q3.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('multithread_Q3.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('multithread_Q3.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('multithread_Q3.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('multithread_Q3.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('multithread_Q3.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('multithread_Q3.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('multithread_Q3.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('multithread_Q3.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('tree_Q1.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('tree_Q1.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('tree_Q1.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('tree_Q1.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('tree_Q1.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('tree_Q1.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('tree_Q1.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('tree_Q1.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('tree_Q1.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('tree_Q2.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('tree_Q2.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('tree_Q2.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('tree_Q2.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('tree_Q2.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('tree_Q2.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('tree_Q2.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('tree_Q2.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('tree_Q2.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('tree_Q3.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('tree_Q3.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('tree_Q3.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('tree_Q3.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('tree_Q3.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('tree_Q3.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('tree_Q3.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('tree_Q3.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('tree_Q3.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('triangle_Q1.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('triangle_Q1.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('triangle_Q1.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('triangle_Q1.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('triangle_Q1.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('triangle_Q1.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('triangle_Q1.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('triangle_Q1.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('triangle_Q1.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('triangle_Q2.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('triangle_Q2.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('triangle_Q2.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('triangle_Q2.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('triangle_Q2.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('triangle_Q2.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('triangle_Q2.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('triangle_Q2.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('triangle_Q2.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('triangle_Q3.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('triangle_Q3.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('triangle_Q3.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('triangle_Q3.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('triangle_Q3.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('triangle_Q3.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('triangle_Q3.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('triangle_Q3.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>), ('triangle_Q3.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', {}, <function raw_weights_last_layer at 0x7ff9966e7ca0>)]
  0%|                                                    | 0/81 [00:00<?, ?it/s]  1%|▌                                           | 1/81 [00:26<35:02, 26.28s/it]  2%|█                                         | 2/81 [01:55<1:23:19, 63.29s/it]  4%|█▌                                        | 3/81 [02:27<1:03:40, 48.98s/it]  5%|██▏                                         | 4/81 [02:48<48:47, 38.02s/it]  6%|██▋                                         | 5/81 [03:13<42:03, 33.21s/it]  7%|███▎                                        | 6/81 [03:42<39:57, 31.96s/it]  9%|███▊                                        | 7/81 [04:16<39:56, 32.38s/it] 10%|████▎                                       | 8/81 [04:58<43:21, 35.64s/it] 11%|████▉                                       | 9/81 [05:27<40:13, 33.53s/it] 12%|█████▎                                     | 10/81 [06:16<45:07, 38.13s/it] 14%|█████▊                                     | 11/81 [06:50<43:18, 37.12s/it] 15%|██████▎                                    | 12/81 [07:22<40:38, 35.34s/it] 16%|██████▉                                    | 13/81 [07:51<38:01, 33.55s/it] 17%|███████▍                                   | 14/81 [08:27<38:22, 34.36s/it] 19%|███████▉                                   | 15/81 [08:49<33:32, 30.48s/it] 20%|████████▍                                  | 16/81 [09:12<30:31, 28.17s/it] 21%|█████████                                  | 17/81 [09:37<29:04, 27.25s/it] 22%|█████████▌                                 | 18/81 [10:01<27:40, 26.35s/it] 23%|██████████                                 | 19/81 [10:35<29:42, 28.75s/it] 25%|██████████▌                                | 20/81 [11:04<29:07, 28.64s/it] 26%|███████████▏                               | 21/81 [11:37<30:01, 30.02s/it] 27%|███████████▋                               | 22/81 [12:03<28:27, 28.94s/it] 28%|████████████▏                              | 23/81 [12:32<27:51, 28.81s/it] 30%|████████████▋                              | 24/81 [13:05<28:38, 30.14s/it] 31%|█████████████▎                             | 25/81 [13:38<28:49, 30.89s/it] 32%|█████████████▊                             | 26/81 [15:10<45:19, 49.44s/it] 33%|██████████████▎                            | 27/81 [15:40<39:05, 43.43s/it] 35%|██████████████▊                            | 28/81 [16:04<33:07, 37.50s/it] 36%|███████████████▍                           | 29/81 [16:25<28:23, 32.76s/it] 37%|███████████████▉                           | 30/81 [16:47<25:08, 29.58s/it] 38%|████████████████▍                          | 31/81 [17:03<21:11, 25.43s/it] 40%|████████████████▉                          | 32/81 [17:23<19:26, 23.80s/it] 41%|█████████████████▌                         | 33/81 [17:43<18:09, 22.69s/it] 42%|██████████████████                         | 34/81 [17:54<14:56, 19.08s/it] 43%|██████████████████▌                        | 35/81 [18:05<12:50, 16.75s/it] 44%|███████████████████                        | 36/81 [18:17<11:30, 15.34s/it] 46%|███████████████████▋                       | 37/81 [18:37<12:06, 16.51s/it] 47%|████████████████████▏                      | 38/81 [18:54<11:56, 16.67s/it] 48%|████████████████████▋                      | 39/81 [19:13<12:20, 17.64s/it] 49%|█████████████████████▏                     | 40/81 [19:31<12:00, 17.56s/it] 51%|█████████████████████▊                     | 41/81 [19:49<11:48, 17.71s/it] 52%|██████████████████████▎                    | 42/81 [20:09<11:54, 18.32s/it] 53%|██████████████████████▊                    | 43/81 [20:21<10:27, 16.52s/it] 54%|███████████████████████▎                   | 44/81 [20:39<10:25, 16.91s/it] 56%|███████████████████████▉                   | 45/81 [20:51<09:22, 15.62s/it] 57%|████████████████████████▍                  | 46/81 [21:10<09:38, 16.53s/it] 58%|████████████████████████▉                  | 47/81 [21:34<10:38, 18.79s/it] 59%|█████████████████████████▍                 | 48/81 [21:56<10:50, 19.70s/it] 60%|██████████████████████████                 | 49/81 [22:25<12:03, 22.60s/it] 62%|██████████████████████████▌                | 50/81 [23:54<21:53, 42.36s/it] 63%|███████████████████████████                | 51/81 [24:16<18:05, 36.18s/it] 64%|███████████████████████████▌               | 52/81 [24:31<14:31, 30.05s/it] 65%|████████████████████████████▏              | 53/81 [24:46<11:55, 25.57s/it] 67%|████████████████████████████▋              | 54/81 [25:03<10:17, 22.87s/it] 68%|█████████████████████████████▏             | 55/81 [25:30<10:28, 24.19s/it] 69%|█████████████████████████████▋             | 56/81 [25:57<10:27, 25.09s/it] 70%|██████████████████████████████▎            | 57/81 [26:30<10:52, 27.19s/it] 72%|██████████████████████████████▊            | 58/81 [26:58<10:36, 27.68s/it] 73%|███████████████████████████████▎           | 59/81 [27:27<10:12, 27.86s/it] 74%|███████████████████████████████▊           | 60/81 [27:50<09:20, 26.67s/it] 75%|████████████████████████████████▍          | 61/81 [28:09<08:02, 24.10s/it] 77%|████████████████████████████████▉          | 62/81 [28:28<07:08, 22.54s/it] 78%|█████████████████████████████████▍         | 63/81 [28:47<06:29, 21.64s/it] 79%|█████████████████████████████████▉         | 64/81 [29:14<06:36, 23.32s/it] 80%|██████████████████████████████████▌        | 65/81 [29:40<06:24, 24.02s/it] 81%|███████████████████████████████████        | 66/81 [30:10<06:26, 25.76s/it] 83%|███████████████████████████████████▌       | 67/81 [30:39<06:16, 26.92s/it] 84%|████████████████████████████████████       | 68/81 [31:14<06:21, 29.33s/it] 85%|████████████████████████████████████▋      | 69/81 [31:39<05:36, 28.01s/it] 86%|█████████████████████████████████████▏     | 70/81 [31:57<04:33, 24.88s/it] 88%|█████████████████████████████████████▋     | 71/81 [32:09<03:29, 20.96s/it] 89%|██████████████████████████████████████▏    | 72/81 [32:27<03:02, 20.26s/it] 90%|██████████████████████████████████████▊    | 73/81 [33:49<05:08, 38.59s/it] 91%|███████████████████████████████████████▎   | 74/81 [34:07<03:48, 32.59s/it] 93%|███████████████████████████████████████▊   | 75/81 [34:32<03:01, 30.32s/it] 94%|████████████████████████████████████████▎  | 76/81 [35:04<02:34, 30.87s/it] 95%|████████████████████████████████████████▉  | 77/81 [35:26<01:52, 28.16s/it] 96%|█████████████████████████████████████████▍ | 78/81 [35:51<01:21, 27.14s/it] 98%|█████████████████████████████████████████▉ | 79/81 [36:04<00:45, 22.88s/it] 99%|██████████████████████████████████████████▍| 80/81 [36:25<00:22, 22.28s/it]100%|███████████████████████████████████████████| 81/81 [36:42<00:00, 20.60s/it]100%|███████████████████████████████████████████| 81/81 [36:42<00:00, 27.19s/it]
n of data transformed:  81
Processing analysis pass: raw_weights_first_layer
Found 135 files to process.
Found 54 files already processed. Skippign them.
Removing Nqueens_Q1.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Processing 81 files.
Starting to derive attention for 81 files...
Args: [('multithread_Q1.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('multithread_Q1.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('multithread_Q1.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('multithread_Q1.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('multithread_Q1.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('multithread_Q1.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('multithread_Q1.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('multithread_Q1.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('multithread_Q1.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('multithread_Q2.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('multithread_Q2.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('multithread_Q2.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('multithread_Q2.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('multithread_Q2.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('multithread_Q2.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('multithread_Q2.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('multithread_Q2.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('multithread_Q2.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('multithread_Q3.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('multithread_Q3.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('multithread_Q3.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('multithread_Q3.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('multithread_Q3.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('multithread_Q3.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('multithread_Q3.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('multithread_Q3.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('multithread_Q3.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('tree_Q1.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('tree_Q1.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('tree_Q1.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('tree_Q1.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('tree_Q1.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('tree_Q1.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('tree_Q1.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('tree_Q1.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('tree_Q1.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('tree_Q2.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('tree_Q2.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('tree_Q2.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('tree_Q2.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('tree_Q2.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('tree_Q2.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('tree_Q2.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('tree_Q2.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('tree_Q2.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('tree_Q3.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('tree_Q3.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('tree_Q3.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('tree_Q3.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('tree_Q3.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('tree_Q3.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('tree_Q3.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('tree_Q3.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('tree_Q3.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('triangle_Q1.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('triangle_Q1.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('triangle_Q1.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('triangle_Q1.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('triangle_Q1.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('triangle_Q1.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('triangle_Q1.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('triangle_Q1.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('triangle_Q1.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('triangle_Q2.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('triangle_Q2.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('triangle_Q2.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('triangle_Q2.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('triangle_Q2.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('triangle_Q2.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('triangle_Q2.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('triangle_Q2.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('triangle_Q2.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('triangle_Q3.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('triangle_Q3.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('triangle_Q3.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('triangle_Q3.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('triangle_Q3.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('triangle_Q3.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('triangle_Q3.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('triangle_Q3.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>), ('triangle_Q3.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', {}, <function raw_weights_first_layer at 0x7ff9966e7d30>)]
  0%|                                                    | 0/81 [00:00<?, ?it/s]  1%|▌                                           | 1/81 [00:30<41:03, 30.79s/it]  2%|█                                           | 2/81 [01:09<47:00, 35.70s/it]  4%|█▋                                          | 3/81 [01:45<46:13, 35.55s/it]  5%|██▏                                         | 4/81 [02:07<38:37, 30.09s/it]  6%|██▋                                         | 5/81 [02:27<33:43, 26.63s/it]  7%|███▎                                        | 6/81 [02:58<35:02, 28.03s/it]  9%|███▊                                        | 7/81 [03:24<33:57, 27.54s/it] 10%|████▎                                       | 8/81 [03:55<34:38, 28.48s/it] 11%|████▉                                       | 9/81 [04:23<34:09, 28.46s/it] 12%|█████▎                                     | 10/81 [04:48<32:29, 27.46s/it] 14%|█████▊                                     | 11/81 [05:17<32:21, 27.73s/it] 15%|██████▎                                    | 12/81 [05:49<33:29, 29.12s/it] 16%|██████▉                                    | 13/81 [06:17<32:26, 28.62s/it] 17%|███████▍                                   | 14/81 [06:43<31:16, 28.01s/it] 19%|███████▉                                   | 15/81 [07:07<29:19, 26.67s/it] 20%|████████▍                                  | 16/81 [07:28<27:11, 25.10s/it] 21%|█████████                                  | 17/81 [07:56<27:29, 25.78s/it] 22%|█████████▌                                 | 18/81 [08:27<28:50, 27.47s/it] 23%|██████████                                 | 19/81 [08:59<29:57, 28.98s/it] 25%|██████████▌                                | 20/81 [09:35<31:37, 31.10s/it] 26%|███████████▏                               | 21/81 [10:05<30:36, 30.60s/it] 27%|███████████▋                               | 22/81 [10:41<31:38, 32.19s/it] 28%|████████████▏                              | 23/81 [11:02<27:50, 28.79s/it] 30%|████████████▋                              | 24/81 [11:33<28:08, 29.63s/it] 31%|█████████████▎                             | 25/81 [11:59<26:30, 28.40s/it] 32%|█████████████▊                             | 26/81 [12:21<24:24, 26.63s/it] 33%|██████████████▎                            | 27/81 [12:49<24:16, 26.97s/it] 35%|██████████████▊                            | 28/81 [13:08<21:46, 24.66s/it] 36%|███████████████▍                           | 29/81 [13:26<19:35, 22.61s/it] 37%|███████████████▉                           | 30/81 [13:50<19:25, 22.86s/it] 38%|████████████████▍                          | 31/81 [14:06<17:19, 20.79s/it] 40%|████████████████▉                          | 32/81 [14:22<15:50, 19.39s/it] 41%|█████████████████▌                         | 33/81 [14:52<18:10, 22.72s/it] 42%|██████████████████                         | 34/81 [15:06<15:42, 20.05s/it] 43%|██████████████████▌                        | 35/81 [15:17<13:12, 17.23s/it] 44%|███████████████████                        | 36/81 [15:29<11:45, 15.68s/it] 46%|███████████████████▋                       | 37/81 [15:46<11:57, 16.30s/it] 47%|████████████████████▏                      | 38/81 [16:00<11:01, 15.39s/it] 48%|████████████████████▋                      | 39/81 [16:17<11:10, 15.96s/it] 49%|█████████████████████▏                     | 40/81 [16:39<12:08, 17.78s/it] 51%|█████████████████████▊                     | 41/81 [17:00<12:24, 18.61s/it] 52%|██████████████████████▎                    | 42/81 [17:15<11:29, 17.67s/it] 53%|██████████████████████▊                    | 43/81 [17:28<10:15, 16.20s/it] 54%|███████████████████████▎                   | 44/81 [17:41<09:24, 15.25s/it] 56%|███████████████████████▉                   | 45/81 [17:58<09:28, 15.80s/it] 57%|████████████████████████▍                  | 46/81 [18:16<09:36, 16.47s/it] 58%|████████████████████████▉                  | 47/81 [18:39<10:31, 18.57s/it] 59%|█████████████████████████▍                 | 48/81 [19:00<10:29, 19.07s/it] 60%|██████████████████████████                 | 49/81 [19:21<10:28, 19.65s/it] 62%|██████████████████████████▌                | 50/81 [19:48<11:16, 21.82s/it] 63%|███████████████████████████                | 51/81 [20:10<10:59, 22.00s/it] 64%|███████████████████████████▌               | 52/81 [20:21<09:00, 18.62s/it] 65%|████████████████████████████▏              | 53/81 [20:32<07:40, 16.45s/it] 67%|████████████████████████████▋              | 54/81 [20:53<07:56, 17.65s/it] 68%|█████████████████████████████▏             | 55/81 [21:18<08:37, 19.91s/it] 69%|█████████████████████████████▋             | 56/81 [21:43<09:00, 21.63s/it] 70%|██████████████████████████████▎            | 57/81 [22:14<09:45, 24.40s/it] 72%|██████████████████████████████▊            | 58/81 [22:38<09:16, 24.22s/it] 73%|███████████████████████████████▎           | 59/81 [23:12<09:57, 27.15s/it] 74%|███████████████████████████████▊           | 60/81 [23:33<08:51, 25.30s/it] 75%|████████████████████████████████▍          | 61/81 [23:51<07:41, 23.06s/it] 77%|████████████████████████████████▉          | 62/81 [24:13<07:14, 22.86s/it] 78%|█████████████████████████████████▍         | 63/81 [24:30<06:20, 21.14s/it] 79%|█████████████████████████████████▉         | 64/81 [24:59<06:36, 23.31s/it] 80%|██████████████████████████████████▌        | 65/81 [25:26<06:30, 24.43s/it] 81%|███████████████████████████████████        | 66/81 [25:55<06:27, 25.85s/it] 83%|███████████████████████████████████▌       | 67/81 [26:23<06:09, 26.41s/it] 84%|████████████████████████████████████       | 68/81 [26:49<05:43, 26.45s/it] 85%|████████████████████████████████████▋      | 69/81 [27:22<05:39, 28.32s/it] 86%|█████████████████████████████████████▏     | 70/81 [27:37<04:26, 24.24s/it] 88%|█████████████████████████████████████▋     | 71/81 [27:57<03:50, 23.01s/it] 89%|██████████████████████████████████████▏    | 72/81 [28:14<03:11, 21.30s/it] 90%|██████████████████████████████████████▊    | 73/81 [28:36<02:51, 21.47s/it] 91%|███████████████████████████████████████▎   | 74/81 [28:59<02:33, 21.95s/it] 93%|███████████████████████████████████████▊   | 75/81 [29:23<02:15, 22.58s/it] 94%|████████████████████████████████████████▎  | 76/81 [29:46<01:54, 22.82s/it] 95%|████████████████████████████████████████▉  | 77/81 [30:12<01:35, 23.75s/it] 96%|█████████████████████████████████████████▍ | 78/81 [30:39<01:13, 24.66s/it] 98%|█████████████████████████████████████████▉ | 79/81 [30:55<00:43, 21.89s/it] 99%|██████████████████████████████████████████▍| 80/81 [31:10<00:20, 20.03s/it]100%|███████████████████████████████████████████| 81/81 [31:27<00:00, 19.02s/it]100%|███████████████████████████████████████████| 81/81 [31:27<00:00, 23.30s/it]
n of data transformed:  81
Processing analysis pass: raw_weights_last_layer_sym
Found 135 files to process.
Found 54 files already processed. Skippign them.
Removing Nqueens_Q1.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Processing 81 files.
Starting to derive attention for 81 files...
Args: [('multithread_Q1.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q1.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q1.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q1.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q1.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q1.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q1.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q1.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q1.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q2.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q2.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q2.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q2.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q2.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q2.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q2.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q2.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q2.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q3.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q3.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q3.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q3.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q3.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q3.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q3.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q3.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q3.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q1.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q1.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q1.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q1.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q1.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q1.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q1.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q1.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q1.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q2.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q2.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q2.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q2.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q2.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q2.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q2.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q2.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q2.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q3.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q3.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q3.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q3.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q3.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q3.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q3.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q3.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q3.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q1.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q1.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q1.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q1.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q1.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q1.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q1.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q1.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q1.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q2.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q2.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q2.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q2.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q2.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q2.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q2.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q2.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q2.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q3.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q3.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q3.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q3.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q3.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q3.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q3.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q3.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q3.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_last_layer_sym', {}, <function make_symmetric at 0x7ff996674670>)]
  0%|                                                    | 0/81 [00:00<?, ?it/s]  1%|▌                                           | 1/81 [00:15<20:59, 15.74s/it]  2%|█                                           | 2/81 [00:25<15:57, 12.12s/it]  4%|█▋                                          | 3/81 [00:30<11:40,  8.98s/it]  5%|██▏                                         | 4/81 [00:42<12:46,  9.95s/it]  6%|██▋                                         | 5/81 [00:47<10:35,  8.36s/it]  7%|███▎                                        | 6/81 [00:52<08:51,  7.08s/it]  9%|███▊                                        | 7/81 [01:03<10:34,  8.58s/it] 10%|████▎                                       | 8/81 [01:08<09:03,  7.44s/it] 11%|████▉                                       | 9/81 [01:14<08:22,  6.98s/it] 12%|█████▎                                     | 10/81 [01:28<10:49,  9.15s/it] 14%|█████▊                                     | 11/81 [01:33<09:13,  7.91s/it] 15%|██████▎                                    | 12/81 [01:40<08:40,  7.54s/it] 16%|██████▉                                    | 13/81 [01:51<09:38,  8.50s/it] 17%|███████▍                                   | 14/81 [02:00<09:35,  8.58s/it] 19%|███████▉                                   | 15/81 [02:05<08:21,  7.59s/it] 20%|████████▍                                  | 16/81 [02:13<08:26,  7.79s/it] 21%|█████████                                  | 17/81 [02:21<08:15,  7.75s/it] 22%|█████████▌                                 | 18/81 [02:27<07:42,  7.35s/it] 23%|██████████                                 | 19/81 [02:40<09:16,  8.97s/it] 25%|██████████▌                                | 20/81 [02:49<09:17,  9.14s/it] 26%|███████████▏                               | 21/81 [02:59<09:08,  9.13s/it] 27%|███████████▋                               | 22/81 [03:10<09:42,  9.87s/it] 28%|████████████▏                              | 23/81 [03:17<08:39,  8.95s/it] 30%|████████████▋                              | 24/81 [03:25<08:14,  8.68s/it] 31%|█████████████▎                             | 25/81 [03:39<09:27, 10.14s/it] 32%|█████████████▊                             | 26/81 [03:45<08:08,  8.89s/it] 33%|██████████████▎                            | 27/81 [03:53<07:46,  8.64s/it] 35%|██████████████▊                            | 28/81 [04:01<07:33,  8.55s/it] 36%|███████████████▍                           | 29/81 [04:07<06:44,  7.79s/it] 37%|███████████████▉                           | 30/81 [04:14<06:22,  7.49s/it] 38%|████████████████▍                          | 31/81 [04:19<05:34,  6.70s/it] 40%|████████████████▉                          | 32/81 [04:24<05:02,  6.17s/it] 41%|█████████████████▌                         | 33/81 [04:32<05:22,  6.72s/it] 42%|██████████████████                         | 34/81 [04:36<04:50,  6.19s/it] 43%|██████████████████▌                        | 35/81 [04:40<04:11,  5.46s/it] 44%|███████████████████                        | 36/81 [04:44<03:40,  4.89s/it] 46%|███████████████████▋                       | 37/81 [04:50<03:56,  5.37s/it] 47%|████████████████████▏                      | 38/81 [04:56<03:50,  5.37s/it] 48%|████████████████████▋                      | 39/81 [05:01<03:51,  5.50s/it] 49%|█████████████████████▏                     | 40/81 [05:10<04:18,  6.30s/it] 51%|█████████████████████▊                     | 41/81 [05:14<03:47,  5.68s/it] 52%|██████████████████████▎                    | 42/81 [05:18<03:26,  5.31s/it] 53%|██████████████████████▊                    | 43/81 [05:22<03:08,  4.97s/it] 54%|███████████████████████▎                   | 44/81 [05:26<02:49,  4.58s/it] 56%|███████████████████████▉                   | 45/81 [05:31<02:45,  4.59s/it] 57%|████████████████████████▍                  | 46/81 [05:37<02:56,  5.03s/it] 58%|████████████████████████▉                  | 47/81 [05:44<03:12,  5.65s/it] 59%|█████████████████████████▍                 | 48/81 [05:49<02:57,  5.38s/it] 60%|██████████████████████████                 | 49/81 [05:56<03:06,  5.83s/it] 62%|██████████████████████████▌                | 50/81 [06:02<03:05,  5.99s/it] 63%|███████████████████████████                | 51/81 [06:09<03:11,  6.37s/it] 64%|███████████████████████████▌               | 52/81 [06:14<02:47,  5.78s/it] 65%|████████████████████████████▏              | 53/81 [06:17<02:18,  4.95s/it] 67%|████████████████████████████▋              | 54/81 [06:21<02:12,  4.92s/it] 68%|█████████████████████████████▏             | 55/81 [06:28<02:22,  5.49s/it] 69%|█████████████████████████████▋             | 56/81 [06:37<02:41,  6.45s/it] 70%|██████████████████████████████▎            | 57/81 [06:54<03:47,  9.49s/it] 72%|██████████████████████████████▊            | 58/81 [07:07<04:02, 10.54s/it] 73%|███████████████████████████████▎           | 59/81 [07:14<03:34,  9.74s/it] 74%|███████████████████████████████▊           | 60/81 [07:20<02:56,  8.39s/it] 75%|████████████████████████████████▍          | 61/81 [07:27<02:40,  8.00s/it] 77%|████████████████████████████████▉          | 62/81 [07:35<02:32,  8.05s/it] 78%|█████████████████████████████████▍         | 63/81 [07:42<02:20,  7.79s/it] 79%|█████████████████████████████████▉         | 64/81 [07:52<02:22,  8.39s/it] 80%|██████████████████████████████████▌        | 65/81 [07:58<02:02,  7.68s/it] 81%|███████████████████████████████████        | 66/81 [08:05<01:53,  7.57s/it] 83%|███████████████████████████████████▌       | 67/81 [08:15<01:53,  8.10s/it] 84%|████████████████████████████████████       | 68/81 [08:23<01:44,  8.07s/it] 85%|████████████████████████████████████▋      | 69/81 [08:32<01:40,  8.40s/it] 86%|█████████████████████████████████████▏     | 70/81 [08:38<01:24,  7.68s/it] 88%|█████████████████████████████████████▋     | 71/81 [08:43<01:09,  6.93s/it] 89%|██████████████████████████████████████▏    | 72/81 [08:47<00:54,  6.06s/it] 90%|██████████████████████████████████████▊    | 73/81 [08:55<00:52,  6.57s/it] 91%|███████████████████████████████████████▎   | 74/81 [09:04<00:52,  7.44s/it] 93%|███████████████████████████████████████▊   | 75/81 [09:11<00:42,  7.16s/it] 94%|████████████████████████████████████████▎  | 76/81 [09:17<00:35,  7.00s/it] 95%|████████████████████████████████████████▉  | 77/81 [09:22<00:25,  6.41s/it] 96%|█████████████████████████████████████████▍ | 78/81 [09:29<00:19,  6.45s/it] 98%|█████████████████████████████████████████▉ | 79/81 [09:35<00:12,  6.34s/it] 99%|██████████████████████████████████████████▍| 80/81 [09:38<00:05,  5.36s/it]100%|███████████████████████████████████████████| 81/81 [09:46<00:00,  6.15s/it]100%|███████████████████████████████████████████| 81/81 [09:46<00:00,  7.24s/it]
n of data transformed:  81
Processing analysis pass: raw_weights_first_layer_sym
Found 135 files to process.
Found 54 files already processed. Skippign them.
Removing Nqueens_Q1.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Processing 81 files.
Starting to derive attention for 81 files...
Args: [('multithread_Q1.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q1.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q1.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q1.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q1.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q1.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q1.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q1.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q1.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q2.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q2.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q2.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q2.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q2.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q2.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q2.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q2.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q2.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q3.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q3.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q3.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q3.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q3.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q3.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q3.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q3.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('multithread_Q3.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q1.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q1.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q1.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q1.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q1.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q1.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q1.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q1.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q1.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q2.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q2.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q2.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q2.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q2.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q2.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q2.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q2.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q2.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q3.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q3.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q3.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q3.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q3.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q3.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q3.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q3.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('tree_Q3.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q1.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q1.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q1.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q1.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q1.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q1.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q1.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q1.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q1.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q2.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q2.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q2.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q2.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q2.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q2.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q2.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q2.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q2.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q3.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q3.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q3.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q3.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q3.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q3.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q3.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q3.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>), ('triangle_Q3.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/raw_weights_first_layer_sym', {}, <function make_symmetric at 0x7ff996674670>)]
  0%|                                                    | 0/81 [00:00<?, ?it/s]  1%|▌                                           | 1/81 [00:09<12:50,  9.64s/it]  2%|█                                           | 2/81 [00:23<15:39, 11.90s/it]  4%|█▋                                          | 3/81 [00:36<16:10, 12.44s/it]  5%|██▏                                         | 4/81 [00:44<13:59, 10.90s/it]  6%|██▋                                         | 5/81 [00:54<13:22, 10.56s/it]  7%|███▎                                        | 6/81 [01:08<14:31, 11.62s/it]  9%|███▊                                        | 7/81 [01:16<13:05, 10.61s/it] 10%|████▎                                       | 8/81 [01:27<13:02, 10.71s/it] 11%|████▉                                       | 9/81 [01:42<14:14, 11.87s/it] 12%|█████▎                                     | 10/81 [01:52<13:22, 11.31s/it] 14%|█████▊                                     | 11/81 [02:04<13:38, 11.69s/it] 15%|██████▎                                    | 12/81 [02:14<12:44, 11.07s/it] 16%|██████▉                                    | 13/81 [02:22<11:23, 10.05s/it] 17%|███████▍                                   | 14/81 [02:31<10:47,  9.67s/it] 19%|███████▉                                   | 15/81 [02:38<09:58,  9.06s/it] 20%|████████▍                                  | 16/81 [02:45<08:57,  8.27s/it] 21%|█████████                                  | 17/81 [02:52<08:29,  7.96s/it] 22%|█████████▌                                 | 18/81 [02:58<07:55,  7.56s/it] 23%|██████████                                 | 19/81 [03:08<08:21,  8.09s/it] 25%|██████████▌                                | 20/81 [03:16<08:15,  8.12s/it] 26%|███████████▏                               | 21/81 [03:29<09:35,  9.60s/it] 27%|███████████▋                               | 22/81 [03:39<09:37,  9.79s/it] 28%|████████████▏                              | 23/81 [03:46<08:37,  8.93s/it] 30%|████████████▋                              | 24/81 [03:57<08:54,  9.37s/it] 31%|█████████████▎                             | 25/81 [04:12<10:23, 11.14s/it] 32%|█████████████▊                             | 26/81 [04:18<08:57,  9.77s/it] 33%|██████████████▎                            | 27/81 [04:25<07:50,  8.71s/it] 35%|██████████████▊                            | 28/81 [04:29<06:40,  7.55s/it] 36%|███████████████▍                           | 29/81 [04:35<06:03,  6.99s/it] 37%|███████████████▉                           | 30/81 [04:42<06:01,  7.09s/it] 38%|████████████████▍                          | 31/81 [04:52<06:33,  7.88s/it] 40%|████████████████▉                          | 32/81 [04:57<05:45,  7.05s/it] 41%|█████████████████▌                         | 33/81 [05:01<04:54,  6.14s/it] 42%|██████████████████                         | 34/81 [05:07<04:39,  5.95s/it] 43%|██████████████████▌                        | 35/81 [05:11<04:04,  5.32s/it] 44%|███████████████████                        | 36/81 [05:16<04:05,  5.45s/it] 46%|███████████████████▋                       | 37/81 [05:21<03:54,  5.33s/it] 47%|████████████████████▏                      | 38/81 [05:27<03:56,  5.51s/it] 48%|████████████████████▋                      | 39/81 [05:32<03:34,  5.11s/it] 49%|█████████████████████▏                     | 40/81 [05:40<04:11,  6.13s/it] 51%|█████████████████████▊                     | 41/81 [05:48<04:27,  6.69s/it] 52%|██████████████████████▎                    | 42/81 [05:51<03:40,  5.65s/it] 53%|██████████████████████▊                    | 43/81 [05:58<03:50,  6.06s/it] 54%|███████████████████████▎                   | 44/81 [06:02<03:19,  5.39s/it] 56%|███████████████████████▉                   | 45/81 [06:06<03:00,  5.01s/it] 57%|████████████████████████▍                  | 46/81 [06:12<03:01,  5.20s/it] 58%|████████████████████████▉                  | 47/81 [06:19<03:15,  5.76s/it] 59%|█████████████████████████▍                 | 48/81 [06:27<03:33,  6.46s/it] 60%|██████████████████████████                 | 49/81 [06:31<03:03,  5.74s/it] 62%|██████████████████████████▌                | 50/81 [06:37<03:01,  5.86s/it] 63%|███████████████████████████                | 51/81 [06:44<03:07,  6.26s/it] 64%|███████████████████████████▌               | 52/81 [06:51<03:07,  6.47s/it] 65%|████████████████████████████▏              | 53/81 [06:55<02:37,  5.64s/it] 67%|████████████████████████████▋              | 54/81 [06:59<02:15,  5.00s/it] 68%|█████████████████████████████▏             | 55/81 [07:10<02:57,  6.83s/it] 69%|█████████████████████████████▋             | 56/81 [07:18<03:01,  7.27s/it] 70%|██████████████████████████████▎            | 57/81 [07:26<02:57,  7.38s/it] 72%|██████████████████████████████▊            | 58/81 [07:33<02:51,  7.47s/it] 73%|███████████████████████████████▎           | 59/81 [07:42<02:54,  7.94s/it] 74%|███████████████████████████████▊           | 60/81 [07:53<03:01,  8.65s/it] 75%|████████████████████████████████▍          | 61/81 [07:58<02:31,  7.55s/it] 77%|████████████████████████████████▉          | 62/81 [08:02<02:05,  6.60s/it] 78%|█████████████████████████████████▍         | 63/81 [08:07<01:49,  6.06s/it] 79%|█████████████████████████████████▉         | 64/81 [08:17<02:05,  7.37s/it] 80%|██████████████████████████████████▌        | 65/81 [08:29<02:18,  8.67s/it] 81%|███████████████████████████████████        | 66/81 [08:35<01:58,  7.87s/it] 83%|███████████████████████████████████▌       | 67/81 [08:45<02:00,  8.58s/it] 84%|████████████████████████████████████       | 68/81 [08:56<01:59,  9.21s/it] 85%|████████████████████████████████████▋      | 69/81 [09:03<01:42,  8.54s/it] 86%|█████████████████████████████████████▏     | 70/81 [09:08<01:21,  7.39s/it] 88%|█████████████████████████████████████▋     | 71/81 [09:13<01:07,  6.72s/it] 89%|██████████████████████████████████████▏    | 72/81 [09:19<00:58,  6.53s/it] 90%|██████████████████████████████████████▊    | 73/81 [09:28<00:58,  7.28s/it] 91%|███████████████████████████████████████▎   | 74/81 [09:34<00:48,  7.00s/it] 93%|███████████████████████████████████████▊   | 75/81 [09:41<00:41,  6.98s/it] 94%|████████████████████████████████████████▎  | 76/81 [09:49<00:36,  7.26s/it] 95%|████████████████████████████████████████▉  | 77/81 [09:56<00:28,  7.04s/it] 96%|█████████████████████████████████████████▍ | 78/81 [10:04<00:22,  7.43s/it] 98%|█████████████████████████████████████████▉ | 79/81 [10:10<00:14,  7.08s/it] 99%|██████████████████████████████████████████▍| 80/81 [10:15<00:06,  6.34s/it]100%|███████████████████████████████████████████| 81/81 [10:19<00:00,  5.80s/it]100%|███████████████████████████████████████████| 81/81 [10:19<00:00,  7.65s/it]
n of data transformed:  81
Processing analysis pass: att_roll_layer_matrix
Found 135 files to process.
Found 54 files already processed. Skippign them.
Removing Nqueens_Q1.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Processing 81 files.
Starting to derive attention for 81 files...
Args: [('multithread_Q1.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('multithread_Q1.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('multithread_Q1.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('multithread_Q1.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('multithread_Q1.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('multithread_Q1.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('multithread_Q1.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('multithread_Q1.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('multithread_Q1.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('multithread_Q2.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('multithread_Q2.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('multithread_Q2.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('multithread_Q2.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('multithread_Q2.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('multithread_Q2.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('multithread_Q2.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('multithread_Q2.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('multithread_Q2.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('multithread_Q3.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('multithread_Q3.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('multithread_Q3.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('multithread_Q3.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('multithread_Q3.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('multithread_Q3.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('multithread_Q3.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('multithread_Q3.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('multithread_Q3.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('tree_Q1.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('tree_Q1.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('tree_Q1.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('tree_Q1.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('tree_Q1.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('tree_Q1.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('tree_Q1.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('tree_Q1.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('tree_Q1.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('tree_Q2.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('tree_Q2.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('tree_Q2.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('tree_Q2.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('tree_Q2.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('tree_Q2.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('tree_Q2.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('tree_Q2.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('tree_Q2.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('tree_Q3.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('tree_Q3.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('tree_Q3.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('tree_Q3.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('tree_Q3.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('tree_Q3.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('tree_Q3.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('tree_Q3.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('tree_Q3.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('triangle_Q1.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('triangle_Q1.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('triangle_Q1.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('triangle_Q1.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('triangle_Q1.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('triangle_Q1.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('triangle_Q1.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('triangle_Q1.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('triangle_Q1.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('triangle_Q2.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('triangle_Q2.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('triangle_Q2.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('triangle_Q2.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('triangle_Q2.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('triangle_Q2.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('triangle_Q2.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('triangle_Q2.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('triangle_Q2.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('triangle_Q3.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('triangle_Q3.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('triangle_Q3.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('triangle_Q3.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('triangle_Q3.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('triangle_Q3.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('triangle_Q3.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('triangle_Q3.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>), ('triangle_Q3.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', {}, <function compute_attention_rollout_from_tensor at 0x7ff9966e7b80>)]
  0%|                                                    | 0/81 [00:00<?, ?it/s]  1%|▌                                        | 1/81 [02:00<2:41:18, 120.98s/it]  2%|█                                        | 2/81 [03:49<2:29:48, 113.77s/it]  4%|█▌                                       | 3/81 [05:29<2:19:31, 107.33s/it]  5%|██                                        | 4/81 [06:54<2:06:32, 98.60s/it]  6%|██▌                                       | 5/81 [08:25<2:01:28, 95.90s/it]  7%|███                                       | 6/81 [10:00<1:59:25, 95.55s/it]  9%|███▋                                      | 7/81 [11:16<1:49:53, 89.10s/it] 10%|████▏                                     | 8/81 [12:53<1:51:38, 91.76s/it] 11%|████▋                                     | 9/81 [14:31<1:52:25, 93.68s/it] 12%|█████                                    | 10/81 [16:02<1:49:36, 92.62s/it] 14%|█████▌                                   | 11/81 [17:28<1:46:00, 90.87s/it] 15%|██████                                   | 12/81 [18:51<1:41:35, 88.35s/it] 16%|██████▌                                  | 13/81 [20:05<1:35:21, 84.14s/it] 17%|███████                                  | 14/81 [22:01<1:44:31, 93.60s/it] 19%|███████▌                                 | 15/81 [23:27<1:40:27, 91.32s/it] 20%|████████                                 | 16/81 [24:32<1:30:30, 83.55s/it] 21%|████████▌                                | 17/81 [25:49<1:26:50, 81.42s/it] 22%|█████████                                | 18/81 [27:11<1:25:39, 81.58s/it] 23%|█████████▌                               | 19/81 [28:48<1:29:00, 86.14s/it] 25%|██████████                               | 20/81 [30:36<1:34:13, 92.68s/it] 26%|██████████▎                             | 21/81 [32:38<1:41:29, 101.49s/it] 27%|███████████▏                             | 22/81 [34:04<1:35:19, 96.94s/it] 28%|███████████▋                             | 23/81 [35:28<1:30:07, 93.23s/it] 30%|████████████▏                            | 24/81 [37:02<1:28:38, 93.31s/it] 31%|████████████▋                            | 25/81 [38:29<1:25:11, 91.28s/it] 32%|█████████████▏                           | 26/81 [39:48<1:20:17, 87.60s/it] 33%|█████████████▋                           | 27/81 [41:08<1:16:57, 85.51s/it] 35%|██████████████▏                          | 28/81 [42:28<1:14:07, 83.92s/it] 36%|██████████████▋                          | 29/81 [43:44<1:10:32, 81.39s/it] 37%|███████████████▏                         | 30/81 [44:51<1:05:29, 77.04s/it] 38%|███████████████▋                         | 31/81 [46:09<1:04:34, 77.48s/it] 40%|████████████████▏                        | 32/81 [47:17<1:00:50, 74.50s/it] 41%|█████████████████▌                         | 33/81 [48:30<59:16, 74.10s/it] 42%|██████████████████                         | 34/81 [49:38<56:33, 72.20s/it] 43%|██████████████████▌                        | 35/81 [50:40<53:08, 69.31s/it] 44%|███████████████████                        | 36/81 [51:43<50:24, 67.21s/it] 46%|███████████████████▋                       | 37/81 [52:57<50:51, 69.35s/it] 47%|████████████████████▏                      | 38/81 [54:15<51:40, 72.09s/it] 48%|████████████████████▋                      | 39/81 [55:16<47:56, 68.50s/it] 49%|█████████████████████▏                     | 40/81 [56:24<46:43, 68.38s/it] 51%|█████████████████████▊                     | 41/81 [57:21<43:21, 65.03s/it] 52%|██████████████████████▎                    | 42/81 [58:22<41:35, 63.99s/it] 53%|██████████████████████▊                    | 43/81 [59:37<42:27, 67.05s/it] 54%|██████████████████████▎                  | 44/81 [1:00:37<40:09, 65.12s/it] 56%|██████████████████████▊                  | 45/81 [1:01:35<37:49, 63.03s/it] 57%|███████████████████████▎                 | 46/81 [1:02:51<38:59, 66.84s/it] 58%|███████████████████████▊                 | 47/81 [1:03:56<37:27, 66.11s/it] 59%|████████████████████████▎                | 48/81 [1:05:06<37:03, 67.38s/it] 60%|████████████████████████▊                | 49/81 [1:06:10<35:25, 66.41s/it] 62%|█████████████████████████▎               | 50/81 [1:07:30<36:26, 70.53s/it] 63%|█████████████████████████▊               | 51/81 [1:08:32<33:59, 67.98s/it] 64%|██████████████████████████▎              | 52/81 [1:09:33<31:47, 65.77s/it] 65%|██████████████████████████▊              | 53/81 [1:10:27<29:07, 62.42s/it] 67%|███████████████████████████▎             | 54/81 [1:11:23<27:12, 60.46s/it] 68%|███████████████████████████▊             | 55/81 [1:12:32<27:18, 63.04s/it] 69%|████████████████████████████▎            | 56/81 [1:13:52<28:23, 68.13s/it] 70%|████████████████████████████▊            | 57/81 [1:15:11<28:28, 71.18s/it] 72%|█████████████████████████████▎           | 58/81 [1:16:20<27:03, 70.59s/it] 73%|█████████████████████████████▊           | 59/81 [1:17:41<27:04, 73.85s/it] 74%|██████████████████████████████▎          | 60/81 [1:18:46<24:52, 71.08s/it] 75%|██████████████████████████████▉          | 61/81 [1:19:57<23:41, 71.07s/it] 77%|███████████████████████████████▍         | 62/81 [1:21:12<22:53, 72.28s/it] 78%|███████████████████████████████▉         | 63/81 [1:22:12<20:33, 68.54s/it] 79%|████████████████████████████████▍        | 64/81 [1:23:19<19:19, 68.23s/it] 80%|████████████████████████████████▉        | 65/81 [1:24:34<18:41, 70.10s/it] 81%|█████████████████████████████████▍       | 66/81 [1:25:51<18:00, 72.06s/it] 83%|█████████████████████████████████▉       | 67/81 [1:27:15<17:39, 75.64s/it] 84%|██████████████████████████████████▍      | 68/81 [1:28:55<18:00, 83.15s/it] 85%|██████████████████████████████████▉      | 69/81 [1:30:26<17:05, 85.43s/it] 86%|███████████████████████████████████▍     | 70/81 [1:31:54<15:47, 86.17s/it] 88%|███████████████████████████████████▉     | 71/81 [1:33:30<14:51, 89.17s/it] 89%|████████████████████████████████████▍    | 72/81 [1:35:05<13:37, 90.79s/it] 90%|████████████████████████████████████▉    | 73/81 [1:36:40<12:17, 92.21s/it] 91%|████████████████████████████████████▌   | 74/81 [1:38:40<11:43, 100.54s/it] 93%|█████████████████████████████████████   | 75/81 [1:40:31<10:22, 103.68s/it] 94%|█████████████████████████████████████▌  | 76/81 [1:42:24<08:51, 106.34s/it] 95%|██████████████████████████████████████  | 77/81 [1:44:32<07:31, 112.90s/it] 96%|██████████████████████████████████████▌ | 78/81 [1:46:52<06:03, 121.16s/it] 98%|███████████████████████████████████████ | 79/81 [1:48:23<03:43, 111.99s/it] 99%|███████████████████████████████████████▌| 80/81 [1:50:11<01:50, 110.72s/it]100%|████████████████████████████████████████| 81/81 [1:52:09<00:00, 112.93s/it]100%|█████████████████████████████████████████| 81/81 [1:52:09<00:00, 83.08s/it]
n of data transformed:  81
Processing analysis pass: rollout_condensed_all
Found 135 files to process.
Found 54 files already processed. Skippign them.
Removing Nqueens_Q1.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Processing 81 files.
Starting to derive attention for 81 files...
Args: [('multithread_Q1.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('multithread_Q1.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('multithread_Q1.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('multithread_Q1.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('multithread_Q1.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('multithread_Q1.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('multithread_Q1.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('multithread_Q1.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('multithread_Q1.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('multithread_Q2.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('multithread_Q2.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('multithread_Q2.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('multithread_Q2.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('multithread_Q2.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('multithread_Q2.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('multithread_Q2.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('multithread_Q2.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('multithread_Q2.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('multithread_Q3.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('multithread_Q3.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('multithread_Q3.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('multithread_Q3.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('multithread_Q3.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('multithread_Q3.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('multithread_Q3.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('multithread_Q3.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('multithread_Q3.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('tree_Q1.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('tree_Q1.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('tree_Q1.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('tree_Q1.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('tree_Q1.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('tree_Q1.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('tree_Q1.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('tree_Q1.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('tree_Q1.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('tree_Q2.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('tree_Q2.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('tree_Q2.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('tree_Q2.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('tree_Q2.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('tree_Q2.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('tree_Q2.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('tree_Q2.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('tree_Q2.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('tree_Q3.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('tree_Q3.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('tree_Q3.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('tree_Q3.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('tree_Q3.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('tree_Q3.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('tree_Q3.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('tree_Q3.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('tree_Q3.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('triangle_Q1.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('triangle_Q1.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('triangle_Q1.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('triangle_Q1.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('triangle_Q1.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('triangle_Q1.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('triangle_Q1.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('triangle_Q1.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('triangle_Q1.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('triangle_Q2.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('triangle_Q2.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('triangle_Q2.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('triangle_Q2.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('triangle_Q2.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('triangle_Q2.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('triangle_Q2.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('triangle_Q2.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('triangle_Q2.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('triangle_Q3.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('triangle_Q3.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('triangle_Q3.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('triangle_Q3.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('triangle_Q3.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('triangle_Q3.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('triangle_Q3.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('triangle_Q3.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>), ('triangle_Q3.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_roll_layer_matrix', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/rollout_condensed_all', {}, <function sum_over_1st_dimension at 0x7ff9966e7c10>)]
  0%|                                                    | 0/81 [00:00<?, ?it/s]  1%|▌                                           | 1/81 [00:30<41:10, 30.88s/it]  2%|█                                           | 2/81 [01:05<43:52, 33.32s/it]  4%|█▌                                        | 3/81 [02:52<1:26:55, 66.86s/it]  5%|██                                        | 4/81 [03:25<1:08:27, 53.35s/it]  6%|██▋                                         | 5/81 [03:54<56:28, 44.59s/it]  7%|███▎                                        | 6/81 [04:21<48:26, 38.75s/it]  9%|███▊                                        | 7/81 [04:58<47:02, 38.14s/it] 10%|████▎                                       | 8/81 [05:36<46:26, 38.18s/it] 11%|████▉                                       | 9/81 [06:18<47:16, 39.39s/it] 12%|█████▎                                     | 10/81 [07:03<48:38, 41.10s/it] 14%|█████▊                                     | 11/81 [07:42<46:57, 40.25s/it] 15%|██████▎                                    | 12/81 [08:15<43:57, 38.23s/it] 16%|██████▉                                    | 13/81 [08:38<38:01, 33.55s/it] 17%|███████▍                                   | 14/81 [09:06<35:37, 31.90s/it] 19%|███████▉                                   | 15/81 [09:36<34:21, 31.23s/it] 20%|████████▍                                  | 16/81 [10:01<31:51, 29.42s/it] 21%|█████████                                  | 17/81 [10:29<30:55, 28.99s/it] 22%|█████████▌                                 | 18/81 [10:53<28:46, 27.40s/it] 23%|██████████                                 | 19/81 [11:13<25:57, 25.13s/it] 25%|██████████▌                                | 20/81 [11:49<28:53, 28.43s/it] 26%|███████████▏                               | 21/81 [12:21<29:29, 29.49s/it] 27%|███████████▋                               | 22/81 [12:45<27:19, 27.79s/it] 28%|████████████▏                              | 23/81 [13:09<26:02, 26.93s/it] 30%|████████████▋                              | 24/81 [13:26<22:36, 23.80s/it] 31%|█████████████▎                             | 25/81 [13:47<21:25, 22.95s/it] 32%|█████████████▊                             | 26/81 [14:01<18:35, 20.27s/it] 33%|██████████████▎                            | 27/81 [14:20<17:47, 19.77s/it] 35%|██████████████▊                            | 28/81 [14:33<15:46, 17.86s/it] 36%|███████████████▍                           | 29/81 [14:48<14:47, 17.07s/it] 37%|███████████████▉                           | 30/81 [15:06<14:37, 17.20s/it] 38%|████████████████▍                          | 31/81 [15:16<12:32, 15.05s/it] 40%|████████████████▉                          | 32/81 [15:27<11:21, 13.90s/it] 41%|█████████████████▌                         | 33/81 [15:42<11:29, 14.36s/it] 42%|██████████████████                         | 34/81 [15:57<11:19, 14.45s/it] 43%|██████████████████▌                        | 35/81 [16:08<10:17, 13.42s/it] 44%|███████████████████                        | 36/81 [16:19<09:24, 12.55s/it] 46%|███████████████████▋                       | 37/81 [16:35<10:02, 13.69s/it] 47%|████████████████████▏                      | 38/81 [16:46<09:15, 12.92s/it] 48%|████████████████████▋                      | 39/81 [16:56<08:27, 12.07s/it] 49%|█████████████████████▏                     | 40/81 [17:14<09:21, 13.71s/it] 51%|█████████████████████▊                     | 41/81 [17:27<09:07, 13.69s/it] 52%|██████████████████████▎                    | 42/81 [17:43<09:20, 14.37s/it] 53%|██████████████████████▊                    | 43/81 [17:57<08:53, 14.05s/it] 54%|███████████████████████▎                   | 44/81 [18:07<07:58, 12.93s/it] 56%|███████████████████████▉                   | 45/81 [18:17<07:18, 12.18s/it] 57%|████████████████████████▍                  | 46/81 [18:29<07:04, 12.13s/it] 58%|████████████████████████▉                  | 47/81 [18:42<06:59, 12.34s/it] 59%|█████████████████████████▍                 | 48/81 [18:53<06:35, 11.99s/it] 60%|██████████████████████████                 | 49/81 [19:09<07:02, 13.22s/it] 62%|██████████████████████████▌                | 50/81 [19:26<07:20, 14.20s/it] 63%|███████████████████████████                | 51/81 [19:39<06:57, 13.91s/it] 64%|███████████████████████████▌               | 52/81 [19:49<06:09, 12.74s/it] 65%|████████████████████████████▏              | 53/81 [19:58<05:22, 11.52s/it] 67%|████████████████████████████▋              | 54/81 [20:09<05:06, 11.36s/it] 68%|█████████████████████████████▏             | 55/81 [20:22<05:07, 11.81s/it] 69%|█████████████████████████████▋             | 56/81 [20:46<06:28, 15.53s/it] 70%|██████████████████████████████▎            | 57/81 [21:08<07:00, 17.53s/it] 72%|██████████████████████████████▊            | 58/81 [21:22<06:21, 16.57s/it] 73%|███████████████████████████████▎           | 59/81 [21:47<06:58, 19.02s/it] 74%|███████████████████████████████▊           | 60/81 [22:00<05:58, 17.08s/it] 75%|████████████████████████████████▍          | 61/81 [22:10<05:02, 15.14s/it] 77%|████████████████████████████████▉          | 62/81 [22:22<04:26, 14.05s/it] 78%|█████████████████████████████████▍         | 63/81 [22:37<04:18, 14.38s/it] 79%|█████████████████████████████████▉         | 64/81 [22:59<04:44, 16.71s/it] 80%|██████████████████████████████████▌        | 65/81 [23:22<04:56, 18.51s/it] 81%|███████████████████████████████████        | 66/81 [23:40<04:38, 18.54s/it] 83%|███████████████████████████████████▌       | 67/81 [24:04<04:39, 19.97s/it] 84%|████████████████████████████████████       | 68/81 [24:27<04:33, 21.04s/it] 85%|████████████████████████████████████▋      | 69/81 [24:47<04:06, 20.54s/it] 86%|█████████████████████████████████████▏     | 70/81 [24:57<03:12, 17.54s/it] 88%|█████████████████████████████████████▋     | 71/81 [25:12<02:45, 16.58s/it] 89%|██████████████████████████████████████▏    | 72/81 [25:24<02:19, 15.45s/it] 90%|██████████████████████████████████████▊    | 73/81 [25:45<02:16, 17.02s/it] 91%|███████████████████████████████████████▎   | 74/81 [25:57<01:49, 15.65s/it] 93%|███████████████████████████████████████▊   | 75/81 [26:27<01:58, 19.69s/it] 94%|████████████████████████████████████████▎  | 76/81 [26:47<01:40, 20.02s/it] 95%|████████████████████████████████████████▉  | 77/81 [27:10<01:23, 20.77s/it] 96%|█████████████████████████████████████████▍ | 78/81 [27:31<01:03, 21.01s/it] 98%|█████████████████████████████████████████▉ | 79/81 [27:49<00:40, 20.10s/it] 99%|██████████████████████████████████████████▍| 80/81 [28:16<00:21, 21.94s/it]100%|███████████████████████████████████████████| 81/81 [28:32<00:00, 20.14s/it]100%|███████████████████████████████████████████| 81/81 [28:32<00:00, 21.14s/it]
n of data transformed:  81
Processing analysis pass: att_uniform_matrix
Found 135 files to process.
Found 54 files already processed. Skippign them.
Removing Nqueens_Q1.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q1.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q2.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing Nqueens_Q3.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q1.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q2.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cpp_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cpp_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cpp_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cs_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cs_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.cs_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.py_0_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.py_1_Salesforce_codegen-6B-multi.npy from the list of files to process.
Removing hannoi_Q3.py_2_Salesforce_codegen-6B-multi.npy from the list of files to process.
Processing 81 files.
Starting to derive attention for 81 files...
Args: [('multithread_Q1.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('multithread_Q1.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('multithread_Q1.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('multithread_Q1.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('multithread_Q1.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('multithread_Q1.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('multithread_Q1.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('multithread_Q1.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('multithread_Q1.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('multithread_Q2.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('multithread_Q2.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('multithread_Q2.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('multithread_Q2.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('multithread_Q2.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('multithread_Q2.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('multithread_Q2.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('multithread_Q2.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('multithread_Q2.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('multithread_Q3.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('multithread_Q3.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('multithread_Q3.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('multithread_Q3.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('multithread_Q3.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('multithread_Q3.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('multithread_Q3.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('multithread_Q3.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('multithread_Q3.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('tree_Q1.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('tree_Q1.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('tree_Q1.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('tree_Q1.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('tree_Q1.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('tree_Q1.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('tree_Q1.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('tree_Q1.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('tree_Q1.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('tree_Q2.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('tree_Q2.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('tree_Q2.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('tree_Q2.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('tree_Q2.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('tree_Q2.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('tree_Q2.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('tree_Q2.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('tree_Q2.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('tree_Q3.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('tree_Q3.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('tree_Q3.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('tree_Q3.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('tree_Q3.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('tree_Q3.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('tree_Q3.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('tree_Q3.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('tree_Q3.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('triangle_Q1.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('triangle_Q1.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('triangle_Q1.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('triangle_Q1.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('triangle_Q1.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('triangle_Q1.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('triangle_Q1.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('triangle_Q1.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('triangle_Q1.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('triangle_Q2.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('triangle_Q2.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('triangle_Q2.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('triangle_Q2.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('triangle_Q2.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('triangle_Q2.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('triangle_Q2.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('triangle_Q2.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('triangle_Q2.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('triangle_Q3.cpp_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('triangle_Q3.cpp_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('triangle_Q3.cpp_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('triangle_Q3.cs_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('triangle_Q3.cs_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('triangle_Q3.cs_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('triangle_Q3.py_0_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('triangle_Q3.py_1_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>), ('triangle_Q3.py_2_Salesforce_codegen-6B-multi.npy', 'data/model_output/exp_v10/codegen6B_rebuttal/att_tensor', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_uniform_matrix', {}, <function generate_uniform_attention at 0x7ff996674700>)]
  0%|                                                    | 0/81 [00:00<?, ?it/s]  1%|▌                                         | 1/81 [00:49<1:05:31, 49.14s/it]  2%|█                                         | 2/81 [01:43<1:09:02, 52.44s/it]  4%|█▌                                        | 3/81 [02:51<1:17:12, 59.40s/it]  5%|██                                        | 4/81 [03:26<1:04:04, 49.92s/it]  6%|██▋                                         | 5/81 [03:58<55:00, 43.43s/it]  7%|███▎                                        | 6/81 [04:41<53:48, 43.04s/it]  9%|███▊                                        | 7/81 [05:24<53:22, 43.27s/it] 10%|████▎                                       | 8/81 [06:21<57:57, 47.64s/it] 11%|████▉                                       | 9/81 [07:14<58:57, 49.13s/it] 12%|█████                                    | 10/81 [08:11<1:01:06, 51.64s/it] 14%|█████▌                                   | 11/81 [09:53<1:18:12, 67.04s/it] 15%|██████                                   | 12/81 [10:43<1:11:05, 61.81s/it] 16%|██████▌                                  | 13/81 [11:17<1:00:24, 53.31s/it] 17%|███████▍                                   | 14/81 [12:00<56:20, 50.45s/it] 19%|███████▉                                   | 15/81 [12:43<52:59, 48.17s/it] 20%|████████▍                                  | 16/81 [13:07<44:12, 40.80s/it] 21%|█████████                                  | 17/81 [13:41<41:10, 38.60s/it] 22%|█████████▌                                 | 18/81 [14:17<39:48, 37.92s/it] 23%|██████████                                 | 19/81 [14:55<39:22, 38.10s/it] 25%|██████████▌                                | 20/81 [15:31<37:56, 37.32s/it] 26%|███████████▏                               | 21/81 [16:06<36:47, 36.80s/it] 27%|███████████▋                               | 22/81 [16:29<31:54, 32.45s/it] 28%|████████████▏                              | 23/81 [17:04<32:05, 33.20s/it] 30%|████████████▋                              | 24/81 [17:36<31:13, 32.87s/it] 31%|█████████████▎                             | 25/81 [18:03<29:02, 31.12s/it] 32%|█████████████▊                             | 26/81 [18:29<27:14, 29.72s/it] 33%|██████████████▎                            | 27/81 [19:05<28:25, 31.59s/it] 35%|██████████████▊                            | 28/81 [19:27<25:21, 28.70s/it] 36%|███████████████▍                           | 29/81 [19:49<23:04, 26.62s/it] 37%|███████████████▉                           | 30/81 [20:17<22:53, 26.93s/it] 38%|████████████████▍                          | 31/81 [20:33<19:46, 23.74s/it] 40%|████████████████▉                          | 32/81 [20:52<18:11, 22.27s/it] 41%|█████████████████▌                         | 33/81 [21:22<19:38, 24.55s/it] 42%|██████████████████                         | 34/81 [21:38<17:22, 22.17s/it] 43%|██████████████████▌                        | 35/81 [22:02<17:17, 22.55s/it] 44%|███████████████████                        | 36/81 [22:20<15:56, 21.26s/it] 46%|███████████████████▋                       | 37/81 [22:55<18:40, 25.46s/it] 47%|████████████████████▏                      | 38/81 [23:19<17:48, 24.86s/it] 48%|████████████████████▋                      | 39/81 [23:51<18:59, 27.14s/it] 49%|█████████████████████▏                     | 40/81 [24:22<19:16, 28.20s/it] 51%|█████████████████████▊                     | 41/81 [24:48<18:24, 27.62s/it] 52%|██████████████████████▎                    | 42/81 [25:11<17:02, 26.21s/it] 53%|██████████████████████▊                    | 43/81 [25:39<16:56, 26.75s/it] 54%|███████████████████████▎                   | 44/81 [25:56<14:43, 23.88s/it] 56%|███████████████████████▉                   | 45/81 [26:19<14:09, 23.61s/it] 57%|████████████████████████▍                  | 46/81 [26:55<15:50, 27.15s/it] 58%|████████████████████████▉                  | 47/81 [27:40<18:26, 32.53s/it] 59%|█████████████████████████▍                 | 48/81 [28:19<18:57, 34.48s/it] 60%|██████████████████████████                 | 49/81 [29:02<19:51, 37.25s/it] 62%|██████████████████████████▌                | 50/81 [29:41<19:26, 37.62s/it] 63%|███████████████████████████                | 51/81 [30:14<18:06, 36.22s/it] 64%|███████████████████████████▌               | 52/81 [30:41<16:11, 33.50s/it] 65%|████████████████████████████▏              | 53/81 [31:02<13:53, 29.77s/it] 67%|████████████████████████████▋              | 54/81 [31:24<12:22, 27.51s/it] 68%|█████████████████████████████▏             | 55/81 [32:34<17:28, 40.32s/it] 69%|█████████████████████████████▋             | 56/81 [33:24<17:56, 43.05s/it] 70%|██████████████████████████████▎            | 57/81 [34:18<18:30, 46.29s/it] 72%|██████████████████████████████▊            | 58/81 [35:04<17:41, 46.16s/it] 73%|███████████████████████████████▎           | 59/81 [35:51<17:02, 46.47s/it] 74%|███████████████████████████████▊           | 60/81 [36:27<15:12, 43.44s/it] 75%|████████████████████████████████▍          | 61/81 [36:52<12:37, 37.88s/it] 77%|████████████████████████████████▉          | 62/81 [37:17<10:47, 34.08s/it] 78%|█████████████████████████████████▍         | 63/81 [37:41<09:17, 30.95s/it] 79%|█████████████████████████████████▉         | 64/81 [38:18<09:18, 32.84s/it] 80%|██████████████████████████████████▌        | 65/81 [38:59<09:22, 35.18s/it] 81%|███████████████████████████████████        | 66/81 [39:40<09:14, 36.94s/it] 83%|███████████████████████████████████▌       | 67/81 [40:25<09:10, 39.32s/it] 84%|████████████████████████████████████       | 68/81 [41:07<08:41, 40.12s/it] 85%|████████████████████████████████████▋      | 69/81 [41:51<08:17, 41.49s/it] 86%|█████████████████████████████████████▏     | 70/81 [42:21<06:57, 37.91s/it] 88%|█████████████████████████████████████▋     | 71/81 [42:50<05:51, 35.17s/it] 89%|██████████████████████████████████████▏    | 72/81 [43:18<04:56, 32.96s/it] 90%|██████████████████████████████████████▊    | 73/81 [43:57<04:39, 34.89s/it] 91%|███████████████████████████████████████▎   | 74/81 [44:28<03:56, 33.85s/it] 93%|███████████████████████████████████████▊   | 75/81 [45:21<03:57, 39.59s/it] 94%|████████████████████████████████████████▎  | 76/81 [45:57<03:11, 38.38s/it] 95%|████████████████████████████████████████▉  | 77/81 [46:37<02:35, 38.94s/it] 96%|█████████████████████████████████████████▍ | 78/81 [47:23<02:03, 41.11s/it] 98%|█████████████████████████████████████████▉ | 79/81 [47:48<01:12, 36.21s/it] 99%|██████████████████████████████████████████▍| 80/81 [48:20<00:35, 35.05s/it]100%|███████████████████████████████████████████| 81/81 [48:44<00:00, 31.54s/it]100%|███████████████████████████████████████████| 81/81 [48:44<00:00, 36.10s/it]
n of data transformed:  81
Processing analysis pass: att_copy_cat_matrix
Found 135 files to process.
Found 0 files already processed. Skippign them.
Processing 135 files.
Starting to derive attention for 135 files...
Args: [('Nqueens_Q1.cpp_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('Nqueens_Q1.cpp_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('Nqueens_Q1.cpp_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('Nqueens_Q1.cs_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('Nqueens_Q1.cs_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('Nqueens_Q1.cs_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('Nqueens_Q1.py_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('Nqueens_Q1.py_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('Nqueens_Q1.py_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('Nqueens_Q2.cpp_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('Nqueens_Q2.cpp_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('Nqueens_Q2.cpp_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('Nqueens_Q2.cs_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('Nqueens_Q2.cs_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('Nqueens_Q2.cs_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('Nqueens_Q2.py_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('Nqueens_Q2.py_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('Nqueens_Q2.py_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('Nqueens_Q3.cpp_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('Nqueens_Q3.cpp_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('Nqueens_Q3.cpp_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('Nqueens_Q3.cs_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('Nqueens_Q3.cs_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('Nqueens_Q3.cs_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('Nqueens_Q3.py_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('Nqueens_Q3.py_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('Nqueens_Q3.py_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('hannoi_Q1.cpp_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('hannoi_Q1.cpp_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('hannoi_Q1.cpp_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('hannoi_Q1.cs_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('hannoi_Q1.cs_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('hannoi_Q1.cs_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('hannoi_Q1.py_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('hannoi_Q1.py_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('hannoi_Q1.py_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('hannoi_Q2.cpp_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('hannoi_Q2.cpp_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('hannoi_Q2.cpp_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('hannoi_Q2.cs_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('hannoi_Q2.cs_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('hannoi_Q2.cs_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('hannoi_Q2.py_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('hannoi_Q2.py_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('hannoi_Q2.py_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('hannoi_Q3.cpp_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('hannoi_Q3.cpp_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('hannoi_Q3.cpp_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('hannoi_Q3.cs_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('hannoi_Q3.cs_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('hannoi_Q3.cs_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('hannoi_Q3.py_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('hannoi_Q3.py_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('hannoi_Q3.py_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('multithread_Q1.cpp_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('multithread_Q1.cpp_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('multithread_Q1.cpp_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('multithread_Q1.cs_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('multithread_Q1.cs_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('multithread_Q1.cs_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('multithread_Q1.py_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('multithread_Q1.py_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('multithread_Q1.py_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('multithread_Q2.cpp_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('multithread_Q2.cpp_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('multithread_Q2.cpp_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('multithread_Q2.cs_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('multithread_Q2.cs_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('multithread_Q2.cs_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('multithread_Q2.py_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('multithread_Q2.py_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('multithread_Q2.py_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('multithread_Q3.cpp_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('multithread_Q3.cpp_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('multithread_Q3.cpp_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('multithread_Q3.cs_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('multithread_Q3.cs_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('multithread_Q3.cs_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('multithread_Q3.py_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('multithread_Q3.py_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('multithread_Q3.py_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('tree_Q1.cpp_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('tree_Q1.cpp_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('tree_Q1.cpp_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('tree_Q1.cs_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('tree_Q1.cs_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('tree_Q1.cs_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('tree_Q1.py_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('tree_Q1.py_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('tree_Q1.py_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('tree_Q2.cpp_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('tree_Q2.cpp_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('tree_Q2.cpp_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('tree_Q2.cs_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('tree_Q2.cs_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('tree_Q2.cs_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('tree_Q2.py_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('tree_Q2.py_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('tree_Q2.py_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('tree_Q3.cpp_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('tree_Q3.cpp_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('tree_Q3.cpp_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('tree_Q3.cs_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('tree_Q3.cs_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('tree_Q3.cs_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('tree_Q3.py_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('tree_Q3.py_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('tree_Q3.py_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('triangle_Q1.cpp_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('triangle_Q1.cpp_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('triangle_Q1.cpp_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('triangle_Q1.cs_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('triangle_Q1.cs_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('triangle_Q1.cs_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('triangle_Q1.py_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('triangle_Q1.py_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('triangle_Q1.py_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('triangle_Q2.cpp_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('triangle_Q2.cpp_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('triangle_Q2.cpp_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('triangle_Q2.cs_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('triangle_Q2.cs_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('triangle_Q2.cs_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('triangle_Q2.py_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('triangle_Q2.py_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('triangle_Q2.py_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('triangle_Q3.cpp_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('triangle_Q3.cpp_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('triangle_Q3.cpp_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('triangle_Q3.cs_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('triangle_Q3.cs_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('triangle_Q3.cs_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('triangle_Q3.py_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('triangle_Q3.py_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>), ('triangle_Q3.py_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_copy_cat_matrix', {}, <function generate_copy_cat_attention at 0x7ff9966748b0>)]
  0%|                                                   | 0/135 [00:00<?, ?it/s]  1%|▎                                          | 1/135 [00:19<43:08, 19.32s/it]  1%|▋                                          | 2/135 [00:35<38:44, 17.48s/it]  2%|▉                                          | 3/135 [00:54<40:20, 18.33s/it]  3%|█▎                                         | 4/135 [01:11<38:47, 17.77s/it]  4%|█▌                                         | 5/135 [01:31<40:03, 18.49s/it]  4%|█▉                                         | 6/135 [01:43<34:38, 16.11s/it]  5%|██▏                                        | 7/135 [01:53<30:20, 14.22s/it]  6%|██▌                                        | 8/135 [02:01<25:42, 12.14s/it]  7%|██▊                                        | 9/135 [02:08<22:23, 10.66s/it]  7%|███                                       | 10/135 [02:20<23:06, 11.10s/it]  8%|███▍                                      | 11/135 [02:30<22:22, 10.83s/it]  9%|███▋                                      | 12/135 [02:43<23:06, 11.27s/it] 10%|████                                      | 13/135 [02:53<22:31, 11.07s/it] 10%|████▎                                     | 14/135 [03:05<22:32, 11.18s/it] 11%|████▋                                     | 15/135 [03:17<23:08, 11.57s/it] 12%|████▉                                     | 16/135 [03:25<20:33, 10.36s/it] 13%|█████▎                                    | 17/135 [03:33<18:59,  9.66s/it] 13%|█████▌                                    | 18/135 [03:43<18:58,  9.73s/it] 14%|█████▉                                    | 19/135 [03:55<20:30, 10.60s/it] 15%|██████▏                                   | 20/135 [04:11<23:31, 12.28s/it] 16%|██████▌                                   | 21/135 [04:27<25:12, 13.27s/it] 16%|██████▊                                   | 22/135 [04:40<24:48, 13.18s/it] 17%|███████▏                                  | 23/135 [04:53<24:40, 13.22s/it] 18%|███████▍                                  | 24/135 [05:03<22:38, 12.24s/it] 19%|███████▊                                  | 25/135 [05:10<19:19, 10.54s/it] 19%|████████                                  | 26/135 [05:17<17:33,  9.67s/it] 20%|████████▍                                 | 27/135 [05:23<15:22,  8.54s/it] 21%|████████▋                                 | 28/135 [05:27<12:33,  7.04s/it] 21%|█████████                                 | 29/135 [05:33<11:52,  6.72s/it] 22%|█████████▎                                | 30/135 [05:35<09:19,  5.33s/it] 23%|█████████▋                                | 31/135 [05:40<08:53,  5.13s/it] 24%|█████████▉                                | 32/135 [05:45<08:50,  5.15s/it] 24%|██████████▎                               | 33/135 [05:47<07:10,  4.22s/it] 25%|██████████▌                               | 34/135 [05:50<06:31,  3.88s/it] 26%|██████████▉                               | 35/135 [05:52<05:31,  3.32s/it] 27%|███████████▏                              | 36/135 [05:55<05:25,  3.29s/it] 27%|███████████▌                              | 37/135 [05:59<05:50,  3.58s/it] 28%|███████████▊                              | 38/135 [06:02<05:15,  3.25s/it] 29%|████████████▏                             | 39/135 [06:05<04:58,  3.11s/it] 30%|████████████▍                             | 40/135 [06:08<05:10,  3.27s/it] 30%|████████████▊                             | 41/135 [06:11<04:38,  2.97s/it] 31%|█████████████                             | 42/135 [06:14<04:45,  3.07s/it] 32%|█████████████▍                            | 43/135 [06:17<04:38,  3.03s/it] 33%|█████████████▋                            | 44/135 [06:19<04:04,  2.68s/it] 33%|██████████████                            | 45/135 [06:21<03:43,  2.49s/it] 34%|██████████████▎                           | 46/135 [06:24<04:13,  2.85s/it] 35%|██████████████▌                           | 47/135 [06:28<04:31,  3.08s/it] 36%|██████████████▉                           | 48/135 [06:32<04:44,  3.27s/it] 36%|███████████████▏                          | 49/135 [06:36<05:10,  3.61s/it] 37%|███████████████▌                          | 50/135 [06:40<05:16,  3.72s/it] 38%|███████████████▊                          | 51/135 [06:44<05:24,  3.87s/it] 39%|████████████████▏                         | 52/135 [06:47<05:02,  3.64s/it] 39%|████████████████▍                         | 53/135 [06:50<04:41,  3.43s/it] 40%|████████████████▊                         | 54/135 [06:53<04:28,  3.31s/it] 41%|█████████████████                         | 55/135 [07:21<14:19, 10.74s/it] 41%|█████████████████▍                        | 56/135 [07:58<24:10, 18.36s/it] 42%|█████████████████▋                        | 57/135 [08:22<26:24, 20.32s/it] 43%|██████████████████                        | 58/135 [08:35<22:56, 17.88s/it] 44%|██████████████████▎                       | 59/135 [09:02<26:25, 20.86s/it] 44%|██████████████████▋                       | 60/135 [09:40<32:29, 26.00s/it] 45%|██████████████████▉                       | 61/135 [10:05<31:23, 25.45s/it] 46%|███████████████████▎                      | 62/135 [10:15<25:31, 20.98s/it] 47%|███████████████████▌                      | 63/135 [10:45<28:15, 23.54s/it] 47%|███████████████████▉                      | 64/135 [11:18<31:21, 26.50s/it] 48%|████████████████████▏                     | 65/135 [11:50<32:57, 28.24s/it] 49%|████████████████████▌                     | 66/135 [12:18<32:23, 28.16s/it] 50%|████████████████████▊                     | 67/135 [12:33<27:18, 24.09s/it] 50%|█████████████████████▏                    | 68/135 [13:00<27:46, 24.87s/it] 51%|█████████████████████▍                    | 69/135 [13:20<25:58, 23.62s/it] 52%|█████████████████████▊                    | 70/135 [13:44<25:42, 23.74s/it] 53%|██████████████████████                    | 71/135 [14:15<27:39, 25.93s/it] 53%|██████████████████████▍                   | 72/135 [14:35<25:21, 24.15s/it] 54%|██████████████████████▋                   | 73/135 [15:07<27:17, 26.41s/it] 55%|███████████████████████                   | 74/135 [15:31<26:08, 25.71s/it] 56%|███████████████████████▎                  | 75/135 [15:47<22:38, 22.65s/it] 56%|███████████████████████▋                  | 76/135 [16:00<19:35, 19.93s/it] 57%|███████████████████████▉                  | 77/135 [16:21<19:27, 20.12s/it] 58%|████████████████████████▎                 | 78/135 [16:40<18:50, 19.83s/it] 59%|████████████████████████▌                 | 79/135 [16:57<17:47, 19.06s/it] 59%|████████████████████████▉                 | 80/135 [17:14<16:52, 18.40s/it] 60%|█████████████████████████▏                | 81/135 [17:29<15:31, 17.26s/it] 61%|█████████████████████████▌                | 82/135 [17:36<12:33, 14.21s/it] 61%|█████████████████████████▊                | 83/135 [17:50<12:15, 14.15s/it] 62%|██████████████████████████▏               | 84/135 [18:01<11:19, 13.32s/it] 63%|██████████████████████████▍               | 85/135 [18:11<10:08, 12.18s/it] 64%|██████████████████████████▊               | 86/135 [18:22<09:45, 11.96s/it] 64%|███████████████████████████               | 87/135 [18:33<09:24, 11.76s/it] 65%|███████████████████████████▍              | 88/135 [18:40<08:03, 10.29s/it] 66%|███████████████████████████▋              | 89/135 [18:51<07:55, 10.35s/it] 67%|████████████████████████████              | 90/135 [18:58<07:00,  9.35s/it] 67%|████████████████████████████▎             | 91/135 [19:09<07:14,  9.87s/it] 68%|████████████████████████████▌             | 92/135 [19:22<07:42, 10.76s/it] 69%|████████████████████████████▉             | 93/135 [19:33<07:43, 11.04s/it] 70%|█████████████████████████████▏            | 94/135 [19:42<07:06, 10.40s/it] 70%|█████████████████████████████▌            | 95/135 [19:52<06:51, 10.29s/it] 71%|█████████████████████████████▊            | 96/135 [20:01<06:18,  9.71s/it] 72%|██████████████████████████████▏           | 97/135 [20:06<05:14,  8.28s/it] 73%|██████████████████████████████▍           | 98/135 [20:16<05:27,  8.86s/it] 73%|██████████████████████████████▊           | 99/135 [20:22<04:53,  8.14s/it] 74%|██████████████████████████████▎          | 100/135 [20:30<04:43,  8.11s/it] 75%|██████████████████████████████▋          | 101/135 [20:39<04:37,  8.16s/it] 76%|██████████████████████████████▉          | 102/135 [20:49<04:47,  8.70s/it] 76%|███████████████████████████████▎         | 103/135 [20:56<04:27,  8.36s/it] 77%|███████████████████████████████▌         | 104/135 [21:06<04:36,  8.91s/it] 78%|███████████████████████████████▉         | 105/135 [21:18<04:51,  9.70s/it] 79%|████████████████████████████████▏        | 106/135 [21:28<04:42,  9.73s/it] 79%|████████████████████████████████▍        | 107/135 [21:36<04:23,  9.42s/it] 80%|████████████████████████████████▊        | 108/135 [21:47<04:25,  9.84s/it] 81%|█████████████████████████████████        | 109/135 [21:57<04:17,  9.89s/it] 81%|█████████████████████████████████▍       | 110/135 [22:11<04:34, 10.96s/it] 82%|█████████████████████████████████▋       | 111/135 [22:25<04:45, 11.89s/it] 83%|██████████████████████████████████       | 112/135 [22:34<04:13, 11.04s/it] 84%|██████████████████████████████████▎      | 113/135 [22:42<03:46, 10.30s/it] 84%|██████████████████████████████████▌      | 114/135 [22:50<03:18,  9.45s/it] 85%|██████████████████████████████████▉      | 115/135 [22:56<02:48,  8.45s/it] 86%|███████████████████████████████████▏     | 116/135 [23:05<02:43,  8.58s/it] 87%|███████████████████████████████████▌     | 117/135 [23:16<02:49,  9.43s/it] 87%|███████████████████████████████████▊     | 118/135 [23:30<03:03, 10.81s/it] 88%|████████████████████████████████████▏    | 119/135 [23:39<02:44, 10.26s/it] 89%|████████████████████████████████████▍    | 120/135 [23:47<02:24,  9.65s/it] 90%|████████████████████████████████████▋    | 121/135 [24:02<02:36, 11.21s/it] 90%|█████████████████████████████████████    | 122/135 [24:14<02:26, 11.27s/it] 91%|█████████████████████████████████████▎   | 123/135 [24:31<02:36, 13.08s/it] 92%|█████████████████████████████████████▋   | 124/135 [24:39<02:05, 11.44s/it] 93%|█████████████████████████████████████▉   | 125/135 [24:45<01:37,  9.77s/it] 93%|██████████████████████████████████████▎  | 126/135 [24:50<01:15,  8.34s/it] 94%|██████████████████████████████████████▌  | 127/135 [25:11<01:38, 12.32s/it] 95%|██████████████████████████████████████▊  | 128/135 [25:24<01:27, 12.47s/it] 96%|███████████████████████████████████████▏ | 129/135 [25:36<01:14, 12.36s/it] 96%|███████████████████████████████████████▍ | 130/135 [25:44<00:54, 10.94s/it] 97%|███████████████████████████████████████▊ | 131/135 [25:58<00:48, 12.01s/it] 98%|████████████████████████████████████████ | 132/135 [26:14<00:39, 13.22s/it] 99%|████████████████████████████████████████▍| 133/135 [26:23<00:23, 11.90s/it] 99%|████████████████████████████████████████▋| 134/135 [26:30<00:10, 10.31s/it]100%|█████████████████████████████████████████| 135/135 [26:40<00:00, 10.21s/it]100%|█████████████████████████████████████████| 135/135 [26:40<00:00, 11.85s/it]
n of data transformed:  135
Processing analysis pass: att_gaussian_neighbors_1000
Found 135 files to process.
Found 0 files already processed. Skippign them.
Processing 135 files.
Starting to derive attention for 135 files...
Args: [('Nqueens_Q1.cpp_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('Nqueens_Q1.cpp_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('Nqueens_Q1.cpp_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('Nqueens_Q1.cs_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('Nqueens_Q1.cs_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('Nqueens_Q1.cs_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('Nqueens_Q1.py_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('Nqueens_Q1.py_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('Nqueens_Q1.py_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('Nqueens_Q2.cpp_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('Nqueens_Q2.cpp_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('Nqueens_Q2.cpp_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('Nqueens_Q2.cs_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('Nqueens_Q2.cs_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('Nqueens_Q2.cs_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('Nqueens_Q2.py_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('Nqueens_Q2.py_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('Nqueens_Q2.py_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('Nqueens_Q3.cpp_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('Nqueens_Q3.cpp_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('Nqueens_Q3.cpp_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('Nqueens_Q3.cs_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('Nqueens_Q3.cs_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('Nqueens_Q3.cs_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('Nqueens_Q3.py_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('Nqueens_Q3.py_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('Nqueens_Q3.py_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('hannoi_Q1.cpp_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('hannoi_Q1.cpp_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('hannoi_Q1.cpp_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('hannoi_Q1.cs_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('hannoi_Q1.cs_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('hannoi_Q1.cs_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('hannoi_Q1.py_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('hannoi_Q1.py_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('hannoi_Q1.py_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('hannoi_Q2.cpp_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('hannoi_Q2.cpp_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('hannoi_Q2.cpp_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('hannoi_Q2.cs_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('hannoi_Q2.cs_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('hannoi_Q2.cs_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('hannoi_Q2.py_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('hannoi_Q2.py_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('hannoi_Q2.py_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('hannoi_Q3.cpp_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('hannoi_Q3.cpp_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('hannoi_Q3.cpp_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('hannoi_Q3.cs_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('hannoi_Q3.cs_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('hannoi_Q3.cs_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('hannoi_Q3.py_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('hannoi_Q3.py_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('hannoi_Q3.py_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('multithread_Q1.cpp_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('multithread_Q1.cpp_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('multithread_Q1.cpp_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('multithread_Q1.cs_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('multithread_Q1.cs_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('multithread_Q1.cs_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('multithread_Q1.py_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('multithread_Q1.py_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('multithread_Q1.py_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('multithread_Q2.cpp_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('multithread_Q2.cpp_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('multithread_Q2.cpp_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('multithread_Q2.cs_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('multithread_Q2.cs_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('multithread_Q2.cs_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('multithread_Q2.py_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('multithread_Q2.py_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('multithread_Q2.py_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('multithread_Q3.cpp_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('multithread_Q3.cpp_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('multithread_Q3.cpp_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('multithread_Q3.cs_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('multithread_Q3.cs_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('multithread_Q3.cs_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('multithread_Q3.py_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('multithread_Q3.py_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('multithread_Q3.py_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('tree_Q1.cpp_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('tree_Q1.cpp_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('tree_Q1.cpp_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('tree_Q1.cs_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('tree_Q1.cs_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('tree_Q1.cs_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('tree_Q1.py_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('tree_Q1.py_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('tree_Q1.py_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('tree_Q2.cpp_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('tree_Q2.cpp_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('tree_Q2.cpp_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('tree_Q2.cs_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('tree_Q2.cs_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('tree_Q2.cs_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('tree_Q2.py_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('tree_Q2.py_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('tree_Q2.py_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('tree_Q3.cpp_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('tree_Q3.cpp_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('tree_Q3.cpp_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('tree_Q3.cs_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('tree_Q3.cs_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('tree_Q3.cs_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('tree_Q3.py_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('tree_Q3.py_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('tree_Q3.py_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('triangle_Q1.cpp_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('triangle_Q1.cpp_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('triangle_Q1.cpp_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('triangle_Q1.cs_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('triangle_Q1.cs_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('triangle_Q1.cs_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('triangle_Q1.py_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('triangle_Q1.py_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('triangle_Q1.py_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('triangle_Q2.cpp_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('triangle_Q2.cpp_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('triangle_Q2.cpp_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('triangle_Q2.cs_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('triangle_Q2.cs_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('triangle_Q2.cs_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('triangle_Q2.py_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('triangle_Q2.py_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('triangle_Q2.py_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('triangle_Q3.cpp_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('triangle_Q3.cpp_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('triangle_Q3.cpp_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('triangle_Q3.cs_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('triangle_Q3.cs_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('triangle_Q3.cs_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('triangle_Q3.py_0_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('triangle_Q3.py_1_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>), ('triangle_Q3.py_2_Salesforce_codegen-6B-multi.json', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', 'data/model_output/exp_v10/codegen6B_rebuttal/metadata', './data/model_output/exp_v10/codegen6B_rebuttal/att_gaussian_neighbors_1000', {'sigma': 1000}, <function generate_gaussian_attention_in_neighborhood_from_metadata at 0x7ff996674790>)]
  0%|                                                   | 0/135 [00:00<?, ?it/s]  1%|▎                                          | 1/135 [00:08<18:48,  8.42s/it]  1%|▋                                          | 2/135 [00:29<35:10, 15.87s/it]  2%|▉                                          | 3/135 [00:39<29:00, 13.18s/it]  3%|█▎                                         | 4/135 [00:55<31:06, 14.25s/it]  4%|█▌                                         | 5/135 [01:11<32:31, 15.01s/it]  4%|█▉                                         | 6/135 [01:29<34:16, 15.95s/it]  5%|██▏                                        | 7/135 [01:40<30:22, 14.24s/it]  6%|██▌                                        | 8/135 [01:49<26:41, 12.61s/it]  7%|██▊                                        | 9/135 [01:58<24:30, 11.67s/it]  7%|███                                       | 10/135 [02:17<28:58, 13.90s/it]  8%|███▍                                      | 11/135 [02:38<32:51, 15.90s/it]  9%|███▋                                      | 12/135 [03:01<36:57, 18.03s/it] 10%|████                                      | 13/135 [03:20<37:09, 18.27s/it] 10%|████▎                                     | 14/135 [03:41<39:03, 19.37s/it] 11%|████▋                                     | 15/135 [04:03<39:51, 19.93s/it] 12%|████▉                                     | 16/135 [04:16<35:23, 17.85s/it] 13%|█████▎                                    | 17/135 [04:29<32:42, 16.63s/it] 13%|█████▌                                    | 18/135 [04:36<26:18, 13.49s/it] 14%|█████▉                                    | 19/135 [05:01<32:56, 17.04s/it] 15%|██████▏                                   | 20/135 [05:21<34:33, 18.03s/it] 16%|██████▌                                   | 21/135 [05:38<33:34, 17.67s/it] 16%|██████▊                                   | 22/135 [05:56<33:16, 17.67s/it] 17%|███████▏                                  | 23/135 [06:19<36:20, 19.47s/it] 18%|███████▍                                  | 24/135 [06:34<33:16, 17.98s/it] 19%|███████▊                                  | 25/135 [06:45<28:55, 15.78s/it] 19%|████████                                  | 26/135 [06:57<26:52, 14.79s/it] 20%|████████▍                                 | 27/135 [07:06<23:19, 12.95s/it] 21%|████████▋                                 | 28/135 [07:10<18:21, 10.29s/it] 21%|█████████                                 | 29/135 [07:16<16:12,  9.17s/it] 22%|█████████▎                                | 30/135 [07:20<12:59,  7.42s/it] 23%|█████████▋                                | 31/135 [07:24<11:09,  6.44s/it] 24%|█████████▉                                | 32/135 [07:30<10:42,  6.23s/it] 24%|██████████▎                               | 33/135 [07:33<09:20,  5.49s/it] 25%|██████████▌                               | 34/135 [07:37<08:06,  4.82s/it] 26%|██████████▉                               | 35/135 [07:41<07:35,  4.55s/it] 27%|███████████▏                              | 36/135 [07:43<06:27,  3.92s/it] 27%|███████████▌                              | 37/135 [07:47<06:29,  3.97s/it] 28%|███████████▊                              | 38/135 [07:52<06:39,  4.12s/it] 29%|████████████▏                             | 39/135 [07:58<07:35,  4.74s/it] 30%|████████████▍                             | 40/135 [08:04<08:07,  5.14s/it] 30%|████████████▊                             | 41/135 [08:08<07:27,  4.76s/it] 31%|█████████████                             | 42/135 [08:11<06:43,  4.34s/it] 32%|█████████████▍                            | 43/135 [08:14<06:03,  3.95s/it] 33%|█████████████▋                            | 44/135 [08:17<05:31,  3.64s/it] 33%|██████████████                            | 45/135 [08:19<04:52,  3.25s/it] 34%|██████████████▎                           | 46/135 [08:26<06:08,  4.14s/it] 35%|██████████████▌                           | 47/135 [08:32<07:11,  4.91s/it] 36%|██████████████▉                           | 48/135 [08:38<07:20,  5.06s/it] 36%|███████████████▏                          | 49/135 [08:42<06:48,  4.75s/it] 37%|███████████████▌                          | 50/135 [08:46<06:44,  4.76s/it] 38%|███████████████▊                          | 51/135 [08:54<07:45,  5.54s/it] 39%|████████████████▏                         | 52/135 [08:57<06:48,  4.92s/it] 39%|████████████████▍                         | 53/135 [09:00<05:58,  4.38s/it] 40%|████████████████▊                         | 54/135 [09:04<05:22,  3.98s/it] 41%|█████████████████                         | 55/135 [09:37<17:02, 12.78s/it] 41%|█████████████████▍                        | 56/135 [10:10<24:44, 18.79s/it] 42%|█████████████████▋                        | 57/135 [10:41<29:26, 22.64s/it] 43%|██████████████████                        | 58/135 [11:05<29:24, 22.91s/it] 44%|██████████████████▎                       | 59/135 [11:27<28:48, 22.74s/it] 44%|██████████████████▋                       | 60/135 [11:57<31:06, 24.89s/it] 45%|██████████████████▉                       | 61/135 [12:37<36:25, 29.53s/it] 46%|███████████████████▎                      | 62/135 [13:08<36:14, 29.79s/it] 47%|███████████████████▌                      | 63/135 [13:34<34:33, 28.80s/it] 47%|███████████████████▉                      | 64/135 [14:10<36:38, 30.96s/it] 48%|████████████████████▏                     | 65/135 [14:29<31:41, 27.17s/it] 49%|████████████████████▌                     | 66/135 [15:02<33:29, 29.13s/it] 50%|████████████████████▊                     | 67/135 [15:28<31:55, 28.16s/it] 50%|█████████████████████▏                    | 68/135 [15:45<27:39, 24.77s/it] 51%|█████████████████████▍                    | 69/135 [16:00<24:00, 21.82s/it] 52%|█████████████████████▊                    | 70/135 [16:15<21:18, 19.67s/it] 53%|██████████████████████                    | 71/135 [16:38<22:15, 20.87s/it] 53%|██████████████████████▍                   | 72/135 [16:51<19:22, 18.45s/it] 54%|██████████████████████▋                   | 73/135 [17:07<18:20, 17.75s/it] 55%|███████████████████████                   | 74/135 [17:28<19:01, 18.71s/it] 56%|███████████████████████▎                  | 75/135 [17:49<19:19, 19.33s/it] 56%|███████████████████████▋                  | 76/135 [17:58<16:04, 16.35s/it] 57%|███████████████████████▉                  | 77/135 [18:10<14:19, 14.82s/it] 58%|████████████████████████▎                 | 78/135 [18:25<14:20, 15.09s/it] 59%|████████████████████████▌                 | 79/135 [18:42<14:27, 15.50s/it] 59%|████████████████████████▉                 | 80/135 [18:53<13:07, 14.32s/it] 60%|█████████████████████████▏                | 81/135 [19:05<12:02, 13.38s/it] 61%|█████████████████████████▌                | 82/135 [19:16<11:25, 12.93s/it] 61%|█████████████████████████▊                | 83/135 [19:28<10:44, 12.39s/it] 62%|██████████████████████████▏               | 84/135 [19:41<10:44, 12.64s/it] 63%|██████████████████████████▍               | 85/135 [20:00<12:06, 14.53s/it] 64%|██████████████████████████▊               | 86/135 [20:14<11:50, 14.50s/it] 64%|███████████████████████████               | 87/135 [20:27<11:13, 14.03s/it] 65%|███████████████████████████▍              | 88/135 [20:34<09:14, 11.79s/it] 66%|███████████████████████████▋              | 89/135 [20:43<08:31, 11.13s/it] 67%|████████████████████████████              | 90/135 [20:53<08:03, 10.75s/it] 67%|████████████████████████████▎             | 91/135 [21:04<07:55, 10.80s/it] 68%|████████████████████████████▌             | 92/135 [21:13<07:16, 10.16s/it] 69%|████████████████████████████▉             | 93/135 [21:24<07:21, 10.51s/it] 70%|█████████████████████████████▏            | 94/135 [21:39<08:10, 11.96s/it] 70%|█████████████████████████████▌            | 95/135 [21:51<07:55, 11.89s/it] 71%|█████████████████████████████▊            | 96/135 [22:03<07:42, 11.85s/it] 72%|██████████████████████████████▏           | 97/135 [22:11<06:50, 10.80s/it] 73%|██████████████████████████████▍           | 98/135 [22:23<06:49, 11.06s/it] 73%|██████████████████████████████▊           | 99/135 [22:30<05:57,  9.92s/it] 74%|██████████████████████████████▎          | 100/135 [22:42<06:04, 10.41s/it] 75%|██████████████████████████████▋          | 101/135 [23:00<07:14, 12.79s/it] 76%|██████████████████████████████▉          | 102/135 [23:09<06:21, 11.55s/it] 76%|███████████████████████████████▎         | 103/135 [23:21<06:12, 11.65s/it] 77%|███████████████████████████████▌         | 104/135 [23:29<05:33, 10.74s/it] 78%|███████████████████████████████▉         | 105/135 [23:42<05:41, 11.39s/it] 79%|████████████████████████████████▏        | 106/135 [23:47<04:32,  9.41s/it] 79%|████████████████████████████████▍        | 107/135 [23:57<04:25,  9.48s/it] 80%|████████████████████████████████▊        | 108/135 [24:01<03:37,  8.05s/it] 81%|█████████████████████████████████        | 109/135 [24:16<04:23, 10.15s/it] 81%|█████████████████████████████████▍       | 110/135 [24:30<04:42, 11.32s/it] 82%|█████████████████████████████████▋       | 111/135 [24:45<04:53, 12.24s/it] 83%|██████████████████████████████████       | 112/135 [24:58<04:49, 12.59s/it] 84%|██████████████████████████████████▎      | 113/135 [25:08<04:21, 11.90s/it] 84%|██████████████████████████████████▌      | 114/135 [25:24<04:34, 13.05s/it] 85%|██████████████████████████████████▉      | 115/135 [25:31<03:43, 11.16s/it] 86%|███████████████████████████████████▏     | 116/135 [25:40<03:22, 10.65s/it] 87%|███████████████████████████████████▌     | 117/135 [25:47<02:48,  9.38s/it] 87%|███████████████████████████████████▊     | 118/135 [26:02<03:08, 11.07s/it] 88%|████████████████████████████████████▏    | 119/135 [26:17<03:18, 12.38s/it] 89%|████████████████████████████████████▍    | 120/135 [26:30<03:05, 12.36s/it] 90%|████████████████████████████████████▋    | 121/135 [26:43<02:58, 12.73s/it] 90%|█████████████████████████████████████    | 122/135 [26:59<02:59, 13.78s/it] 91%|█████████████████████████████████████▎   | 123/135 [27:12<02:41, 13.50s/it] 92%|█████████████████████████████████████▋   | 124/135 [27:22<02:16, 12.42s/it] 93%|█████████████████████████████████████▉   | 125/135 [27:27<01:42, 10.28s/it] 93%|██████████████████████████████████████▎  | 126/135 [27:34<01:21,  9.05s/it] 94%|██████████████████████████████████████▌  | 127/135 [27:47<01:22, 10.36s/it] 95%|██████████████████████████████████████▊  | 128/135 [27:56<01:10, 10.05s/it] 96%|███████████████████████████████████████▏ | 129/135 [28:08<01:03, 10.66s/it] 96%|███████████████████████████████████████▍ | 130/135 [28:24<01:00, 12.10s/it] 97%|███████████████████████████████████████▊ | 131/135 [28:38<00:50, 12.64s/it] 98%|████████████████████████████████████████ | 132/135 [28:57<00:43, 14.58s/it] 99%|████████████████████████████████████████▍| 133/135 [29:06<00:26, 13.02s/it] 99%|████████████████████████████████████████▋| 134/135 [29:13<00:11, 11.05s/it]100%|█████████████████████████████████████████| 135/135 [29:20<00:00,  9.92s/it]100%|█████████████████████████████████████████| 135/135 [29:20<00:00, 13.04s/it]
n of data transformed:  135
